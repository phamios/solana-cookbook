import{_ as i,r as a,o as d,c as l,a as e,b as t,w as h,F as c,d as n,e as o}from"./app.07ce7a66.js";const _={},m=e("h1",{id:"programme",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#programme","aria-hidden":"true"},"#"),n(" Programme")],-1),g=e("p",null,"Jeder Entwickler kann Programme f\xFCr die Solana-Blockchain schreiben und bereitstellen. Das Programm (in anderen Protokollen als Smart Contracts bekannt) dient als Grundlage f\xFCr On-Chain-Aktivit\xE4ten und treibt alles an, von DeFi und NFTs bis hin zu Social Media und Gaming.",-1),u=e("h2",{id:"facts",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#facts","aria-hidden":"true"},"#"),n(" Facts")],-1),p={class:"custom-container tip"},b=e("p",{class:"custom-container-title"},"Fact Sheet",-1),f=e("li",null,[n("Programme verarbeiten "),e("a",{href:"./transactions"},"Aneweisungen"),n(" sowohl von Endbenutzern als auch von anderen Programmen")],-1),k=n("Alle Programme sind "),P=e("em",null,"zustandslos",-1),v=n(" ("),w=e("em",null,"stateless",-1),z=n("): Alle Daten, mit denen sie interagieren, werden in separaten "),S=n("Konten"),L=n(" gespeichert, die \xFCber Anweisungen gegeben werden."),B=e("li",null,'Programme selbst werden in Konten gespeichert, die als "ausf\xFChrbar" gekennzeichnet sind',-1),y=n("Alle Programme geh\xF6ren dem "),D={href:"https://docs.solana.com/developing/runtime-facilities/programs#bpf-loader",target:"_blank",rel:"noopener noreferrer"},x=n("BPF Loader"),A=n(" und werden von der "),E={href:"https://docs.solana.com/developing/programming-model/runtime",target:"_blank",rel:"noopener noreferrer"},F=n("Solana Runtime"),C=n(" ausgef\xFChrt"),R=n("Entwickler schreiben am h\xE4ufigsten Programme in Rust oder C++, k\xF6nnen aber jede Sprache w\xE4hlen, die auf das "),K={href:"https://llvm.org/",target:"_blank",rel:"noopener noreferrer"},V=n("LLVM"),N=n("'s "),I={href:"https://en.wikipedia.org/wiki/Berkeley_Packet_Filter",target:"_blank",rel:"noopener noreferrer"},M=n("BPF"),T=n(" Backend abziehlt"),j=o("<li>Alle Programme haben einen einzigen Einstiegspunkt, an dem die Befehlsverarbeitung stattfindet (i.e. <code>process_instruction</code>); Parameter beinhalten immer: <ul><li><code>program_id</code>: <code>pubkey</code></li><li><code>accounts</code>: <code>array</code>,</li><li><code>instruction_data</code>: <code>byte array</code></li></ul></li>",1),O=e("h2",{id:"deep-dive",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#deep-dive","aria-hidden":"true"},"#"),n(" Deep Dive")],-1),U=e("p",null,"Im Gegensatz zu den meisten anderen Blockchains trennt Solana Code vollst\xE4ndig von Daten. Alle Daten, mit denen Programme interagieren, werden in separaten Konten gespeichert und als Referenzen \xFCber Anweisungen weitergegeben. Dieses Modell erm\xF6glicht es, dass ein einziges generisches Programm \xFCber verschiedene Konten l\xE4uft, ohne dass zus\xE4tzliche Bereitstellungen (Deployments) erforderlich sind. \xDCbliche Beispiele f\xFCr dieses Muster finden sich in den Native- und SPL-Programmen.",-1),G=e("h3",{id:"native-programme-die-solana-programm-bibliothek-spl-solana-program-library",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#native-programme-die-solana-programm-bibliothek-spl-solana-program-library","aria-hidden":"true"},"#"),n(" Native Programme & Die Solana Programm Bibliothek (SPL - Solana Program Library)")],-1),J=n("Solana ist mit einer Reihe von Programmen ausgestattet, die als Kernbausteine \u200B\u200Bf\xFCr On-Chain-Interaktionen dienen. Diese Programme sind unterteilt in "),W={href:"https://docs.solana.com/developing/runtime-facilities/programs#bpf-loader",target:"_blank",rel:"noopener noreferrer"},q=n("Native Programme"),H=n(" und "),Q={href:"https://spl.solana.com/",target:"_blank",rel:"noopener noreferrer"},X=n("Solana Programm (SPL) Bibliotheken"),Y=n("."),Z=n("Native Programme stellen die Basisfunktionalit\xE4t bereit, die f\xFCr den Betrieb von Validatoren erforderlich ist. Unter diesen Programmen ist das bekannteste das "),$={href:"https://docs.solana.com/developing/runtime-facilities/programs#system-program",target:"_blank",rel:"noopener noreferrer"},ee=n("System Programm"),ne=n(", welches f\xFCr die Verwaltung neuer Konten und die \xDCbertragung von SOL zwischen zwei Parteien verantwortlich ist."),te=n("SPL-Programme unterst\xFCtzen eine Reihe von On-Chain-Aktivit\xE4ten, darunter das Erstellen, Tauschen und Verleihen von Token sowie die Generierung von Stake-Pools und die Aufrechterhaltung eines On-Chain-Namensdienstes. Das "),re={href:"https://spl.solana.com/token",target:"_blank",rel:"noopener noreferrer"},oe=n("SPL Token Program"),ae=n(" an direkt \xFCber die CLI aufgerufen werden, w\xE4hrend andere wie das "),se={href:"https://spl.solana.com/associated-token-account",target:"_blank",rel:"noopener noreferrer"},ie=n("verbundene Token-Kontoprogramm"),de=n(" werden normalerweise mit benutzerdefinierten Programmen zusammengestellt."),le=e("h3",{id:"writing-programs",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#writing-programs","aria-hidden":"true"},"#"),n(" Writing Programs")],-1),he=n("Programme werden am h\xE4ufigsten mit Rust oder C++ entwickelt, k\xF6nnen aber mit jeder Sprache entwickelt werden, die auf das BPF-Backend des LLVM abzielt. J\xFCngste Initiativen von "),ce={href:"https://neon-labs.org/",target:"_blank",rel:"noopener noreferrer"},_e=n("Neon Labs"),me=n(" und "),ge={href:"https://solang.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},ue=n("Solang"),pe=n(" erm\xF6glichen jedoch "),be={href:"https://ethereum.org/en/developers/docs/evm/",target:"_blank",rel:"noopener noreferrer"},fe=n("EVM"),ke=n(" Kompatibilit\xE4t und erm\xF6glichen es Entwicklern, Programme in Solidity zu schreiben."),Pe=o("<p>Die meisten Rust-basierten Programme halten sich an die folgende Architektur:</p><table><thead><tr><th>Datei</th><th>Beschreibung</th></tr></thead><tbody><tr><td>lib.rs</td><td>Module registrieren</td></tr><tr><td>entrypoint.rs</td><td>Einstieg ins Programm</td></tr><tr><td>instruction.rs</td><td>Programm-API, (De-)Serialisierung von Befehlsdaten</td></tr><tr><td>processor.rs</td><td>Programmlogik</td></tr><tr><td>state.rs</td><td>Programmobjekte, (De-)Serialisierungszustand</td></tr><tr><td>error.rs</td><td>Programmspezifische Fehler</td></tr></tbody></table>",2),ve=n("K\xFCrzlich hat sich "),we={href:"https://github.com/coral-xyz/anchor",target:"_blank",rel:"noopener noreferrer"},ze=n("Anchor"),Se=n(" zu einem beliebten Framework f\xFCr die Entwicklung von Programmen entwickelt. Anchor ist ein rechthaberisches Framework, \xE4hnlich wie Ruby on Rails, das Boilerplates reduziert und den (De-)Serialisierungsprozess f\xFCr die Rust-basierte Entwicklung rationalisiert."),Le=o("<p>Programme werden normalerweise entwickelt und in Localhost- und Devnet-Umgebungen getestet, bevor sie auf Testnet oder Mainnet bereitgestellt werden. Solana unterst\xFCtzt die folgenden Umgebungen:</p><table><thead><tr><th>Cluster-Umgebung</th><th>RPC Verbindungs URL</th></tr></thead><tbody><tr><td>Mainnet-beta</td><td>https://api.mainnet-beta.solana.com</td></tr><tr><td>Testnet</td><td>https://api.testnet.solana.com</td></tr><tr><td>Devnet</td><td>https://api.devnet.solana.com</td></tr><tr><td>Localhost</td><td>Default port: 8899 (e.g. http://localhost:8899, http://192.168.1.88:8899)</td></tr></tbody></table>",2),Be=n("Nach der Bereitstellung in einer Umgebung k\xF6nnen Clients mit On-Chain-Programmen \xFCber "),ye={href:"https://docs.solana.com/developing/clients/jsonrpc-api",target:"_blank",rel:"noopener noreferrer"},De=n("RPC Verbindungen"),xe=n(" mit dem jeweiligen Cluster interagieren."),Ae=e("h3",{id:"bereitstellen-von-programmen",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#bereitstellen-von-programmen","aria-hidden":"true"},"#"),n(" Bereitstellen von Programmen")],-1),Ee=n("Entwickler k\xF6nnen ihre Programme \xFCber die "),Fe={href:"https://docs.solana.com/cli/deploy-a-program",target:"_blank",rel:"noopener noreferrer"},Ce=n("CLI"),Re=n(" bereitstellen:"),Ke=o(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>solana program deploy <span class="token operator">&lt;</span>PROGRAM_FILEPATH<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,1),Ve=n("Wenn ein Programm bereitgestellt wird, wird es zu einem "),Ne={href:"https://en.wikipedia.org/wiki/Executable_and_Linkable_Format",target:"_blank",rel:"noopener noreferrer"},Ie=n("ELF shared object"),Me=n(" kompiliert und in den Solana-Cluster hochgeladen. Programme befinden sich in Konten (\xE4hnlich wie alles andere auf Solana), au\xDFer dass diese Konten als \u201Eausf\xFChrbar\u201C markiert und dem BPF Loader zugewiesen sind. Die Adresse dieses Kontos wird als \u201Eprogram_id\u201C bezeichnet und wird verwendet, um bei allen zuk\xFCnftigen Transaktionen auf das Programm zu verweisen."),Te=n("Solana unterst\xFCtzt mehrere BPF Loader, wobei der neueste der "),je={href:"https://explorer.solana.com/address/BPFLoaderUpgradeab1e11111111111111111111111",target:"_blank",rel:"noopener noreferrer"},Oe=n("aktualisierbare BPF Lader"),Ue=n(". Der BPF Loader ist daf\xFCr verantwortlich, das Konto des Programms zu verwalten und es den Clients \xFCber die \u201Eprogram_id\u201C zur Verf\xFCgung zu stellen. Alle Programme haben einen einzigen Einstiegspunkt, an dem die Befehlsverarbeitung stattfindet (d. h. \u201Eprocess_instruction\u201C), und die Parameter beinhalten immer:"),Ge=o('<ul><li><code>program_id</code>: <code>pubkey</code></li><li><code>accounts</code>: <code>array</code>,</li><li><code>instruction_data</code>: <code>byte array</code></li></ul><p>Einmal aufgerufen, werden Programme von der Solana-Laufzeit ausgef\xFChrt.</p><h2 id="weitere-quellen" tabindex="-1"><a class="header-anchor" href="#weitere-quellen" aria-hidden="true">#</a> Weitere Quellen</h2>',3),Je={href:"https://docs.solana.com/developing/on-chain-programs/overview",target:"_blank",rel:"noopener noreferrer"},We=n("Offizielle Dokumentation"),qe={href:"https://spl.solana.com/",target:"_blank",rel:"noopener noreferrer"},He=n("SPL Dokumentation"),Qe={href:"https://jstarry.notion.site/Program-deploys-29780c48794c47308d5f138074dd9838",target:"_blank",rel:"noopener noreferrer"},Xe=n("Programm-Bereitstellung von Justin Starry"),Ye={href:"https://book.solmeet.dev/notes/solana-starter-kit",target:"_blank",rel:"noopener noreferrer"},Ze=n("Solana Starter Kit von Iron Addicted Dog"),$e={href:"https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/",target:"_blank",rel:"noopener noreferrer"},en=n("Programmierung auf Solana by Paulx"),nn={href:"https://2501babe.github.io/posts/solana101.html",target:"_blank",rel:"noopener noreferrer"},tn=n("Eine Einf\xFChrung in die Solana Blockchain von Hana"),rn={href:"https://github.com/coral-xyz/anchor",target:"_blank",rel:"noopener noreferrer"},on=n("Anchor");function an(sn,dn){const s=a("RouterLink"),r=a("ExternalLinkIcon");return d(),l(c,null,[m,g,u,e("div",p,[b,e("ul",null,[f,e("li",null,[k,P,v,w,z,t(s,{to:"/de/core-concepts/accounts.html"},{default:h(()=>[S]),_:1}),L]),B,e("li",null,[y,e("a",D,[x,t(r)]),A,e("a",E,[F,t(r)]),C]),e("li",null,[R,e("a",K,[V,t(r)]),N,e("a",I,[M,t(r)]),T]),j])]),O,U,G,e("p",null,[J,e("a",W,[q,t(r)]),H,e("a",Q,[X,t(r)]),Y]),e("p",null,[Z,e("a",$,[ee,t(r)]),ne]),e("p",null,[te,e("a",re,[oe,t(r)]),ae,e("a",se,[ie,t(r)]),de]),le,e("p",null,[he,e("a",ce,[_e,t(r)]),me,e("a",ge,[ue,t(r)]),pe,e("a",be,[fe,t(r)]),ke]),Pe,e("p",null,[ve,e("a",we,[ze,t(r)]),Se]),Le,e("p",null,[Be,e("a",ye,[De,t(r)]),xe]),Ae,e("p",null,[Ee,e("a",Fe,[Ce,t(r)]),Re]),Ke,e("p",null,[Ve,e("a",Ne,[Ie,t(r)]),Me]),e("p",null,[Te,e("a",je,[Oe,t(r)]),Ue]),Ge,e("ul",null,[e("li",null,[e("a",Je,[We,t(r)])]),e("li",null,[e("a",qe,[He,t(r)])]),e("li",null,[e("a",Qe,[Xe,t(r)])]),e("li",null,[e("a",Ye,[Ze,t(r)])]),e("li",null,[e("a",$e,[en,t(r)])]),e("li",null,[e("a",nn,[tn,t(r)])]),e("li",null,[e("a",rn,[on,t(r)])])])],64)}var hn=i(_,[["render",an]]);export{hn as default};
