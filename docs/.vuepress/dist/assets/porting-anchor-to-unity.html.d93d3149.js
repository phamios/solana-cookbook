import{_ as o,r as p,o as c,c as u,a as n,b as t,F as r,d as s,e}from"./app.07ce7a66.js";const i={},l=n("h1",{id:"portage-d-un-programme-vers-unity",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#portage-d-un-programme-vers-unity","aria-hidden":"true"},"#"),s(" Portage d'un programme vers Unity")],-1),d=n("p",null,"Lorsque vous avez \xE9crit un programme Solana, vous souhaitez peut-\xEAtre l'utiliser dans le moteur de jeu Unity. Heureusement, il existe un g\xE9n\xE9rateur de code qui vous permet de porter un IDL anchor (une repr\xE9sentation json d'un programme solana) en C#.",-1),k=n("h2",{id:"creation-du-client",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#creation-du-client","aria-hidden":"true"},"#"),s(" Cr\xE9ation du client")],-1),m=s("En utilisant Anchor, vous pourrez g\xE9n\xE9rer un fichier IDL qui est une repr\xE9sentation JSON de votre programme. Cet IDL permet de g\xE9n\xE9rer diff\xE9rents clients. Par exemple, JS ou C# pour Unity. "),b=n("br",null,null,-1),g={href:"https://github.com/magicblock-labs/Solana.Unity.Anchor",target:"_blank",rel:"noopener noreferrer"},h=s("Convertisseur IDL vers C#"),v=n("br",null,null,-1),_=e(`<p>Ces deux lignes g\xE9n\xE8rent un client C# pour le jeu.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>dotnet tool install Solana<span class="token punctuation">.</span>Unity<span class="token punctuation">.</span>Anchor<span class="token punctuation">.</span>Tool
dotnet anchorgen <span class="token operator">-</span>i idl<span class="token operator">/</span>file<span class="token punctuation">.</span>json <span class="token operator">-</span>o src<span class="token operator">/</span>ProgramCode<span class="token punctuation">.</span>cs
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>Vous obtiendrez ainsi une repr\xE9sentation C# de votre programme, qui vous permettra de d\xE9s\xE9rialiser les donn\xE9es et de cr\xE9er facilement des instructions du programme.</p><h2 id="creation-de-la-transaction-dans-unity-c" tabindex="-1"><a class="header-anchor" href="#creation-de-la-transaction-dans-unity-c" aria-hidden="true">#</a> Cr\xE9ation de la transaction dans Unity C#</h2>`,4),f=s("Dans le moteur de jeu Unity, nous pouvons utiliser le "),y={href:"https://assetstore.unity.com/packages/decentralization/infrastructure/solana-sdk-for-unity-246931",target:"_blank",rel:"noopener noreferrer"},S=s("SDK Solana Unity"),C=s(" pour interagir avec le programme."),A=e("<li><p>Tout d&#39;abord, nous trouvons l&#39;adresse du compte de donn\xE9es de jeu stock\xE9 sur la cha\xEEne avec TryFindProgramAddress. Nous devons transmettre ce compte \xE0 la transaction pour que le runtime de Solana sache que nous voulons changer ce compte.</p></li><li><p>Nous utilisons ensuite le client g\xE9n\xE9r\xE9 pour cr\xE9er une instruction MoveRight.</p></li><li><p>Nous r\xE9cup\xE9rons ensuite un hash de bloc en le demandant \xE0 un n\u0153ud RPC. Cela est n\xE9cessaire pour que Solana sache combien de temps la transaction sera valable.</p></li><li><p>Ensuite, nous d\xE9finissons le payeur des frais comme \xE9tant le portefeuille du joueur.</p></li><li><p>Nous ajoutons ensuite l&#39;instruction MoveRight \xE0 la transaction. Nous pouvons \xE9galement ajouter plusieurs instructions \xE0 une seule transaction si n\xE9cessaire.</p></li><li><p>La transaction est ensuite sign\xE9e et envoy\xE9e au n\u0153ud RPC pour traitement. Solana propose diff\xE9rents niveaux d&#39;engagement (Commitment). Si nous fixons le niveau d&#39;engagement \xE0 <em>Confirmed</em> nous pourrons obtenir le nouvel \xE9tat dans les 500ms prochaines.</p></li>",6),T={href:"https://github.com/Woody4618/SolPlay_Unity_SDK/tree/main/Assets/SolPlay/Examples/TinyAdventure",target:"_blank",rel:"noopener noreferrer"},R=s("Code source en C# complet"),x=e(`<div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>public async <span class="token keyword">void</span> <span class="token function">MoveRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    PublicKey<span class="token punctuation">.</span><span class="token function">TryFindProgramAddress</span><span class="token punctuation">(</span>new<span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token punctuation">{</span>
        Encoding<span class="token punctuation">.</span>UTF8<span class="token punctuation">.</span><span class="token function">GetBytes</span><span class="token punctuation">(</span><span class="token string">&quot;level1&quot;</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    ProgramId<span class="token punctuation">,</span> out gameDataAccount<span class="token punctuation">,</span> out var bump<span class="token punctuation">)</span><span class="token punctuation">;</span>

    MoveRightAccounts account <span class="token operator">=</span> new <span class="token function">MoveRightAccounts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    account<span class="token punctuation">.</span>GameDataAccount <span class="token operator">=</span> gameDataAccount<span class="token punctuation">;</span>
    TransactionInstruction moveRightInstruction <span class="token operator">=</span> TinyAdventureProgram<span class="token punctuation">.</span><span class="token function">MoveRight</span><span class="token punctuation">(</span>account<span class="token punctuation">,</span> ProgramId<span class="token punctuation">)</span><span class="token punctuation">;</span>

    var walletHolderService <span class="token operator">=</span> ServiceFactory<span class="token punctuation">.</span>Resolve<span class="token operator">&lt;</span>WalletHolderService<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    var result <span class="token operator">=</span> await walletHolderService<span class="token punctuation">.</span>BaseWallet<span class="token punctuation">.</span>ActiveRpcClient<span class="token punctuation">.</span><span class="token function">GetRecentBlockHashAsync</span><span class="token punctuation">(</span>Commitment<span class="token punctuation">.</span>Confirmed<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Transaction transaction <span class="token operator">=</span> new <span class="token function">Transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    transaction<span class="token punctuation">.</span>FeePayer <span class="token operator">=</span> walletHolderService<span class="token punctuation">.</span>BaseWallet<span class="token punctuation">.</span>Account<span class="token punctuation">.</span>PublicKey<span class="token punctuation">;</span>
    transaction<span class="token punctuation">.</span>RecentBlockHash <span class="token operator">=</span> result<span class="token punctuation">.</span>Result<span class="token punctuation">.</span>Value<span class="token punctuation">.</span>Blockhash<span class="token punctuation">;</span>
    transaction<span class="token punctuation">.</span>Signatures <span class="token operator">=</span> new List<span class="token operator">&lt;</span>SignaturePubKeyPair<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    transaction<span class="token punctuation">.</span>Instructions <span class="token operator">=</span> new List<span class="token operator">&lt;</span>TransactionInstruction<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    transaction<span class="token punctuation">.</span>Instructions<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span>moveRightInstruction<span class="token punctuation">)</span><span class="token punctuation">;</span>

    Transaction signedTransaction <span class="token operator">=</span> await walletHolderService<span class="token punctuation">.</span>BaseWallet<span class="token punctuation">.</span><span class="token function">SignTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">)</span><span class="token punctuation">;</span>

    RequestResult<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> signature <span class="token operator">=</span> await walletHolderService<span class="token punctuation">.</span>BaseWallet<span class="token punctuation">.</span>ActiveRpcClient<span class="token punctuation">.</span><span class="token function">SendTransactionAsync</span><span class="token punctuation">(</span>
        Convert<span class="token punctuation">.</span><span class="token function">ToBase64String</span><span class="token punctuation">(</span>signedTransaction<span class="token punctuation">.</span><span class="token function">Serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        true<span class="token punctuation">,</span> Commitment<span class="token punctuation">.</span>Confirmed<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div>`,1);function P(w,I){const a=p("ExternalLinkIcon");return c(),u(r,null,[l,d,k,n("p",null,[m,b,n("a",g,[h,t(a)]),v]),_,n("p",null,[f,n("a",y,[S,t(a)]),C]),n("ol",null,[A,n("li",null,[n("p",null,[n("a",T,[R,t(a)])])])]),x],64)}var B=o(i,[["render",P]]);export{B as default};
