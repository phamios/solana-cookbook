import{_ as t,r as o,o as r,c as i,a as e,b as n,F as l,e as p,d as s}from"./app.07ce7a66.js";const c={},u=p(`<h1 id="debugging-solana-programs" tabindex="-1"><a class="header-anchor" href="#debugging-solana-programs" aria-hidden="true">#</a> Debugging Solana Programs</h1><p>There are a number of options and supporting tools for testing and debugging a Solana program.</p><h2 id="facts" tabindex="-1"><a class="header-anchor" href="#facts" aria-hidden="true">#</a> Facts</h2><div class="custom-container tip"><p class="custom-container-title">Fact Sheet</p><ul><li>The crate <code>solana-program-test</code> enables use of bare bones <strong><em>local runtime</em></strong> where you can test and debug your program interactively (e.g. in vscode).</li><li>The crate <code>solana-validator</code> enables use of the <code>solana-test-validator</code> implementation for more robust testing that occurs on a <strong><em>local validator node</em></strong>. You can run from the editor <strong><em>but breakpoints in the program are ignored</em></strong>.</li><li>The CLI tool <code>solana-test-validator</code> runs and loads your program and processes transaction execution from command line Rust applications or Javascript/Typescript applications using web3.</li><li>For all the above, liberal use of <code>msg!</code> macro in your program is recommended at the start and then removing them as you test and ensure rock solid behavior. Remember that <code>msg!</code> consumes Compute Units which can eventually fail your program by hitting the Compute Unit budget caps.</li></ul></div><p>The steps in the following sections use the <a href="#resources">solana-program-bpf-template</a>. Clone that to your machine:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:mvines/solana-bpf-program-template.git
<span class="token builtin class-name">cd</span> solana-bpf-program-template
code <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="runtime-testing-and-debugging-in-editor" tabindex="-1"><a class="header-anchor" href="#runtime-testing-and-debugging-in-editor" aria-hidden="true">#</a> Runtime Testing and Debugging in editor</h2><p>Open the file <code>src/lib.rs</code></p><p>You&#39;ll see that the program is a pretty simple and basically just logs the content received by the program entrypoint function: <code>process_instruction</code></p><ol><li>Go to the <code>#[cfg(test)]</code> section and click <code>Run Tests</code>. This will build the program and then execute the <code>async fn test_transaction()</code> test. You will see the log messages (simplified) in the vscode terminal below the source.</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>running <span class="token number">1</span> <span class="token builtin class-name">test</span>
<span class="token string">&quot;bpf_program_template&quot;</span> program loaded as native code
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM invoke <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
Program log: process_instruction: 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM: <span class="token number">1</span> accounts, <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM success
<span class="token builtin class-name">test</span> test::test_transaction <span class="token punctuation">..</span>. ok
<span class="token builtin class-name">test</span> result: ok. <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">33</span>.41s
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="2"><li>Set a breakpoint on the programs <code>msg!</code> line (11)</li><li>Back in the test module, click <code>Debug</code> and within seconds the debugger will stop on the breakpoint and now you can examine data, step through functions, etc., etc..</li></ol><p>These tests are also run from the command line with: <code>cargo test</code> or <code>cargo test-bpf</code>. Of course any breakpoints will be ignored.</p><p>How groovy can you get!</p><div class="custom-container tip"><p class="custom-container-title">Note</p><p>Keep in mind you are not using a validator node so default programs, blockhashes, etc. are not represented or will not behave as they would when running in validator node. This is why the gang at Solana gave us Local Validator Node testing!</p></div><h2 id="local-validator-node-testing-in-editor" tabindex="-1"><a class="header-anchor" href="#local-validator-node-testing-in-editor" aria-hidden="true">#</a> Local Validator Node Testing in editor</h2><p>Integration testing using programmatic loading of a local validator node is defined in the <code>tests/integration.rs</code> file.</p><p>By default, the template repo integration tests will only be runnable from the command line using <code>cargo test-bpf</code>. The following steps will enable you to run within the editor as well as displaying program validator logs and <code>msg!</code> outputs from your program:</p><ol><li>In the repo directory run <code>cargo build-bpf</code> to build the sample program</li><li>In the editor, open <code>tests/integration.rs</code></li><li>Comment out line 1 -&gt; <code>// #![cfg(feature = &quot;test-bpf&quot;)]</code></li><li>On line 19 change it to read: <code>.add_program(&quot;target/deploy/bpf_program_template&quot;, program_id)</code></li><li>Insert the following at line 22 <code>solana_logger::setup_with_default(&quot;solana_runtime::message=debug&quot;);</code></li><li>Click <code>Run Test</code> above the <code>test_validator_transaction()</code> function</li></ol><p>This will load the validator node then allowing you to construct a transaction (the Rust way) and submit to the node using the <code>RcpClient</code>.</p><p>The program&#39;s output will also print out in the editor terminal. For example (simplified):</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>running <span class="token number">1</span> <span class="token builtin class-name">test</span>
Waiting <span class="token keyword">for</span> fees to stabilize <span class="token number">1</span><span class="token punctuation">..</span>.
Waiting <span class="token keyword">for</span> fees to stabilize <span class="token number">2</span><span class="token punctuation">..</span>.
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM invoke <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
Program log: process_instruction: 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM: <span class="token number">1</span> accounts, <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM consumed <span class="token number">13027</span> of <span class="token number">200000</span> compute <span class="token function">units</span>
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM success

<span class="token builtin class-name">test</span> test_validator_transaction <span class="token punctuation">..</span>. ok
<span class="token builtin class-name">test</span> result: ok. <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">6</span>.40s
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Debugging here will allow you to debug the functions and methods used in the <strong><em>test body</em></strong> but will not breakpoint in your program.</p><p>The bee&#39;s knees eh?</p><h2 id="local-validator-node-testing-from-client-apps" tabindex="-1"><a class="header-anchor" href="#local-validator-node-testing-from-client-apps" aria-hidden="true">#</a> Local Validator Node Testing from Client Apps</h2><p>Lastly, you can start a local validating node and load your program and any accounts using the <code>solana-test-validator</code> from the command line.</p><p>In this approach, you will need a client application either using Rust <a href="#resources">RcpClient</a> or in <a href="#resources">JavaScript or Typescript clients</a></p><p>See <code>solana-test-validator --help</code> for more details and options. For the example program here is vanilla setup:</p><ol><li>Open a terminal in the repo folder</li><li>Run <code>solana config set -ul</code> to set the configuration to point to local</li><li>Run <code>solana-test-validator --bpf-program target/deploy/bpf_program_template-keypair.json target/deploy/bpf_program_template.so</code></li><li>Open another terminal and run <code>solana logs</code> to start the log streamer</li><li>You can then run your client program and observe program output in the terminal where you started the log streamer</li></ol><p>Now that is the cat&#39;s pajamas YO!</p><h2 id="resources" tabindex="-1"><a class="header-anchor" href="#resources" aria-hidden="true">#</a> Resources</h2>`,31),d={href:"https://github.com/mvines/solana-bpf-program-template",target:"_blank",rel:"noopener noreferrer"},m=s("solana-program-bpf-template"),g={href:"https://docs.rs/solana-client/latest/solana_client/rpc_client/struct.RpcClient.html",target:"_blank",rel:"noopener noreferrer"},h=s("RcpClient"),b={href:"https://solana-labs.github.io/solana-web3.js/",target:"_blank",rel:"noopener noreferrer"},k=s("JavaScript/Typescript Library");function f(v,y){const a=o("ExternalLinkIcon");return r(),i(l,null,[u,e("p",null,[e("a",d,[m,n(a)])]),e("p",null,[e("a",g,[h,n(a)])]),e("p",null,[e("a",b,[k,n(a)])])],64)}var w=t(c,[["render",f]]);export{w as default};
