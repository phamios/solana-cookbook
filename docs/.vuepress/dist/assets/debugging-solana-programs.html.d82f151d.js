import{_ as o,r,o as t,c as l,a as e,b as n,F as i,e as c,d as s}from"./app.07ce7a66.js";const p={},d=c(`<h1 id="depurando-programas-en-solana" tabindex="-1"><a class="header-anchor" href="#depurando-programas-en-solana" aria-hidden="true">#</a> Depurando Programas en Solana</h1><p>Hay una serie de opciones y herramientas de apoyo para probar y depurar un programa Solana.</p><h2 id="hechos" tabindex="-1"><a class="header-anchor" href="#hechos" aria-hidden="true">#</a> Hechos</h2><div class="custom-container tip"><p class="custom-container-title">Hoja de hechos</p><ul><li>El crate <code>solana-program-test</code> permite el uso de bare bones <strong><em>local runtime</em></strong> donde puede probar y depurar su programa de forma interactiva (por ejemplo, en vscode).</li><li>El crate <code>solana-validator</code> permite el uso de la implementaci\xF3n <code>solana-test-validator</code> para una mayor robustez de pruebas en un <strong><em>nodo validador local</em></strong>. Puede ejecutarlo desde el editor <strong><em>pero los puntos de interrupci\xF3n en el programa son ignorados</em></strong>.</li><li>La herramienta CLI <code>solana-test-validator</code> ejecuta y carga su programa y procesa la ejecuci\xF3n de transacciones desde l\xEDnea de comando, Aplicaciones Rust o aplicaciones Javascript/Typescript usando web3.</li><li>Por todo lo anterior, se recomienda el uso liberal de la macro <code>msg!</code> en su programa al principio y luego elimin\xE1ndolos mientras prueba y asegura un comportamiento estable. Recuerde que <code>msg!</code> consume Unidades de C\xF3mputo que eventualmente podr\xEDan hacer fallar su programa al alcanzar los l\xEDmites de presupuesto de la Unidad de C\xF3mputo.</li></ul></div><p>Los pasos de las siguientes secciones utilizan <a href="#resources">solana-program-bpf-template</a>. Clona eso a tu m\xE1quina:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:mvines/solana-bpf-program-template.git
<span class="token builtin class-name">cd</span> solana-bpf-program-template
code <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="pruebas-de-tiempo-de-ejecucion-y-depuracion-en-el-editor" tabindex="-1"><a class="header-anchor" href="#pruebas-de-tiempo-de-ejecucion-y-depuracion-en-el-editor" aria-hidden="true">#</a> Pruebas de tiempo de ejecuci\xF3n y depuraci\xF3n en el editor</h2><p>Abre el archivo <code>src/lib.rs</code></p><p>Ver\xE1 que el programa es bastante simple y b\xE1sicamente solo registra el contenido recibido por la funci\xF3n de entrada del programa: <code>process_instruction</code></p><ol><li>Vaya a la secci\xF3n <code>#[cfg(test)]</code> y haga clic en <code>Ejecutar pruebas</code>. Esto construir\xE1 el programa, luego ejecute la prueba <code>async fn test_transaction()</code>. Ver\xE1 los mensajes de registro (simplificados) en el terminal vscode.</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>running <span class="token number">1</span> <span class="token builtin class-name">test</span>
<span class="token string">&quot;bpf_program_template&quot;</span> program loaded as native code
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM invoke <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
Program log: process_instruction: 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM: <span class="token number">1</span> accounts, <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM success
<span class="token builtin class-name">test</span> test::test_transaction <span class="token punctuation">..</span>. ok
<span class="token builtin class-name">test</span> result: ok. <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">33</span>.41s
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="2"><li>Establezca un punto de interrupci\xF3n en la l\xEDnea <code>msg!</code> del programa (11)</li><li>De vuelta en el m\xF3dulo de prueba, haga clic en &quot;Depurar&quot; y, en cuesti\xF3n de segundos, el depurador se detendr\xE1 en el punto de interrupci\xF3n y ahora puede examinar datos, recorrer funciones, etc.</li></ol><p>Estas pruebas tambi\xE9n se ejecutan desde la l\xEDnea de comandos con: <code>cargo test</code> o <code>cargo test-bpf</code>. Por supuesto, cualquier punto de interrupci\xF3n ser\xE1 ignorado.</p><div class="custom-container tip"><p class="custom-container-title">Nota</p><p>Tenga en cuenta que no est\xE1 utilizando un nodo de validaci\xF3n, por lo que los programas predeterminados, hashes de bloque, etc. no est\xE1n representados o no se comportar\xE1 como lo har\xEDa cuando se ejecuta en el nodo de validaci\xF3n. Por eso la Solana nos dio el nodo Local Validator para hacer pruebas!</p></div><h2 id="pruebas-de-nodo-de-validacion-local-en-el-editor-local-validator" tabindex="-1"><a class="header-anchor" href="#pruebas-de-nodo-de-validacion-local-en-el-editor-local-validator" aria-hidden="true">#</a> Pruebas de nodo de validaci\xF3n local en el editor (Local Validator)</h2><p>Las pruebas de integraci\xF3n mediante la carga program\xE1tica de un nodo validador local se definen en el archivo <code>tests/integration.rs</code>.</p><p>De forma predeterminada, las pruebas de integraci\xF3n del repositorio de plantillas solo se podr\xE1n ejecutar desde la l\xEDnea de comandos usando <code>cargo test-bpf</code>. Los siguientes pasos tambi\xE9n le permitir\xE1n ejecutar dentro del editor, como mostrar los registros del validador del programa y las salidas <code>msg!</code> de su programa:</p><ol><li>En el directorio del repositorio, ejecute <code>cargo build-bpf</code> para compilar el programa de muestra</li><li>En el editor, abra <code>tests/integration.rs</code></li><li>Comente la l\xEDnea 1 -&gt; <code>// #![cfg(feature = &quot;test-bpf&quot;)]</code></li><li>En la l\xEDnea 19, c\xE1mbielo para que diga: <code>.add_program(&quot;target/deploy/bpf_program_template&quot;, program_id)</code></li><li>Inserte lo siguiente en la l\xEDnea 22 <code>solana_logger::setup_with_default(&quot;solana_runtime::message=debug&quot;);</code></li><li>Haga clic en <code>Ejecutar prueba</code> encima de la funci\xF3n <code>test_validator_transaction()</code></li></ol><p>Esto cargar\xE1 el nodo de validaci\xF3n y luego le permitir\xE1 construir una transacci\xF3n (al estilo de Rust) y enviar al nodo usando <code>RcpClient</code>.</p><p>La salida del programa tambi\xE9n se imprimir\xE1 en la terminal del editor. Por ejemplo (simplificado):</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>running <span class="token number">1</span> <span class="token builtin class-name">test</span>
Waiting <span class="token keyword">for</span> fees to stabilize <span class="token number">1</span><span class="token punctuation">..</span>.
Waiting <span class="token keyword">for</span> fees to stabilize <span class="token number">2</span><span class="token punctuation">..</span>.
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM invoke <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
Program log: process_instruction: 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM: <span class="token number">1</span> accounts, <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM consumed <span class="token number">13027</span> of <span class="token number">200000</span> compute <span class="token function">units</span>
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM success

<span class="token builtin class-name">test</span> test_validator_transaction <span class="token punctuation">..</span>. ok
<span class="token builtin class-name">test</span> result: ok. <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">6</span>.40s
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>La depuraci\xF3n aqu\xED le permitir\xE1 depurar las funciones y los m\xE9todos utilizados en el <strong><em>cuerpo de prueba</em></strong>, pero no un punto de interrupci\xF3n en su programa.</p><h2 id="pruebas-de-nodos-de-validadores-locales-desde-aplicaciones-cliente" tabindex="-1"><a class="header-anchor" href="#pruebas-de-nodos-de-validadores-locales-desde-aplicaciones-cliente" aria-hidden="true">#</a> Pruebas de nodos de validadores locales desde aplicaciones cliente</h2><p>Por \xFAltimo, puede iniciar un nodo de validaci\xF3n local y cargar su programa y cualquier cuenta usando <code>solana-test-validator</code> desde la l\xEDnea de comandos.</p><p>En este enfoque, necesitar\xE1 una aplicaci\xF3n cliente usando Rust <a href="#resources">RcpClient</a> o en <a href="#resources">Clientes JavaScript o Typescript</a></p><p>Consulte <code>solana-test-validator --help</code> para obtener m\xE1s detalles y opciones. Para el programa de ejemplo aqu\xED est\xE1 la configuraci\xF3n:</p><ol><li>Abra una terminal en la carpeta repo</li><li>Ejecute <code>solana config set -ul</code> para configurar la configuraci\xF3n para que apunte a local</li><li>Ejecute <code>solana-test-validator --bpf-program target/deploy/bpf_program_template-keypair.json target/deploy/bpf_program_template.so</code></li><li>Abra otra terminal y ejecute <code>solana logs</code> para iniciar el transmisor de registros</li><li>Luego puede ejecutar su programa cliente y observar la salida del programa en la terminal donde inici\xF3 el transmisor de registros.</li></ol><h2 id="recursos" tabindex="-1"><a class="header-anchor" href="#recursos" aria-hidden="true">#</a> Recursos</h2>`,28),u={href:"https://github.com/mvines/solana-bpf-program-template",target:"_blank",rel:"noopener noreferrer"},m=s("solana-program-bpf-template"),b={href:"https://docs.rs/solana-client/latest/solana_client/rpc_client/struct.RpcClient.html",target:"_blank",rel:"noopener noreferrer"},g=s("RcpClient"),h={href:"https://solana-labs.github.io/solana-web3.js/",target:"_blank",rel:"noopener noreferrer"},k=s("Librer\xEDa JavaScript/Typescript");function f(v,_){const a=r("ExternalLinkIcon");return t(),l(i,null,[d,e("p",null,[e("a",u,[m,n(a)])]),e("p",null,[e("a",b,[g,n(a)])]),e("p",null,[e("a",h,[k,n(a)])])],64)}var j=o(p,[["render",f]]);export{j as default};
