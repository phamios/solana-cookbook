import{_ as t,r as i,o,c as r,a,b as e,F as l,e as p,d as s}from"./app.07ce7a66.js";const d={},u=p(`<h1 id="debug-program-solana" tabindex="-1"><a class="header-anchor" href="#debug-program-solana" aria-hidden="true">#</a> Debug Program Solana</h1><p>Ada sejumlah opsi dan alat pendukung untuk menguji dan men-debug program Solana.</p><h2 id="fakta" tabindex="-1"><a class="header-anchor" href="#fakta" aria-hidden="true">#</a> Fakta</h2><div class="custom-container tip"><p class="custom-container-title">Lembar Fakta</p><ul><li>Crate <code>solana-program-test</code> memungkinkan penggunaan secara langsung terhadap <strong><em>runtime lokal</em></strong> tempat Anda dapat menguji dan men-debug program Anda secara interaktif (misalnya dalam vscode).</li><li>Crate <code>solana-validator</code> memungkinkan implementasi <code>solana-test-validator</code> untuk robust testing yang lebih baik yang terjadi pada <strong><em>local validator node</em></strong>. Anda dapat menjalankan dari editor <strong><em>tetapi breakpoints di program diabaikan</em></strong>.</li><li>CLI <code>solana-test-validator</code> menjalankan dan memuat program Anda dan memproses eksekusi transaksi dari aplikasi Rust berbasis command line atau aplikasi Javascript/TypeScript menggunakan web3.</li><li>Untuk semua hal di atas, penggunaan makro <code>msg!</code> secara bebas dalam program Anda disarankan dilakukan dari awal dan kemudian menghapusnya seiring Anda menguji dan memastikan behaviour yang kokoh. Ingat bahwa <code>msg!</code> menggunakan Compute Unit yang akhirnya dapat menggagalkan program Anda dengan menyentuh budget cap dari Compute Unit.</li></ul></div><p>Langkah-langkah di bagian berikut menggunakan <a href="#resources">solana-program-bpf-template</a>. Clone itu ke mesin:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:mvines/solana-bpf-program-template.git
<span class="token builtin class-name">cd</span> solana-bpf-program-template
code <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="uji-runtime-dan-debugging-di-editor" tabindex="-1"><a class="header-anchor" href="#uji-runtime-dan-debugging-di-editor" aria-hidden="true">#</a> Uji Runtime dan Debugging di editor</h2><p>Buka file <code>src/lib.rs</code></p><p>Anda akan melihat bahwa programnya cukup sederhana dan pada dasarnya hanya mencatat konten yang diterima oleh function dari entrypoint program: <code>process_instruction</code></p><ol><li>Buka bagian <code>#[cfg(test)]</code> dan klik <code>Run Tests</code>. Ini akan melakukan build program dan kemudian jalankan tes <code>async fn test_transaction()</code>. Anda akan melihat pesan log (disederhanakan) di terminal vscode di bawah code.</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>running <span class="token number">1</span> <span class="token builtin class-name">test</span>
<span class="token string">&quot;bpf_program_template&quot;</span> program loaded as native code
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM invoke <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
Program log: process_instruction: 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM: <span class="token number">1</span> accounts, <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM success
<span class="token builtin class-name">test</span> test::test_transaction <span class="token punctuation">..</span>. ok
<span class="token builtin class-name">test</span> result: ok. <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">33</span>.41s
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="2"><li>Atur breakpoint di program pada baris <code>msg!</code> (11)</li><li>Kembali ke modul tes, klik <code>Debug</code> dan dalam beberapa detik debugger akan berhenti pada breakpoint dan sekarang Anda dapat memeriksa data, melangkah melalui fungsi, dll., dll.</li></ol><p>Tes ini juga dijalankan dari CLI dengan: <code>cargo test</code> atau <code>cargo tes-bpf</code>. Tentu saja setiap breakpoint akan diabaikan.</p><p>Tentunya asyik bukan!</p><div class="custom-container tip"><p class="custom-container-title">Catatan</p><p>Ingatlah bahwa Anda tidak menggunakan node validator sehingga program default, blockhash, dll. tidak diwakili atau tidak akan berperilaku seperti saat berjalan di node validator. Inilah mengapa geng di Solana memberi kita metode Uji Node Validator Lokal!</p></div><h2 id="uji-node-validator-lokal-di-editor" tabindex="-1"><a class="header-anchor" href="#uji-node-validator-lokal-di-editor" aria-hidden="true">#</a> Uji Node Validator Lokal di editor</h2><p>Uji integrasi menggunakan programmatic loading dari node validator lokal didefinisikan dalam file <code>tests/integration.rs</code>.</p><p>Secara default, uji integrasi repo template hanya akan dapat dijalankan dari baris perintah menggunakan <code>cargo test-bpf</code>. Langkah-langkah berikut akan memungkinkan Anda untuk berjalan di dalam editor juga seperti menampilkan log validator program dan keluaran <code>msg!</code> dari program Anda:</p><ol><li>Di direktori repo jalankan <code>cargo build-bpf</code> untuk membangun program sampel</li><li>Di editor, buka <code>tests/integration.rs</code></li><li>Komentari baris 1 -&gt; <code>// #![cfg(feature = &quot;test-bpf&quot;)]</code></li><li>Pada baris 19 ubah menjadi: <code>.add_program(&quot;target/deploy/bpf_program_template&quot;, program_id)</code></li><li>Masukkan yang berikut ini pada baris 22 <code>solana_logger::setup_with_default(&quot;solana_runtime::message=debug&quot;);</code></li><li>Klik <code>Run Test</code> di atas fungsi <code>test_validator_transaction()</code></li></ol><p>Ini akan memuat node validator yang kemudian memungkinkan Anda untuk membuat transaksi (dengan cara Rust) dan mengirim ke node menggunakan <code>RcpClient</code>.</p><p>Keluaran program juga akan dicetak di terminal editor. Misalnya (disederhanakan):</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>running <span class="token number">1</span> <span class="token builtin class-name">test</span>
Waiting <span class="token keyword">for</span> fees to stabilize <span class="token number">1</span><span class="token punctuation">..</span>.
Waiting <span class="token keyword">for</span> fees to stabilize <span class="token number">2</span><span class="token punctuation">..</span>.
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM invoke <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
Program log: process_instruction: 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM: <span class="token number">1</span> accounts, <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM consumed <span class="token number">13027</span> of <span class="token number">200000</span> compute <span class="token function">units</span>
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM success

<span class="token builtin class-name">test</span> test_validator_transaction <span class="token punctuation">..</span>. ok
<span class="token builtin class-name">test</span> result: ok. <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">6</span>.40s
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Debug di sini akan memungkinkan Anda untuk men-debug fungsi dan metode yang digunakan di <strong><em>test body</em></strong> tetapi tidak akan menyebabkan breakpoint dalam program Anda.</p><p>Seperti Lutut lebah, ya?</p><h2 id="uji-node-validator-lokal-dari-aplikasi-klien" tabindex="-1"><a class="header-anchor" href="#uji-node-validator-lokal-dari-aplikasi-klien" aria-hidden="true">#</a> Uji Node Validator Lokal dari Aplikasi Klien</h2><p>Terakhir, Anda dapat memulai node validasi lokal dan memuat program Anda dan akun apa pun menggunakan <code>solana-test-validator</code> dari CLI.</p><p>Dalam pendekatan ini, Anda akan memerlukan aplikasi klien baik menggunakan Rust <a href="#resources">RcpClient</a> atau di <a href="#resources">Klien JavaScript atau TypeScript</a></p><p>Lihat <code>solana-test-validator --help</code> untuk detail dan opsi lebih lanjut. Untuk contoh program di sini adalah pengaturan dasar:</p><ol><li>Buka terminal di folder repo</li><li>Jalankan <code>solana config set -ul</code> untuk mengatur konfigurasi agar mengarah ke lokal</li><li>Jalankan <code>solana-test-validator --bpf-program target/deploy/bpf_program_template-keypair.json target/deploy/bpf_program_template.so</code></li><li>Buka terminal lain dan jalankan <code>solana logs</code> untuk memulai streamer log</li><li>Anda kemudian dapat menjalankan program klien Anda dan mengamati keluaran program di terminal tempat Anda memulai log streamer</li></ol><p>Nah itu seperti piyama kucing YO!</p><h2 id="resources" tabindex="-1"><a class="header-anchor" href="#resources" aria-hidden="true">#</a> Resources</h2>`,31),c={href:"https://github.com/mvines/solana-bpf-program-template",target:"_blank",rel:"noopener noreferrer"},m=s("solana-program-bpf-template"),k={href:"https://docs.rs/solana-client/latest/solana_client/rpc_client/struct.RpcClient.html",target:"_blank",rel:"noopener noreferrer"},g=s("RcpClient"),b={href:"https://solana-labs.github.io/solana-web3.js/",target:"_blank",rel:"noopener noreferrer"},h=s("JavaScript/Typescript Library");function f(v,_){const n=i("ExternalLinkIcon");return o(),r(l,null,[u,a("p",null,[a("a",c,[m,e(n)])]),a("p",null,[a("a",k,[g,e(n)])]),a("p",null,[a("a",b,[h,e(n)])])],64)}var j=t(d,[["render",f]]);export{j as default};
