import{_ as e,r as o,o as c,c as l,a as s,b as p,F as u,d as n,e as t}from"./app.07ce7a66.js";const i={},r=s("h1",{id:"account-maps-hesap-haritalar\u0131",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#account-maps-hesap-haritalar\u0131","aria-hidden":"true"},"#"),n(" Account Maps (Hesap Haritalar\u0131)")],-1),k=s("p",null,[n("Maps, bir key\u2019i bir t\xFCr de\u011Ferle ili\u015Fkilendirmek i\xE7in programlamada s\u0131kl\u0131kla kulland\u0131\u011F\u0131m\u0131z veri yap\u0131lar\u0131d\u0131r. "),s("strong",null,"Key"),n(" ve "),s("strong",null,"de\u011Fer"),n(" herhangi bir t\xFCrde olabilir ve key, kaydedilmekte olan belirli bir de\u011Fer i\xE7in tan\u0131mlay\u0131c\u0131 g\xF6revi g\xF6r\xFCr. Daha sonra, key\u2019i verildi\u011Finde, bu de\u011Ferleri verimli bir \u015Fekilde eklememize, almam\u0131za ve g\xFCncellememize izin verir.")],-1),b=n("Solana'n\u0131n Hesap modeli, bildi\u011Fimiz gibi, program verilerinin ve ilgili durum verilerinin farkl\u0131 account'larda depolanmas\u0131n\u0131 gerektirir. Bu account'lar\u0131n kendileriyle ili\u015Fkili bir adresi vard\u0131r. Bu, kendi i\xE7inde bir map g\xF6revi g\xF6r\xFCr! Solana'n\u0131n Hesap modu hakk\u0131nda daha fazla bilgiyi "),m={href:"https://solanacookbook.com/core-concepts/accounts.html",target:"_blank",rel:"noopener noreferrer"},d=n("buradan"),g=n(" edinebilirsiniz."),y=t('<p>Bu nedenle, de\u011Feri almak i\xE7in gereken key adresiyle de\u011Ferlerinizi ayr\u0131 account&#39;larda saklamak mant\u0131kl\u0131 olacakt\u0131r. Ancak bu, a\u015Fa\u011F\u0131daki gibi birka\xE7 sorunu beraberinde getirir:</p><ul><li><p>Yukar\u0131da bahsedilen adresler, b\xFCy\xFCk olas\u0131l\u0131kla, hat\u0131rlayabilece\u011Finiz ve gerekli de\u011Feri alabilece\u011Finiz ideal <strong>key</strong>\u2019ler olmayacakt\u0131r.</p></li><li><p>Yukar\u0131da bahsedilen adresler, her bir public key\u2019in (veya adresin) kendisiyle ili\u015Fkilendirilmi\u015F bir <strong>private key</strong>\u2019e sahip olaca\u011F\u0131 farkl\u0131 <strong>Keypair</strong>\u2019lerin public key\u2019lerine at\u0131fta bulunur. Bu private key, gerekti\u011Finde ve gerekti\u011Finde farkl\u0131 talimatlar\u0131 imzalamak i\xE7in gerekli olacakt\u0131r, bu da private key\u2019i bir yerde saklamam\u0131z\u0131 gerektirir, ki bu kesinlikle \xF6nerilmez!</p></li></ul><p>Bu, bir\xE7ok Solana geli\u015Ftiricisinin kar\u015F\u0131la\u015Ft\u0131\u011F\u0131 ve programlar\u0131na <code>Map</code> benzeri bir logic uygulayan bir sorun sunuyor. Bu sorunla nas\u0131l ba\u015Fa \xE7\u0131kaca\u011F\u0131m\u0131za birka\xE7 yoldan bakal\u0131m:</p><h2 id="deriving-pdas" tabindex="-1"><a class="header-anchor" href="#deriving-pdas" aria-hidden="true">#</a> Deriving PDAs</h2>',4),f=n("PDA, "),_={href:"https://solanacookbook.com/references/accounts.html#program-derived-address",target:"_blank",rel:"noopener noreferrer"},h=n("Program Derived Address"),w=n(" (Programdan T\xFCretilmi\u015F Adres) anlam\u0131na gelir ve k\u0131saca, bir dizi seed ve bir program kimli\u011Finden (veya adresinden) t\xFCretilen adreslerdir."),A=n("PDA'larla ilgili benzersiz olan \u015Fey, bu adreslerin herhangi bir private key ile ili\u015Fkili olmamas\u0131d\u0131r. Bunun nedeni, bu adreslerin ED25519 e\u011Frisi \xFCzerinde yer almamas\u0131d\u0131r. Bu nedenle, yaln\u0131zca bu adresin t\xFCretildi\u011Fi program, seedler de sa\u011Flanm\u0131\u015Fsa, key\u2019le bir talimat imzalayabilir. Bu konuda "),v={href:"https://solanacookbook.com/references/programs.html#create-a-program-derived-address",target:"_blank",rel:"noopener noreferrer"},z=n("buradan"),B=n(" daha fazla bilgi edinebilirsiniz."),q=t(`<p>Art\u0131k PDA&#39;lar\u0131n ne oldu\u011Fu hakk\u0131nda bir fikrimiz oldu\u011Funa g\xF6re, onlar\u0131 baz\u0131 account&#39;lar\u0131 e\u015Fle\u015Ftirmek i\xE7in kullanal\u0131m! Bunun nas\u0131l uygulanaca\u011F\u0131n\u0131 g\xF6stermek i\xE7in bir <strong>Blog</strong> program\u0131 \xF6rne\u011Fi alaca\u011F\u0131z.</p><p>Bu Blog program\u0131nda, her <code>Kullan\u0131c\u0131</code>n\u0131n(User) tek bir <code>Blog</code>&#39;u olmas\u0131n\u0131 istiyoruz. Bu blog herhangi bir say\u0131da <code>Post</code> i\xE7erebilir. Bu, her kullan\u0131c\u0131y\u0131 bir blogla e\u015Fle\u015Ftirdi\u011Fimiz (<strong>mapping</strong>) ve her yaz\u0131n\u0131n belirli bir blogla e\u015Fle\u015Ftirildi\u011Fi (<strong>mapped</strong>) anlam\u0131na gelir.</p><p>K\u0131sacas\u0131, bir kullan\u0131c\u0131 ile blogu aras\u0131nda <code>1:1</code> e\u015Fleme varken, blog ve g\xF6nderileri aras\u0131nda <code>1:N</code> e\u015Fleme vard\u0131r.</p><p><code>1:1</code> e\u015Fleme i\xE7in, bir blog adresinin yaln\u0131zca kullan\u0131c\u0131s\u0131ndan t\xFCretilmesini isteriz; bu, yetkisi (veya kullan\u0131c\u0131s\u0131) verildi\u011Finde bir blogu geri almam\u0131za izin verir. Bu nedenle, bir blogun seed\u2019leri, authority&#39;s key\u2019den(otorite anahtar\u0131ndan) ve muhtemelen bir t\xFCr tan\u0131mlay\u0131c\u0131s\u0131 olarak i\u015Flev g\xF6rmesi i\xE7in &quot;blog&quot; \xF6n ekinden olu\u015Facakt\u0131r. <code>1:N</code> e\u015Fleme i\xE7in, her bir g\xF6nderinin adresinin yaln\u0131zca ili\u015Fkili oldu\u011Fu blogdan de\u011Fil, ayn\u0131 zamanda blogdaki N say\u0131da g\xF6nderi aras\u0131nda ayr\u0131m yapmam\u0131za izin veren ba\u015Fka bir tan\u0131mlay\u0131c\u0131dan t\xFCretilmesini isteriz. A\u015Fa\u011F\u0131daki \xF6rnekte, her g\xF6nderinin adresi, <strong>blog anahtar\u0131ndan</strong>, her g\xF6nderiyi tan\u0131mlamak i\xE7in bir <strong>bilgi i\u015Faretinden</strong> ve bir t\xFCr tan\u0131mlay\u0131c\u0131s\u0131 olarak i\u015Flev g\xF6rmek i\xE7in &quot;<strong>Post</strong>&quot; \xF6n ekinden t\xFCretilmi\u015Ftir.</p><p>Kod a\u015Fa\u011F\u0131da g\xF6sterildi\u011Fi gibidir:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[derive(Accounts)]</span>
<span class="token attribute attr-name">#[instruction(blog_account_bump: u8)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">InitializeBlog</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>
        init<span class="token punctuation">,</span>
        seeds <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token string">b&quot;blog&quot;</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            authority<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        bump <span class="token operator">=</span> blog_account_bump<span class="token punctuation">,</span>
        payer <span class="token operator">=</span> authority<span class="token punctuation">,</span>
        space <span class="token operator">=</span> <span class="token class-name">Blog</span><span class="token punctuation">::</span><span class="token constant">LEN</span>
    <span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">pub</span> blog_account<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token punctuation">,</span> <span class="token class-name">Blog</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>

    <span class="token attribute attr-name">#[account(mut)]</span>
    <span class="token keyword">pub</span> authority<span class="token punctuation">:</span> <span class="token class-name">Signer</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>

    <span class="token keyword">pub</span> system_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>

<span class="token attribute attr-name">#[derive(Accounts)]</span>
<span class="token attribute attr-name">#[instruction(post_account_bump: u8, post: Post)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">CreatePost</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token attribute attr-name">#[account(mut, has_one = authority)]</span>
    <span class="token keyword">pub</span> blog_account<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token punctuation">,</span> <span class="token class-name">Blog</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>

    #<span class="token punctuation">[</span><span class="token function">account</span><span class="token punctuation">(</span>
        init<span class="token punctuation">,</span>
        seeds <span class="token operator">=</span> <span class="token punctuation">[</span>
            <span class="token string">b&quot;post&quot;</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            blog_account<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            post<span class="token punctuation">.</span>slug<span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        bump <span class="token operator">=</span> post_account_bump<span class="token punctuation">,</span>
        payer <span class="token operator">=</span> authority<span class="token punctuation">,</span>
        space <span class="token operator">=</span> <span class="token class-name">Post</span><span class="token punctuation">::</span><span class="token constant">LEN</span>
    <span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">pub</span> post_account<span class="token punctuation">:</span> <span class="token class-name">Account</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token punctuation">,</span> <span class="token class-name">Post</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>

    <span class="token attribute attr-name">#[account(mut)]</span>
    <span class="token keyword">pub</span> authority<span class="token punctuation">:</span> <span class="token class-name">Signer</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    
    <span class="token keyword">pub</span> system_program<span class="token punctuation">:</span> <span class="token class-name">Program</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;info</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div><p>Client taraf\u0131nda, gerekli <code>Blog</code> ve <code>Post</code> account&#39;\u0131 adresini almak i\xE7in <code>PublicKey.findProgramAddress()</code>&#39;i kullanabilirsiniz; bu adresi account verilerini almak i\xE7in <code>connection.getAccountInfo()</code>&#39;ya aktarabilirsiniz. A\u015Fa\u011F\u0131da bir \xF6rnek g\xF6sterilmi\u015Ftir:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connection</span><span class="token punctuation">(</span><span class="token string">&quot;http://localhost:8899&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;confirmed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>blogAccount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> PublicKey<span class="token punctuation">.</span><span class="token function">findProgramAddress</span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;blog&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>publicKey<span class="token punctuation">.</span><span class="token function">toBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token constant">MY_PROGRAM_ID</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>postAccount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> PublicKey<span class="token punctuation">.</span><span class="token function">findProgramAddress</span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;slug-1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>publicKey<span class="token punctuation">.</span><span class="token function">toBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token constant">MY_PROGRAM_ID</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> blogAccountInfo <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">getAccountInfo</span><span class="token punctuation">(</span>blogAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> blogAccountState <span class="token operator">=</span> <span class="token constant">BLOG_ACCOUNT_DATA_LAYOUT</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>
    blogAccountInfo<span class="token punctuation">.</span>data
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Blog account state: &quot;</span><span class="token punctuation">,</span> blogAccountState<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> postAccountInfo <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">getAccountInfo</span><span class="token punctuation">(</span>postAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> postAccountState <span class="token operator">=</span> <span class="token constant">POST_ACCOUNT_DATA_LAYOUT</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>
    postAccountInfo<span class="token punctuation">.</span>data
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Post account state: &quot;</span><span class="token punctuation">,</span> postAccountState<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="single-map-account" tabindex="-1"><a class="header-anchor" href="#single-map-account" aria-hidden="true">#</a> Single Map Account</h2><p>Mapping uygulaman\u0131n ba\u015Fka bir yolu, tek bir account&#39;ta a\xE7\u0131k olarak saklanan bir <code>BTreeMap</code> veri yap\u0131s\u0131na sahip olmakt\u0131r. Bu account&#39;\u0131n adresi bir PDA veya olu\u015Fturulan bir Keypair\u2019in public key\u2019i olabilir.</p><p>Bu y\xF6ntem a\u015Fa\u011F\u0131daki nedenlerden dolay\u0131 ideal de\u011Fildir:</p><ul><li><p>Gerekli key/value pairs \xE7iftlerini buna eklemeden \xF6nce, \xF6nce <code>BTreeMap</code>&#39;i depolayan account&#39;\u0131 ba\u015Flatman\u0131z gerekecektir. Ard\u0131ndan, her seferinde g\xFCncellemek i\xE7in bu account&#39;\u0131n adresini de bir yere kaydetmeniz gerekir.</p></li><li><p>Bir account&#39;\u0131n, bir account&#39;\u0131n maksimum 10 megabayt boyutuna sahip olabilece\u011Fi ve BTreeMap&#39;in \xE7ok say\u0131da key/value pairs depolamas\u0131n\u0131 k\u0131s\u0131tlayan bellek s\u0131n\u0131rlamalar\u0131 vard\u0131r.</p></li></ul><p>Bu nedenle, kullan\u0131m durumunuzu d\xFC\u015F\xFCnd\xFCkten sonra, bu y\xF6ntemi a\u015Fa\u011F\u0131da g\xF6sterildi\u011Fi gibi uygulayabilirsiniz:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">fn</span> <span class="token function-definition function">process_init_map</span><span class="token punctuation">(</span>accounts<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">AccountInfo</span><span class="token punctuation">]</span><span class="token punctuation">,</span> program_id<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Pubkey</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">ProgramResult</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> account_info_iter <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> accounts<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> authority_account <span class="token operator">=</span> <span class="token function">next_account_info</span><span class="token punctuation">(</span>account_info_iter<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> map_account <span class="token operator">=</span> <span class="token function">next_account_info</span><span class="token punctuation">(</span>account_info_iter<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> system_program <span class="token operator">=</span> <span class="token function">next_account_info</span><span class="token punctuation">(</span>account_info_iter<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token operator">!</span>authority_account<span class="token punctuation">.</span>is_signer <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ProgramError</span><span class="token punctuation">::</span><span class="token class-name">MissingRequiredSignature</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> <span class="token punctuation">(</span>map_pda<span class="token punctuation">,</span> map_bump<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token class-name">Pubkey</span><span class="token punctuation">::</span><span class="token function">find_program_address</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token string">b&quot;map&quot;</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        program_id
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> map_pda <span class="token operator">!=</span> <span class="token operator">*</span>map_account<span class="token punctuation">.</span>key <span class="token operator">||</span> <span class="token operator">!</span>map_account<span class="token punctuation">.</span>is_writable <span class="token operator">||</span> <span class="token operator">!</span>map_account<span class="token punctuation">.</span><span class="token function">data_is_empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">BlogError</span><span class="token punctuation">::</span><span class="token class-name">InvalidMapAccount</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> rent <span class="token operator">=</span> <span class="token class-name">Rent</span><span class="token punctuation">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> rent_lamports <span class="token operator">=</span> rent<span class="token punctuation">.</span><span class="token function">minimum_balance</span><span class="token punctuation">(</span><span class="token class-name">MapAccount</span><span class="token punctuation">::</span><span class="token constant">LEN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> create_map_ix <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token namespace">system_instruction<span class="token punctuation">::</span></span><span class="token function">create_account</span><span class="token punctuation">(</span>
        authority_account<span class="token punctuation">.</span>key<span class="token punctuation">,</span> 
        map_account<span class="token punctuation">.</span>key<span class="token punctuation">,</span> 
        rent_lamports<span class="token punctuation">,</span> 
        <span class="token class-name">MapAccount</span><span class="token punctuation">::</span><span class="token constant">LEN</span><span class="token punctuation">.</span><span class="token function">try_into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> 
        program_id
    <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token macro property">msg!</span><span class="token punctuation">(</span><span class="token string">&quot;Creating MapAccount account&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">invoke_signed</span><span class="token punctuation">(</span>
        create_map_ix<span class="token punctuation">,</span> 
        <span class="token operator">&amp;</span><span class="token punctuation">[</span>
            authority_account<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            map_account<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            system_program<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span>
            <span class="token string">b&quot;map&quot;</span><span class="token punctuation">.</span><span class="token function">as_ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token operator">&amp;</span><span class="token punctuation">[</span>map_bump<span class="token punctuation">]</span>
        <span class="token punctuation">]</span><span class="token punctuation">]</span>
    <span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token macro property">msg!</span><span class="token punctuation">(</span><span class="token string">&quot;Deserializing MapAccount account&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> map_state <span class="token operator">=</span> <span class="token function">try_from_slice_unchecked</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">MapAccount</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>map_account<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> empty_map<span class="token punctuation">:</span> <span class="token class-name">BTreeMap</span><span class="token operator">&lt;</span><span class="token class-name">Pubkey</span><span class="token punctuation">,</span> <span class="token class-name">Pubkey</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token class-name">BTreeMap</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    map_state<span class="token punctuation">.</span>is_initialized <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    map_state<span class="token punctuation">.</span>map <span class="token operator">=</span> empty_map<span class="token punctuation">;</span>

    <span class="token macro property">msg!</span><span class="token punctuation">(</span><span class="token string">&quot;Serializing MapAccount account&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map_state<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> map_account<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fn</span> <span class="token function-definition function">process_insert_entry</span><span class="token punctuation">(</span>accounts<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">AccountInfo</span><span class="token punctuation">]</span><span class="token punctuation">,</span> program_id<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Pubkey</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">ProgramResult</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">let</span> account_info_iter <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> accounts<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> a_account <span class="token operator">=</span> <span class="token function">next_account_info</span><span class="token punctuation">(</span>account_info_iter<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> b_account <span class="token operator">=</span> <span class="token function">next_account_info</span><span class="token punctuation">(</span>account_info_iter<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> map_account <span class="token operator">=</span> <span class="token function">next_account_info</span><span class="token punctuation">(</span>account_info_iter<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token operator">!</span>a_account<span class="token punctuation">.</span>is_signer <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ProgramError</span><span class="token punctuation">::</span><span class="token class-name">MissingRequiredSignature</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> map_account<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">*</span>map_account<span class="token punctuation">.</span>owner <span class="token operator">!=</span> <span class="token operator">*</span>program_id <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">BlogError</span><span class="token punctuation">::</span><span class="token class-name">InvalidMapAccount</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token macro property">msg!</span><span class="token punctuation">(</span><span class="token string">&quot;Deserializing MapAccount account&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> map_state <span class="token operator">=</span> <span class="token function">try_from_slice_unchecked</span><span class="token punctuation">::</span><span class="token operator">&lt;</span><span class="token class-name">MapAccount</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>map_account<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> map_state<span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">contains_key</span><span class="token punctuation">(</span>a_account<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">BlogError</span><span class="token punctuation">::</span><span class="token class-name">AccountAlreadyHasEntry</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    map_state<span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">*</span>a_account<span class="token punctuation">.</span>key<span class="token punctuation">,</span> <span class="token operator">*</span>b_account<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token macro property">msg!</span><span class="token punctuation">(</span><span class="token string">&quot;Serializing MapAccount account&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map_state<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> map_account<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br></div></div><p>Yukar\u0131daki program\u0131 test etmek i\xE7in Client taraf\u0131 kodu a\u015Fa\u011F\u0131da g\xF6sterildi\u011Fi gibi g\xF6r\xFCnecektir:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> insertABIx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionInstruction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  programId<span class="token operator">:</span> <span class="token constant">MY_PROGRAM_ID</span><span class="token punctuation">,</span>
  keys<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      pubkey<span class="token operator">:</span> userA<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>
      isSigner<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      isWritable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      pubkey<span class="token operator">:</span> userB<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>
      isSigner<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      isWritable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      pubkey<span class="token operator">:</span> mapKey<span class="token punctuation">,</span>
      isSigner<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      isWritable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>Uint8Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> insertBCIx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionInstruction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  programId<span class="token operator">:</span> <span class="token constant">MY_PROGRAM_ID</span><span class="token punctuation">,</span>
  keys<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      pubkey<span class="token operator">:</span> userB<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>
      isSigner<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      isWritable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      pubkey<span class="token operator">:</span> userC<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>
      isSigner<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      isWritable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      pubkey<span class="token operator">:</span> mapKey<span class="token punctuation">,</span>
      isSigner<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      isWritable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>Uint8Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> insertCAIx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionInstruction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  programId<span class="token operator">:</span> <span class="token constant">MY_PROGRAM_ID</span><span class="token punctuation">,</span>
  keys<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      pubkey<span class="token operator">:</span> userC<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>
      isSigner<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
      isWritable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      pubkey<span class="token operator">:</span> userA<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>
      isSigner<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      isWritable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">{</span>
      pubkey<span class="token operator">:</span> mapKey<span class="token punctuation">,</span>
      isSigner<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
      isWritable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  data<span class="token operator">:</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>Uint8Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> tx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
tx<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>initMapIx<span class="token punctuation">)</span><span class="token punctuation">;</span>
tx<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>insertABIx<span class="token punctuation">)</span><span class="token punctuation">;</span>
tx<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>insertBCIx<span class="token punctuation">)</span><span class="token punctuation">;</span>
tx<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>insertCAIx<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br></div></div>`,16);function P(M,x){const a=o("ExternalLinkIcon");return c(),l(u,null,[r,k,s("p",null,[b,s("a",m,[d,p(a)]),g]),y,s("p",null,[f,s("a",_,[h,p(a)]),w]),s("p",null,[A,s("a",v,[z,p(a)]),B]),q],64)}var S=e(i,[["render",P]]);export{S as default};
