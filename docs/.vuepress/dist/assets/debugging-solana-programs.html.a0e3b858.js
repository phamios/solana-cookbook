import{_ as t,r as o,o as i,c as p,a,b as s,F as l,e as r,d as e}from"./app.07ce7a66.js";const g={},c=r(`<h1 id="pagde-debug-ng-mga-programang-solana" tabindex="-1"><a class="header-anchor" href="#pagde-debug-ng-mga-programang-solana" aria-hidden="true">#</a> Pagde-debug ng Mga Programang Solana</h1><p>Mayroong ilang mga opsyon at pansuportang tool para sa pagsubok at pag-debug ng isang Solana program.</p><h2 id="mga-katotohanan" tabindex="-1"><a class="header-anchor" href="#mga-katotohanan" aria-hidden="true">#</a> Mga Katotohanan</h2><div class="custom-container tip"><p class="custom-container-title">Fact Sheet</p><ul><li>Ang crate <code>solana-program-test</code> ay nagbibigay-daan sa paggamit ng mga walang laman na buto <strong><em>local runtime</em></strong> kung saan maaari mong subukan at i-debug interactive ang iyong programa (hal. sa vscode).</li><li>Ang crate <code>solana-validator</code> ay nagbibigay-daan sa paggamit ng <code>solana-test-validator</code> na pagpapatupad para sa mas matatag pagsubok na nangyayari sa isang <strong><em>local validator node</em></strong>. Maaari kang tumakbo mula sa editor <strong><em>ngunit breakpoints sa hindi pinapansin ang programa</em></strong>.</li><li>Ang CLI tool na <code>solana-test-validator</code> ay nagpapatakbo at naglo-load ng iyong programa at nagpoproseso ng pagpapatupad ng transaksyon mula sa command line Rust application o Javascript/Typescript application gamit ang web3.</li><li>Para sa lahat ng nasa itaas, ang liberal na paggamit ng <code>msg!</code> na macro sa iyong programa ay inirerekomenda sa simula at pagkatapos inaalis ang mga ito habang sinusubok mo at tinitiyak ang solidong gawi. Tandaan na ang <code>msg!</code> ay gumagamit ng Compute Units na maaaring tuluyang mabigo ang iyong programa sa pamamagitan ng pagpindot sa mga limitasyon ng badyet ng Compute Unit.</li></ul></div><p>Ang mga hakbang sa mga sumusunod na seksyon ay gumagamit ng <a href="#resources">solana-program-bpf-template</a>. I-clone iyon sa iyo makina:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:mvines/solana-bpf-program-template.git
<span class="token builtin class-name">cd</span> solana-bpf-program-template
code <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="runtime-testing-at-debugging-sa-editor" tabindex="-1"><a class="header-anchor" href="#runtime-testing-at-debugging-sa-editor" aria-hidden="true">#</a> Runtime Testing at Debugging sa editor</h2><p>Buksan ang file na <code>src/lib.rs</code></p><p>Makikita mo na ang programa ay medyo simple at karaniwang nag-log lamang ng nilalaman na natanggap ni ang function ng entrypoint ng programa: <code>process_instruction</code></p><ol><li>Pumunta sa seksyong <code>#[cfg(test)]</code> at i-click ang <code>Run Tests</code>. Ito ang bubuo ng programa at pagkatapos isagawa ang <code>async fn test_transaction()</code> na pagsubok. Makikita mo ang mga log message (pinasimple) sa vscode terminal sa ibaba ang pinagmulan.</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>running <span class="token number">1</span> <span class="token builtin class-name">test</span>
<span class="token string">&quot;bpf_program_template&quot;</span> program loaded as native code
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM invoke <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
Program log: process_instruction: 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM: <span class="token number">1</span> accounts, <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM success
<span class="token builtin class-name">test</span> test::test_transaction <span class="token punctuation">..</span>. ok
<span class="token builtin class-name">test</span> result: ok. <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">33</span>.41s
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="2"><li>Magtakda ng breakpoint sa mga programang <code>msg!</code> na linya (11)</li><li>Bumalik sa test module, i-click ang <code>Debug</code> at sa loob ng ilang segundo ay titigil ang debugger sa breakpoint at ngayon ay maaari mong suriin ang data, hakbang sa pamamagitan ng mga function, atbp.</li></ol><p>Ang mga pagsubok na ito ay pinapatakbo din mula sa command line na may: <code>cargo test</code> o <code>cargo test-bpf</code>. Siyempre, ang anumang mga breakpoint ay hindi papansinin.</p><p>Gaano ka ka-groovy!</p><div class="custom-container tip"><p class="custom-container-title">Tandaan</p><p>Tandaan na hindi ka gumagamit ng validator node kaya ang mga default na programa, blockhashes, atbp. ay hindi kinakatawan o ay hindi kikilos tulad ng gagawin nila kapag tumatakbo sa validator node. Ito ang dahilan kung bakit kami binigyan ng gang sa Solana Pagsubok sa Lokal na Validator Node!</p></div><h2 id="lokal-na-validator-node-testing-sa-editor" tabindex="-1"><a class="header-anchor" href="#lokal-na-validator-node-testing-sa-editor" aria-hidden="true">#</a> Lokal na Validator Node Testing sa editor</h2><p>Ang integration testing gamit ang programmatic loading ng isang lokal na validator node ay tinukoy sa <code>tests/integration.rs</code> file.</p><p>Bilang default, ang mga pagsubok sa pagsasama ng template repo ay maipapatakbo lamang mula sa command line gamit ang <code>cargo test-bpf</code>. Ang mga sumusunod na hakbang ay magbibigay-daan sa iyo na tumakbo sa loob ng editor din bilang pagpapakita ng mga log ng validator ng program at mga output ng <code>msg!</code> mula sa iyong programa:</p><ol><li>Sa repo directory patakbuhin ang <code>cargo build-bpf</code> para buuin ang sample program</li><li>Sa editor, buksan ang <code>tests/integration.rs</code></li><li>Magkomento sa linya 1 -&gt; <code>// #![cfg(feature = &quot;test-bpf&quot;)]</code></li><li>Sa linya 19 baguhin ito upang mabasa: <code>.add_program(&quot;target/deploy/bpf_program_template&quot;, program_id)</code></li><li>Ipasok ang sumusunod sa linya 22 <code>solana_logger::setup_with_default(&quot;solana_runtime::message=debug&quot;);</code></li><li>I-click ang <code>Run Test</code> sa itaas ng <code>test_validator_transaction()</code> function</li></ol><p>Ilo-load nito ang validator node pagkatapos ay papayagan kang bumuo ng isang transaksyon (ang Rust na paraan) at isumite sa node gamit ang <code>RcpClient</code>.</p><p>Ang output ng programa ay magpi-print din sa terminal ng editor. Halimbawa (pinasimple):</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>running <span class="token number">1</span> <span class="token builtin class-name">test</span>
Waiting <span class="token keyword">for</span> fees to stabilize <span class="token number">1</span><span class="token punctuation">..</span>.
Waiting <span class="token keyword">for</span> fees to stabilize <span class="token number">2</span><span class="token punctuation">..</span>.
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM invoke <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
Program log: process_instruction: 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM: <span class="token number">1</span> accounts, <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM consumed <span class="token number">13027</span> of <span class="token number">200000</span> compute <span class="token function">units</span>
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM success

<span class="token builtin class-name">test</span> test_validator_transaction <span class="token punctuation">..</span>. ok
<span class="token builtin class-name">test</span> result: ok. <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">6</span>.40s
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Ang pag-debug dito ay magbibigay-daan sa iyong i-debug ang mga function at pamamaraan na ginamit sa <strong><em>test body</em></strong> ngunit gagawin hindi breakpoint sa iyong programa.</p><p><em>The bee&#39;s knees eh?</em></p><h2 id="lokal-na-validator-node-testing-mula-sa-client-apps" tabindex="-1"><a class="header-anchor" href="#lokal-na-validator-node-testing-mula-sa-client-apps" aria-hidden="true">#</a> Lokal na Validator Node Testing mula sa Client Apps</h2><p>Panghuli, maaari kang magsimula ng isang lokal na validating node at i-load ang iyong program at anumang mga account gamit ang <code>solana-test-validator</code> mula sa command line.</p><p>Sa diskarteng ito, kakailanganin mo ng client application gamit ang Rust <a href="#resources">RcpClient</a> o sa <a href="#resources">JavaScript o Typescript client</a></p><p>Tingnan ang <code>solana-test-validator --help</code> para sa higit pang mga detalye at opsyon. Para sa halimbawang programa narito ang pag-setup ng vanilla:</p><ol><li>Magbukas ng terminal sa repo folder</li><li>Patakbuhin ang <code>solana config set -ul</code> upang itakda ang configuration upang tumuro sa lokal</li><li>Patakbuhin ang <code>solana-test-validator --bpf-program target/deploy/bpf_program_template-keypair.json target/deploy/bpf_program_template.so</code></li><li>Magbukas ng isa pang terminal at patakbuhin ang <code>solana logs</code> upang simulan ang log streamer</li><li>Pagkatapos ay maaari mong patakbuhin ang iyong programa ng kliyente at obserbahan ang output ng programa sa terminal kung saan mo sinimulan ang log streamer</li></ol><p>Now that is the cat&#39;s pajamas YO!</p><h2 id="resources" tabindex="-1"><a class="header-anchor" href="#resources" aria-hidden="true">#</a> Resources</h2>`,31),u={href:"https://github.com/mvines/solana-bpf-program-template",target:"_blank",rel:"noopener noreferrer"},m=e("solana-program-bpf-template"),d={href:"https://docs.rs/solana-client/latest/solana_client/rpc_client/struct.RpcClient.html",target:"_blank",rel:"noopener noreferrer"},b=e("RcpClient"),k={href:"https://solana-labs.github.io/solana-web3.js/",target:"_blank",rel:"noopener noreferrer"},h=e("JavaScript/Typescript Library");function y(f,v){const n=o("ExternalLinkIcon");return i(),p(l,null,[c,a("p",null,[a("a",u,[m,s(n)])]),a("p",null,[a("a",d,[b,s(n)])]),a("p",null,[a("a",k,[h,s(n)])])],64)}var W=t(g,[["render",y]]);export{W as default};
