import{_ as n,e as a}from"./app.07ce7a66.js";const s={},t=a(`<h1 id="offline-transaction-cevrimd\u0131s\u0131-islem" tabindex="-1"><a class="header-anchor" href="#offline-transaction-cevrimd\u0131s\u0131-islem" aria-hidden="true">#</a> Offline Transaction (\xC7evrimd\u0131\u015F\u0131 i\u015Flem)</h1><h2 id="sign-transaction-islem-imzalama" tabindex="-1"><a class="header-anchor" href="#sign-transaction-islem-imzalama" aria-hidden="true">#</a> Sign Transaction (\u0130\u015Flem \u0130mzalama)</h2><p>\xC7evrimd\u0131\u015F\u0131 bir i\u015Flem olu\u015Fturmak i\xE7in i\u015Flemi imzalaman\u0131z gerekir ve ard\u0131ndan herkes bunu a\u011Fda yay\u0131nlayabilir.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// there are two ways you can recover the tx</span>
<span class="token comment">// 3.a Recover Tranasction (use populate then addSignauture)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">let</span> recoverTx <span class="token operator">=</span> Transaction<span class="token punctuation">.</span><span class="token function">populate</span><span class="token punctuation">(</span>Message<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>realDataNeedToSign<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  recoverTx<span class="token punctuation">.</span><span class="token function">addSignature</span><span class="token punctuation">(</span>feePayer<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>feePayerSignature<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  recoverTx<span class="token punctuation">.</span><span class="token function">addSignature</span><span class="token punctuation">(</span>alice<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>aliceSignature<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 4. Send transaction</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">txhash: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">sendRawTransaction</span><span class="token punctuation">(</span>recoverTx<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// or</span>

<span class="token comment">// 3.b. Recover Tranasction (use populate with signature)</span>
<span class="token punctuation">{</span>
  <span class="token keyword">let</span> recoverTx <span class="token operator">=</span> Transaction<span class="token punctuation">.</span><span class="token function">populate</span><span class="token punctuation">(</span>Message<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>realDataNeedToSign<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>
    bs58<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>feePayerSignature<span class="token punctuation">)</span><span class="token punctuation">,</span>
    bs58<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>aliceSignature<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 4. Send transaction</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">txhash: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">sendRawTransaction</span><span class="token punctuation">(</span>recoverTx<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="partial-sign-transaction-k\u0131smi-imzalama" tabindex="-1"><a class="header-anchor" href="#partial-sign-transaction-k\u0131smi-imzalama" aria-hidden="true">#</a> Partial Sign Transaction (K\u0131smi \u0130mzalama)</h2><p>Bir i\u015Flem birden fazla imza gerektirdi\u011Finde, k\u0131smen imzalayabilirsiniz. Di\u011Fer imzalayanlar daha sonra a\u011Fda imzalayabilir ve yay\u0131nlayabilir.</p><p>Bunun ne zaman yararl\u0131 oldu\u011Funa dair baz\u0131 \xF6rnekler:</p><ul><li>\xD6deme kar\u015F\u0131l\u0131\u011F\u0131nda bir SPL token\u2019\u0131 g\xF6nderimi</li><li>Bir i\u015Flemi daha sonra orijinalli\u011Fini do\u011Frulayabilmek i\xE7in imzalama</li><li>\u0130mzan\u0131z\u0131 gerektiren bir i\u015Flemde \xF6zel programlar\u0131 \xE7a\u011F\u0131rma</li></ul><p>Bu \xF6rnekte Bob, \xF6demesi kar\u015F\u0131l\u0131\u011F\u0131nda Alice&#39;e bir SPL token g\xF6nderir:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 1. Add an instruction to send the token from Bob to Alice</span>
transaction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
  <span class="token function">createTransferCheckedInstruction</span><span class="token punctuation">(</span>
    bobTokenAddress<span class="token punctuation">,</span> <span class="token comment">// source</span>
    tokenAddress<span class="token punctuation">,</span> <span class="token comment">// mint</span>
    aliceTokenAccount<span class="token punctuation">.</span>address<span class="token punctuation">,</span> <span class="token comment">// destination</span>
    bobKeypair<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span> <span class="token comment">// owner of source account</span>
    <span class="token number">1</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">**</span> tokenMint<span class="token punctuation">.</span>decimals<span class="token punctuation">,</span> <span class="token comment">// amount to transfer</span>
    tokenMint<span class="token punctuation">.</span>decimals <span class="token comment">// decimals of token</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2. Bob partially signs the transaction</span>
transaction<span class="token punctuation">.</span><span class="token function">partialSign</span><span class="token punctuation">(</span>bobKeypair<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3. Serialize the transaction without requiring all signatures</span>
<span class="token keyword">const</span> serializedTransaction <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  requireAllSignatures<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 4. Alice can deserialize the transaction</span>
<span class="token keyword">const</span> recoveredTransaction <span class="token operator">=</span> Transaction<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>
  Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>transactionBase64<span class="token punctuation">,</span> <span class="token string">&quot;base64&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="durable-nonce-uzun-sureli-nonce" tabindex="-1"><a class="header-anchor" href="#durable-nonce-uzun-sureli-nonce" aria-hidden="true">#</a> Durable Nonce(Uzun S\xFCreli Nonce)</h2><p><code>RecentBlockhash</code>, bir i\u015Flem i\xE7in \xF6nemli bir de\u011Ferdir. S\xFCresi dolmu\u015F bir blockhash (150 bloktan sonra) kullan\u0131rsan\u0131z i\u015Fleminiz reddedilecektir. Son kullanma tarihi ge\xE7meyecek bir blockhash elde etmek i\xE7in <code>durable nonce</code> kullanabilirsiniz. Bu mekanizmay\u0131 tetiklemek i\xE7in i\u015Fleminizin a\u015Fa\u011F\u0131dakileri sa\u011Flamas\u0131 gerekir.</p><ol><li><code>nonce account</code>&#39;\u0131nda saklanan bir <code>nonce</code>&#39;u yeni bir blockhash olarak kullanmas\u0131</li><li>ilk talimata <code>nonce avans</code> i\u015Flemini koymas\u0131</li></ol><h3 id="create-nonce-account-nonce-account-olusturma" tabindex="-1"><a class="header-anchor" href="#create-nonce-account-nonce-account-olusturma" aria-hidden="true">#</a> Create Nonce Account (Nonce Account Olu\u015Fturma)</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> tx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
  <span class="token comment">// create nonce account</span>
  SystemProgram<span class="token punctuation">.</span><span class="token function">createAccount</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    fromPubkey<span class="token operator">:</span> feePayer<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>
    newAccountPubkey<span class="token operator">:</span> nonceAccount<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>
    lamports<span class="token operator">:</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">getMinimumBalanceForRentExemption</span><span class="token punctuation">(</span>
      <span class="token constant">NONCE_ACCOUNT_LENGTH</span>
    <span class="token punctuation">)</span><span class="token punctuation">,</span>
    space<span class="token operator">:</span> <span class="token constant">NONCE_ACCOUNT_LENGTH</span><span class="token punctuation">,</span>
    programId<span class="token operator">:</span> SystemProgram<span class="token punctuation">.</span>programId<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// init nonce account</span>
  SystemProgram<span class="token punctuation">.</span><span class="token function">nonceInitialize</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    noncePubkey<span class="token operator">:</span> nonceAccount<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span> <span class="token comment">// nonce account pubkey</span>
    authorizedPubkey<span class="token operator">:</span> nonceAccountAuth<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span> <span class="token comment">// nonce account authority (for advance and close)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
  <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">txhash: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">sendTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">,</span> <span class="token punctuation">[</span>feePayer<span class="token punctuation">,</span> nonceAccount<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="get-nonce-account-nonce-account-getirme" tabindex="-1"><a class="header-anchor" href="#get-nonce-account-nonce-account-getirme" aria-hidden="true">#</a> Get Nonce Account (Nonce Account Getirme)</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> accountInfo <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">getAccountInfo</span><span class="token punctuation">(</span>nonceAccountPubkey<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> nonceAccount <span class="token operator">=</span> NonceAccount<span class="token punctuation">.</span><span class="token function">fromAccountData</span><span class="token punctuation">(</span>accountInfo<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="use-nonce-account-nonce-account-kullanma" tabindex="-1"><a class="header-anchor" href="#use-nonce-account-nonce-account-kullanma" aria-hidden="true">#</a> Use Nonce Account (Nonce Account Kullanma)</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">let</span> tx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>
  <span class="token comment">// nonce advance must be the first instruction</span>
  SystemProgram<span class="token punctuation">.</span><span class="token function">nonceAdvance</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    noncePubkey<span class="token operator">:</span> nonceAccountPubkey<span class="token punctuation">,</span>
    authorizedPubkey<span class="token operator">:</span> nonceAccountAuth<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// after that, you do what you really want to do, here we append a transfer instruction as an example.</span>
  SystemProgram<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    fromPubkey<span class="token operator">:</span> feePayer<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>
    toPubkey<span class="token operator">:</span> nonceAccountAuth<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>
    lamports<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// assign \`nonce\` as recentBlockhash</span>
tx<span class="token punctuation">.</span>recentBlockhash <span class="token operator">=</span> nonceAccount<span class="token punctuation">.</span>nonce<span class="token punctuation">;</span>
tx<span class="token punctuation">.</span>feePayer <span class="token operator">=</span> feePayer<span class="token punctuation">.</span>publicKey<span class="token punctuation">;</span>
tx<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>
  feePayer<span class="token punctuation">,</span>
  nonceAccountAuth
<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* fee payer + nonce account authority + ... */</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">txhash: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">sendRawTransaction</span><span class="token punctuation">(</span>tx<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div>`,19);function p(e,c){return t}var l=n(s,[["render",p]]);export{l as default};
