import{_ as r,r as e,o as i,c as k,b as a,w as t,a as n,F as m,e as d,d as s}from"./app.07ce7a66.js";var b="/assets/scfsd.cc67ec33.png";const f={},g=d(`<h1 id="feature-parity-testing" tabindex="-1"><a class="header-anchor" href="#feature-parity-testing" aria-hidden="true">#</a> Feature Parity Testing</h1><p>When testing your program, assurances that it will run the same in various clusters is essential to both quality and producing expected outcomes.</p><h2 id="facts" tabindex="-1"><a class="header-anchor" href="#facts" aria-hidden="true">#</a> Facts</h2><div class="custom-container tip"><p class="custom-container-title">Fact Sheet</p><ul><li>Features are capabilities that are introduced to Solana validators and require activation to be used.</li><li>Features may be activated in one cluster (e.g. testnet) but not so in another (e.g. mainnet-beta).</li><li>However; when running default <code>solana-test-validator</code> locally, all available features in your Solana version are automagically activated. The result is that when testing locally, the capabilities and results of your testing may not be the same when deploying and running in a different cluster!</li></ul></div><h2 id="scenario" tabindex="-1"><a class="header-anchor" href="#scenario" aria-hidden="true">#</a> Scenario</h2><p>Assume you have a Transaction that contained three (3) instructions and each instruction consumes approximately 100_000 Compute Units (CU). When running in a Solana 1.8.x version, you would observe your instruction CU consumption similar to:</p><table><thead><tr><th>Instruction</th><th>Starting CU</th><th>Execution</th><th>Remaining CU</th></tr></thead><tbody><tr><td>1</td><td>200_000</td><td>-100_000</td><td>100_000</td></tr><tr><td>2</td><td>200_000</td><td>-100_000</td><td>100_000</td></tr><tr><td>3</td><td>200_000</td><td>-100_000</td><td>100_000</td></tr></tbody></table><p>In Solana 1.9.2 a feature called &#39;transaction wide compute cap&#39; was introduced where a Transaction, by default, has a 200_000 CU budget and the encapsulated instructions <strong><em>draw down</em></strong> from that Transaction budget. Running the same transaction as noted above would have very different behavior:</p><table><thead><tr><th>Instruction</th><th>Starting CU</th><th>Execution</th><th>Remaining CU</th></tr></thead><tbody><tr><td>1</td><td>200_000</td><td>-100_000</td><td>100_000</td></tr><tr><td>2</td><td>100_000</td><td>-100_000</td><td>0</td></tr><tr><td>3</td><td>0</td><td>FAIL!!!</td><td>FAIL!!!</td></tr></tbody></table><p>Yikes! If you were unaware of this you&#39;d likely be frustrated as there was no change to your instruction behavior that would cause this. In devnet it worked fine, but locally it was failing?!?</p><p>There is the ability to increase the overall Transaction budget, to lets say 300_000 CU, and salvage your sanity but this demonstrates why testing with <strong><em>Feature Parity</em></strong> provides a proactive way to avoid any confusion.</p><h2 id="feature-status" tabindex="-1"><a class="header-anchor" href="#feature-status" aria-hidden="true">#</a> Feature Status</h2><p>It is fairly easy to check what features are enabled for a particular cluster with the <code>solana feature status</code> command.</p><div class="language-console ext-console line-numbers-mode"><pre class="language-console"><code>solana feature status -ud   // Displays by feature status for devnet
solana feature status -ut   // Displays for testnet
solana feature status -um   // Displays for mainnet-beta
solana feature status -ul   // Displays for local, requires running solana-test-validator
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Alternatively, you could use a tool like <a href="#resources">scfsd</a> to observe all feature state across clusters which would display, partial screen shown here, and does not require <code>solana-test-validator</code> to be running:</p><img src="`+b+`" alt="Feature Status Heatmap"><h2 id="parity-testing" tabindex="-1"><a class="header-anchor" href="#parity-testing" aria-hidden="true">#</a> Parity Testing</h2><p>As noted above, the <code>solana-test-validator</code> activates <strong>all</strong> features automagically. So to answer the question &quot;How can I test locally in an environment that has parity with devnet, testnet or even mainnet-beta?&quot;.</p><p>Solution: PRs were added to Solana 1.9.6 to allow deactivation of features:</p><div class="language-console ext-console line-numbers-mode"><pre class="language-console"><code>solana-test-validator --deactivate-feature &lt;FEATURE_PUBKEY&gt; ...
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="simple-demonstration" tabindex="-1"><a class="header-anchor" href="#simple-demonstration" aria-hidden="true">#</a> Simple Demonstration</h2><p>Suppose you have a simple program that logs the data it receives in it&#39;s entry-point. And you are testing a transaction that adds two (2) instructions for your program.</p><h3 id="all-features-activated" tabindex="-1"><a class="header-anchor" href="#all-features-activated" aria-hidden="true">#</a> All features activated</h3><ol><li>You start the test validator in one terminal:</li></ol><div class="language-console ext-console line-numbers-mode"><pre class="language-console"><code>solana config set -ul
solana-test-validator -l ./ledger --bpf-program ADDRESS target/deploy/PROGNAME.so --reset\`
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>In another terminal you start the log streamer:</li></ol><div class="language-console ext-console line-numbers-mode"><pre class="language-console"><code>solana logs
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>You then run your transaction. You would see something similar in the log terminal (edited for clarity):</li></ol><div class="language-console ext-console line-numbers-mode"><pre class="language-console"><code>Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc invoke [1]
Program log: process_instruction: PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc: 0 accounts, data=[0]
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc consumed 12843 of 200000 compute units
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc success
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc invoke [1]
Program log: process_instruction: PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc: 0 accounts, data=[1]
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc consumed 12843 of 187157 compute units
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc success[
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Because our feature &#39;transaction wide compute cap&#39; is automatically activated by default, we observe each instruction drawing down CU from the starting Transaction budget of 200_000 CU.</p><h3 id="selective-features-deactivated" tabindex="-1"><a class="header-anchor" href="#selective-features-deactivated" aria-hidden="true">#</a> Selective features deactivated</h3><ol><li>For this run, we want to run so that the CU budget behavior is in parity with what is running in devnet. Using the tool(s) described in <a href="#feature-status">Feature Status</a> we isolate the <code>transaction wide compute cap</code> public key and use the <code>--deactivate-feature</code> on the test validator startup</li></ol><div class="language-console ext-console line-numbers-mode"><pre class="language-console"><code>solana-test-validator -l ./ledger --deactivate-feature 5ekBxc8itEnPv4NzGJtr8BVVQLNMQuLMNQQj7pHoLNZ9 --bpf-program target/deploy/PROGNAME.so --reset\`
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li>We now see in our logs that our instructions now have their own 200_000 CU budget (edited for clarity) which is currently the state in all upstream clusters:</li></ol><div class="language-console ext-console line-numbers-mode"><pre class="language-console"><code>Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc invoke [1]
Program log: process_instruction: PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc: 0 accounts, data=[0]
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc consumed 12843 of 200000 compute units
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc success
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc invoke [1]
Program log: process_instruction: PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc: 0 accounts, data=[0]
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc consumed 12843 of 200000 compute units
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc success
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="full-parity-testing" tabindex="-1"><a class="header-anchor" href="#full-parity-testing" aria-hidden="true">#</a> Full Parity Testing</h2><p>You can be in full parity with a specific cluster by identifying each feature that is not yet activated and add a <code>--deactivate-feature &lt;FEATURE_PUBKEY&gt;</code> for each when invoking <code>solana-test-validator</code>:</p><div class="language-console ext-console line-numbers-mode"><pre class="language-console"><code>solana-test-validator --deactivate-feature PUBKEY_1 --deactivate-feature PUBKEY_2 ...
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Alternatively, <a href="#resources">scfsd</a> provides a command switch to output the complete deactivated feature set for a cluster to feed directly into the <code>solana-test-validator</code> startup:</p><div class="language-console ext-console line-numbers-mode"><pre class="language-console"><code>solana-test-validator -l ./.ledger $(scfsd -c devnet -k -t)
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>If you open another terminal, while the validator is running, and <code>solana feature status</code> you will see features deactivated that were found deactivated in devnet</p><h2 id="full-parity-testing-programmatically" tabindex="-1"><a class="header-anchor" href="#full-parity-testing-programmatically" aria-hidden="true">#</a> Full Parity Testing Programmatically</h2><p>For those who control running the test validator within their test code, modifying the test validator activated/deactivated features is possible using TestValidatorGenesis. With Solana 1.9.6 a function has been added to the validator builder to support this.</p><p>At the root of your program folder, create a new folder called <code>tests</code> and add a <code>parity_test.rs</code> file. Here is the boiler place functions (boiler-plate if you will) used by each test</p>`,44),h=n("div",{class:"language-rust ext-rs line-numbers-mode"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token attribute attr-name"},"#[cfg(test)]"),s(`
`),n("span",{class:"token keyword"},"mod"),s(),n("span",{class:"token module-declaration namespace"},"tests"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token punctuation"},"{"),s("error"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token namespace"},[s("path"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"PathBuf"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token keyword"},"str"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token class-name"},"FromStr"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// Use gadget-scfs to get interegate feature lists from clusters"),s(`
    `),n("span",{class:"token comment"},'// must have `gadgets-scfs = "0.2.0" in Cargo.toml [dev-dependencies] to use'),s(`
    `),n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("gadgets_scfs"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token punctuation"},"{"),n("span",{class:"token class-name"},"ScfsCriteria"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"ScfsMatrix"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"SCFS_DEVNET"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("solana_client"),n("span",{class:"token punctuation"},"::"),s("rpc_client"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"RpcClient"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("solana_program"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token punctuation"},"{"),n("span",{class:"token namespace"},[s("instruction"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"Instruction"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token namespace"},[s("message"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"Message"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token namespace"},[s("pubkey"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"Pubkey"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("solana_sdk"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// Added in Solana 1.9.2"),s(`
        `),n("span",{class:"token namespace"},[s("compute_budget"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"ComputeBudgetInstruction"),n("span",{class:"token punctuation"},","),s(`
        pubkey`),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token namespace"},[s("signature"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token punctuation"},"{"),n("span",{class:"token class-name"},"Keypair"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Signature"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token namespace"},[s("signer"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"Signer"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token namespace"},[s("transaction"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"Transaction"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// Extended in Solana 1.9.6"),s(`
    `),n("span",{class:"token keyword"},"use"),s(),n("span",{class:"token namespace"},[s("solana_test_validator"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token punctuation"},"{"),n("span",{class:"token class-name"},"TestValidator"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"TestValidatorGenesis"),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"/// Location/Name of ProgramTestGenesis ledger"),s(`
    `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token constant"},"LEDGER_PATH"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"str"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"./.ledger"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"/// Path to BPF program (*.so) change if needed"),s(`
    `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token constant"},"PROG_PATH"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"str"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"target/deploy/"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"/// Program name from program Cargo.toml"),s(`
    `),n("span",{class:"token comment"},"/// FILL IN WITH YOUR PROGRAM_NAME"),s(`
    `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token constant"},"PROG_NAME"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"str"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token string"},'"PROGRAM_NAME"'),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"/// Program public key"),s(`
    `),n("span",{class:"token comment"},"/// FILL IN WITH YOUR PROGRAM'S PUBLIC KEY str"),s(`
    `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token constant"},"PROG_KEY"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Pubkey"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token macro property"},"pubkey!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"PROGRAMS_PUBLIC_KEY_BASE58_STRING"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"/// 'transaction wide compute cap' public key"),s(`
    `),n("span",{class:"token keyword"},"const"),s(),n("span",{class:"token constant"},"TXWIDE_LIMITS"),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Pubkey"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token macro property"},"pubkey!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"5ekBxc8itEnPv4NzGJtr8BVVQLNMQuLMNQQj7pHoLNZ9"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"/// Setup the test validator passing features"),s(`
    `),n("span",{class:"token comment"},"/// you want to deactivate before running transactions"),s(`
    `),n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"setup_validator"),n("span",{class:"token punctuation"},"("),s(`
        invalidate_features`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"Pubkey"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"Result"),n("span",{class:"token operator"},"<"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"TestValidator"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Keypair"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Box"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"dyn"),s(),n("span",{class:"token namespace"},[s("error"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"Error"),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token comment"},"// Extend environment variable to include our program location"),s(`
        `),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::"),s("env"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"set_var"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"BPF_OUT_DIR"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"PROG_PATH"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// Instantiate the test validator"),s(`
        `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" test_validator "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"TestValidatorGenesis"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"default"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token comment"},"// Once instantiated, TestValidatorGenesis configuration functions follow"),s(`
        `),n("span",{class:"token comment"},"// a builder pattern enabling chaining of settings function calls"),s(`
        `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token punctuation"},"("),s("test_validator"),n("span",{class:"token punctuation"},","),s(" kp"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(` test_validator
            `),n("span",{class:"token comment"},"// Set the ledger path and name"),s(`
            `),n("span",{class:"token comment"},"// maps to `solana-test-validator --ledger <DIR>`"),s(`
            `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ledger_path"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"LEDGER_PATH"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token comment"},"// Load our program. Ignored if reusing ledger"),s(`
            `),n("span",{class:"token comment"},"// maps to `solana-test-validator --bpf-program <ADDRESS_OR_PATH BPF_PROGRAM.SO>`"),s(`
            `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add_program"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"PROG_NAME"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"PROG_KEY"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token comment"},"// Identify features to deactivate. Ignored if reusing ledger"),s(`
            `),n("span",{class:"token comment"},"// maps to `solana-test-validator --deactivate-feature <FEATURE_PUBKEY>`"),s(`
            `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"deactivate_features"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("invalidate_features"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token comment"},"// Start the test validator"),s(`
            `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"Ok"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("test_validator"),n("span",{class:"token punctuation"},","),s(" kp"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token comment"},"/// Convenience function to remove existing ledger before TestValidatorGenesis setup"),s(`
    `),n("span",{class:"token comment"},"/// maps to `solana-test-validator ... --reset`"),s(`
    `),n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"clean_ledger_setup_validator"),n("span",{class:"token punctuation"},"("),s(`
        invalidate_features`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"Pubkey"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"Result"),n("span",{class:"token operator"},"<"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"TestValidator"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Keypair"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Box"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"dyn"),s(),n("span",{class:"token namespace"},[s("error"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"Error"),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token class-name"},"PathBuf"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"from_str"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"LEDGER_PATH"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unwrap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"exists"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
            `),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::"),s("fs"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"remove_dir_all"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"LEDGER_PATH"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unwrap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token punctuation"},"}"),s(`
        `),n("span",{class:"token function"},"setup_validator"),n("span",{class:"token punctuation"},"("),s("invalidate_features"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`

    `),n("span",{class:"token comment"},"/// Submits a transaction with programs instruction"),s(`
    `),n("span",{class:"token comment"},"/// Boiler plate"),s(`
    `),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"submit_transaction"),n("span",{class:"token punctuation"},"("),s(`
        rpc_client`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"RpcClient"),n("span",{class:"token punctuation"},","),s(`
        wallet_signer`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"dyn"),s(),n("span",{class:"token class-name"},"Signer"),n("span",{class:"token punctuation"},","),s(`
        instructions`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"Instruction"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"Result"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"Signature"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Box"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"dyn"),s(),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::"),s("error"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"Error"),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" transaction "),n("span",{class:"token operator"},"="),s(`
            `),n("span",{class:"token class-name"},"Transaction"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new_unsigned"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Message"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("instructions"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Some"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("wallet_signer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pubkey"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" recent_blockhash "),n("span",{class:"token operator"},"="),s(` rpc_client
            `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get_latest_blockhash"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map_err"),n("span",{class:"token punctuation"},"("),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),s("err"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(),n("span",{class:"token macro property"},"format!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"error: unable to get recent blockhash: {}"'),n("span",{class:"token punctuation"},","),s(" err"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},";"),s(`
        transaction
            `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"try_sign"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),s("wallet_signer"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" recent_blockhash"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map_err"),n("span",{class:"token punctuation"},"("),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),s("err"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(),n("span",{class:"token macro property"},"format!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"error: failed to sign transaction: {}"'),n("span",{class:"token punctuation"},","),s(" err"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token keyword"},"let"),s(" signature "),n("span",{class:"token operator"},"="),s(` rpc_client
            `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"send_and_confirm_transaction"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("transaction"),n("span",{class:"token punctuation"},")"),s(`
            `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map_err"),n("span",{class:"token punctuation"},"("),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),s("err"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(),n("span",{class:"token macro property"},"format!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"error: send transaction: {}"'),n("span",{class:"token punctuation"},","),s(" err"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},";"),s(`
        `),n("span",{class:"token class-name"},"Ok"),n("span",{class:"token punctuation"},"("),s("signature"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token comment"},"// UNIT TEST FOLLOWS"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br"),n("span",{class:"line-number"},"15"),n("br"),n("span",{class:"line-number"},"16"),n("br"),n("span",{class:"line-number"},"17"),n("br"),n("span",{class:"line-number"},"18"),n("br"),n("span",{class:"line-number"},"19"),n("br"),n("span",{class:"line-number"},"20"),n("br"),n("span",{class:"line-number"},"21"),n("br"),n("span",{class:"line-number"},"22"),n("br"),n("span",{class:"line-number"},"23"),n("br"),n("span",{class:"line-number"},"24"),n("br"),n("span",{class:"line-number"},"25"),n("br"),n("span",{class:"line-number"},"26"),n("br"),n("span",{class:"line-number"},"27"),n("br"),n("span",{class:"line-number"},"28"),n("br"),n("span",{class:"line-number"},"29"),n("br"),n("span",{class:"line-number"},"30"),n("br"),n("span",{class:"line-number"},"31"),n("br"),n("span",{class:"line-number"},"32"),n("br"),n("span",{class:"line-number"},"33"),n("br"),n("span",{class:"line-number"},"34"),n("br"),n("span",{class:"line-number"},"35"),n("br"),n("span",{class:"line-number"},"36"),n("br"),n("span",{class:"line-number"},"37"),n("br"),n("span",{class:"line-number"},"38"),n("br"),n("span",{class:"line-number"},"39"),n("br"),n("span",{class:"line-number"},"40"),n("br"),n("span",{class:"line-number"},"41"),n("br"),n("span",{class:"line-number"},"42"),n("br"),n("span",{class:"line-number"},"43"),n("br"),n("span",{class:"line-number"},"44"),n("br"),n("span",{class:"line-number"},"45"),n("br"),n("span",{class:"line-number"},"46"),n("br"),n("span",{class:"line-number"},"47"),n("br"),n("span",{class:"line-number"},"48"),n("br"),n("span",{class:"line-number"},"49"),n("br"),n("span",{class:"line-number"},"50"),n("br"),n("span",{class:"line-number"},"51"),n("br"),n("span",{class:"line-number"},"52"),n("br"),n("span",{class:"line-number"},"53"),n("br"),n("span",{class:"line-number"},"54"),n("br"),n("span",{class:"line-number"},"55"),n("br"),n("span",{class:"line-number"},"56"),n("br"),n("span",{class:"line-number"},"57"),n("br"),n("span",{class:"line-number"},"58"),n("br"),n("span",{class:"line-number"},"59"),n("br"),n("span",{class:"line-number"},"60"),n("br"),n("span",{class:"line-number"},"61"),n("br"),n("span",{class:"line-number"},"62"),n("br"),n("span",{class:"line-number"},"63"),n("br"),n("span",{class:"line-number"},"64"),n("br"),n("span",{class:"line-number"},"65"),n("br"),n("span",{class:"line-number"},"66"),n("br"),n("span",{class:"line-number"},"67"),n("br"),n("span",{class:"line-number"},"68"),n("br"),n("span",{class:"line-number"},"69"),n("br"),n("span",{class:"line-number"},"70"),n("br"),n("span",{class:"line-number"},"71"),n("br"),n("span",{class:"line-number"},"72"),n("br"),n("span",{class:"line-number"},"73"),n("br"),n("span",{class:"line-number"},"74"),n("br"),n("span",{class:"line-number"},"75"),n("br"),n("span",{class:"line-number"},"76"),n("br"),n("span",{class:"line-number"},"77"),n("br"),n("span",{class:"line-number"},"78"),n("br"),n("span",{class:"line-number"},"79"),n("br"),n("span",{class:"line-number"},"80"),n("br"),n("span",{class:"line-number"},"81"),n("br"),n("span",{class:"line-number"},"82"),n("br"),n("span",{class:"line-number"},"83"),n("br"),n("span",{class:"line-number"},"84"),n("br"),n("span",{class:"line-number"},"85"),n("br"),n("span",{class:"line-number"},"86"),n("br"),n("span",{class:"line-number"},"87"),n("br"),n("span",{class:"line-number"},"88"),n("br"),n("span",{class:"line-number"},"89"),n("br"),n("span",{class:"line-number"},"90"),n("br"),n("span",{class:"line-number"},"91"),n("br"),n("span",{class:"line-number"},"92"),n("br")])],-1),_=n("div",{class:"language-rust ext-rs line-numbers-mode"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token comment"},"/// Setup the test validator passing features"),s(`
`),n("span",{class:"token comment"},"/// you want to deactivate before running transactions"),s(`
`),n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"setup_validator"),n("span",{class:"token punctuation"},"("),s(`
    invalidate_features`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"Pubkey"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"Result"),n("span",{class:"token operator"},"<"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"TestValidator"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Keypair"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Box"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"dyn"),s(),n("span",{class:"token namespace"},[s("error"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"Error"),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// Extend environment variable to include our program location"),s(`
    `),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::"),s("env"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"set_var"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"BPF_OUT_DIR"'),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"PROG_PATH"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// Instantiate the test validator"),s(`
    `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" test_validator "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"TestValidatorGenesis"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"default"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// Once instantiated, TestValidatorGenesis configuration functions follow"),s(`
    `),n("span",{class:"token comment"},"// a builder pattern enabling chaining of settings function calls"),s(`
    `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token punctuation"},"("),s("test_validator"),n("span",{class:"token punctuation"},","),s(" kp"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(` test_validator
        `),n("span",{class:"token comment"},"// Set the ledger path and name"),s(`
        `),n("span",{class:"token comment"},"// maps to `solana-test-validator --ledger <DIR>`"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"ledger_path"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"LEDGER_PATH"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token comment"},"// Load our program. Ignored if reusing ledger"),s(`
        `),n("span",{class:"token comment"},"// maps to `solana-test-validator --bpf-program <ADDRESS_OR_PATH BPF_PROGRAM.SO>`"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"add_program"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"PROG_NAME"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token constant"},"PROG_KEY"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token comment"},"// Identify features to deactivate. Ignored if reusing ledger"),s(`
        `),n("span",{class:"token comment"},"// maps to `solana-test-validator --deactivate-feature <FEATURE_PUBKEY>`"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"deactivate_features"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("invalidate_features"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token comment"},"// Start the test validator"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"start"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token class-name"},"Ok"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},"("),s("test_validator"),n("span",{class:"token punctuation"},","),s(" kp"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"/// Convenience function to remove existing ledger before TestValidatorGenesis setup"),s(`
`),n("span",{class:"token comment"},"/// maps to `solana-test-validator ... --reset`"),s(`
`),n("span",{class:"token keyword"},"pub"),s(),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"clean_ledger_setup_validator"),n("span",{class:"token punctuation"},"("),s(`
    invalidate_features`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"Pubkey"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"Result"),n("span",{class:"token operator"},"<"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"TestValidator"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Keypair"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Box"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"dyn"),s(),n("span",{class:"token namespace"},[s("error"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"Error"),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"if"),s(),n("span",{class:"token class-name"},"PathBuf"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"from_str"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"LEDGER_PATH"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unwrap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"exists"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
        `),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::"),s("fs"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"remove_dir_all"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"LEDGER_PATH"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unwrap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token punctuation"},"}"),s(`
    `),n("span",{class:"token function"},"setup_validator"),n("span",{class:"token punctuation"},"("),s("invalidate_features"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`

`),n("span",{class:"token comment"},"/// Submits a transaction with programs instruction"),s(`
`),n("span",{class:"token comment"},"/// Boiler plate"),s(`
`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"submit_transaction"),n("span",{class:"token punctuation"},"("),s(`
    rpc_client`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"RpcClient"),n("span",{class:"token punctuation"},","),s(`
    wallet_signer`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token keyword"},"dyn"),s(),n("span",{class:"token class-name"},"Signer"),n("span",{class:"token punctuation"},","),s(`
    instructions`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Vec"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"Instruction"),n("span",{class:"token operator"},">"),n("span",{class:"token punctuation"},","),s(`
`),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"->"),s(),n("span",{class:"token class-name"},"Result"),n("span",{class:"token operator"},"<"),n("span",{class:"token class-name"},"Signature"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Box"),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"dyn"),s(),n("span",{class:"token namespace"},[s("std"),n("span",{class:"token punctuation"},"::"),s("error"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token class-name"},"Error"),n("span",{class:"token operator"},">>"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" transaction "),n("span",{class:"token operator"},"="),s(`
        `),n("span",{class:"token class-name"},"Transaction"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new_unsigned"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Message"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("instructions"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token class-name"},"Some"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("wallet_signer"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"pubkey"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" recent_blockhash "),n("span",{class:"token operator"},"="),s(` rpc_client
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get_latest_blockhash"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map_err"),n("span",{class:"token punctuation"},"("),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),s("err"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(),n("span",{class:"token macro property"},"format!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"error: unable to get recent blockhash: {}"'),n("span",{class:"token punctuation"},","),s(" err"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},";"),s(`
    transaction
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"try_sign"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),s("wallet_signer"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" recent_blockhash"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map_err"),n("span",{class:"token punctuation"},"("),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),s("err"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(),n("span",{class:"token macro property"},"format!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"error: failed to sign transaction: {}"'),n("span",{class:"token punctuation"},","),s(" err"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" signature "),n("span",{class:"token operator"},"="),s(` rpc_client
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"send_and_confirm_transaction"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("transaction"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"map_err"),n("span",{class:"token punctuation"},"("),n("span",{class:"token closure-params"},[n("span",{class:"token closure-punctuation punctuation"},"|"),s("err"),n("span",{class:"token closure-punctuation punctuation"},"|")]),s(),n("span",{class:"token macro property"},"format!"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"error: send transaction: {}"'),n("span",{class:"token punctuation"},","),s(" err"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token operator"},"?"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token class-name"},"Ok"),n("span",{class:"token punctuation"},"("),s("signature"),n("span",{class:"token punctuation"},")"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br"),n("span",{class:"line-number"},"15"),n("br"),n("span",{class:"line-number"},"16"),n("br"),n("span",{class:"line-number"},"17"),n("br"),n("span",{class:"line-number"},"18"),n("br"),n("span",{class:"line-number"},"19"),n("br"),n("span",{class:"line-number"},"20"),n("br"),n("span",{class:"line-number"},"21"),n("br"),n("span",{class:"line-number"},"22"),n("br"),n("span",{class:"line-number"},"23"),n("br"),n("span",{class:"line-number"},"24"),n("br"),n("span",{class:"line-number"},"25"),n("br"),n("span",{class:"line-number"},"26"),n("br"),n("span",{class:"line-number"},"27"),n("br"),n("span",{class:"line-number"},"28"),n("br"),n("span",{class:"line-number"},"29"),n("br"),n("span",{class:"line-number"},"30"),n("br"),n("span",{class:"line-number"},"31"),n("br"),n("span",{class:"line-number"},"32"),n("br"),n("span",{class:"line-number"},"33"),n("br"),n("span",{class:"line-number"},"34"),n("br"),n("span",{class:"line-number"},"35"),n("br"),n("span",{class:"line-number"},"36"),n("br"),n("span",{class:"line-number"},"37"),n("br"),n("span",{class:"line-number"},"38"),n("br"),n("span",{class:"line-number"},"39"),n("br"),n("span",{class:"line-number"},"40"),n("br"),n("span",{class:"line-number"},"41"),n("br"),n("span",{class:"line-number"},"42"),n("br"),n("span",{class:"line-number"},"43"),n("br"),n("span",{class:"line-number"},"44"),n("br"),n("span",{class:"line-number"},"45"),n("br"),n("span",{class:"line-number"},"46"),n("br"),n("span",{class:"line-number"},"47"),n("br"),n("span",{class:"line-number"},"48"),n("br"),n("span",{class:"line-number"},"49"),n("br"),n("span",{class:"line-number"},"50"),n("br"),n("span",{class:"line-number"},"51"),n("br"),n("span",{class:"line-number"},"52"),n("br"),n("span",{class:"line-number"},"53"),n("br"),n("span",{class:"line-number"},"54"),n("br"),n("span",{class:"line-number"},"55"),n("br"),n("span",{class:"line-number"},"56"),n("br"),n("span",{class:"line-number"},"57"),n("br")])],-1),v=n("p",null,[s("We can now add test functions in the body of "),n("code",null,"mod test {...}"),s(" to demonstrate default validator setup (all features enabled) and then disabling the "),n("code",null,"transaction wide compute cap"),s(" as per previous examples running "),n("code",null,"solana-test-validator"),s(" from the command line.")],-1),y=n("div",{class:"language-rust ext-rs line-numbers-mode"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token attribute attr-name"},"#[test]"),s(`
`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"test_base_pass"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// Run with all features activated (default for TestValidatorGenesis)"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" inv_feat "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// Start validator with clean (new) ledger"),s(`
    `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token punctuation"},"("),s("test_validator"),n("span",{class:"token punctuation"},","),s(" main_payer"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"clean_ledger_setup_validator"),n("span",{class:"token punctuation"},"("),s("inv_feat"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unwrap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// Get the RpcClient"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" connection "),n("span",{class:"token operator"},"="),s(" test_validator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get_rpc_client"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// Capture our programs log statements"),s(`
    `),n("span",{class:"token namespace"},[s("solana_logger"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"setup_with_default"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"solana_runtime::message=debug"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// This example doesn't require sending any accounts to program"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" accounts "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// Build instruction array and submit transaction"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" txn "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"submit_transaction"),n("span",{class:"token punctuation"},"("),s(`
        `),n("span",{class:"token operator"},"&"),s("connection"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token operator"},"&"),s("main_payer"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token comment"},"// Add two (2) instructions to transaction to demonstrate"),s(`
        `),n("span",{class:"token comment"},"// that each instruction CU draws down from default Transaction CU (200_000)"),s(`
        `),n("span",{class:"token comment"},"// Replace with instructions that make sense for your program"),s(`
        `),n("span",{class:"token punctuation"},"["),s(`
            `),n("span",{class:"token class-name"},"Instruction"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new_with_borsh"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"PROG_KEY"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token number"},"0u8"),n("span",{class:"token punctuation"},","),s(" accounts"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"to_vec"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token class-name"},"Instruction"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new_with_borsh"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"PROG_KEY"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token number"},"1u8"),n("span",{class:"token punctuation"},","),s(" accounts"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"to_vec"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token punctuation"},"]"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"to_vec"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),s("txn"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"is_ok"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br"),n("span",{class:"line-number"},"15"),n("br"),n("span",{class:"line-number"},"16"),n("br"),n("span",{class:"line-number"},"17"),n("br"),n("span",{class:"line-number"},"18"),n("br"),n("span",{class:"line-number"},"19"),n("br"),n("span",{class:"line-number"},"20"),n("br"),n("span",{class:"line-number"},"21"),n("br"),n("span",{class:"line-number"},"22"),n("br"),n("span",{class:"line-number"},"23"),n("br"),n("span",{class:"line-number"},"24"),n("br"),n("span",{class:"line-number"},"25"),n("br"),n("span",{class:"line-number"},"26"),n("br"),n("span",{class:"line-number"},"27"),n("br"),n("span",{class:"line-number"},"28"),n("br")])],-1),w=n("div",{class:"language-rust ext-rs line-numbers-mode"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token attribute attr-name"},"#[test]"),s(`
`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"test_deactivate_tx_cu_pass"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// Run with all features activated except 'transaction wide compute cap'"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" inv_feat "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),n("span",{class:"token constant"},"TXWIDE_LIMITS"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// Start validator with clean (new) ledger"),s(`
    `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token punctuation"},"("),s("test_validator"),n("span",{class:"token punctuation"},","),s(" main_payer"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"clean_ledger_setup_validator"),n("span",{class:"token punctuation"},"("),s("inv_feat"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unwrap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// Get the RpcClient"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" connection "),n("span",{class:"token operator"},"="),s(" test_validator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get_rpc_client"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// Capture our programs log statements"),s(`
    `),n("span",{class:"token namespace"},[s("solana_logger"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"setup_with_default"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"solana_runtime::message=debug"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token comment"},"// This example doesn't require sending any accounts to program"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" accounts "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// Build instruction array and submit transaction"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" txn "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"submit_transaction"),n("span",{class:"token punctuation"},"("),s(`
        `),n("span",{class:"token operator"},"&"),s("connection"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token operator"},"&"),s("main_payer"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token punctuation"},"["),s(`
            `),n("span",{class:"token comment"},"// This instruction adds CU to transaction budget (1.9.2) but does nothing"),s(`
            `),n("span",{class:"token comment"},"// when we deactivate the 'transaction wide compute cap' feature"),s(`
            `),n("span",{class:"token class-name"},"ComputeBudgetInstruction"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"request_units"),n("span",{class:"token punctuation"},"("),n("span",{class:"token number"},"400_000u32"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token comment"},"// Add two (2) instructions to transaction"),s(`
            `),n("span",{class:"token comment"},"// Replace with instructions that make sense for your program"),s(`
            `),n("span",{class:"token comment"},"// You will see that each instruction has the 1.8.x 200_000 CU per budget"),s(`
            `),n("span",{class:"token class-name"},"Instruction"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new_with_borsh"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"PROG_KEY"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token number"},"0u8"),n("span",{class:"token punctuation"},","),s(" accounts"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"to_vec"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token class-name"},"Instruction"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new_with_borsh"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"PROG_KEY"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token number"},"1u8"),n("span",{class:"token punctuation"},","),s(" accounts"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"to_vec"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token punctuation"},"]"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"to_vec"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),s("txn"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"is_ok"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br"),n("span",{class:"line-number"},"15"),n("br"),n("span",{class:"line-number"},"16"),n("br"),n("span",{class:"line-number"},"17"),n("br"),n("span",{class:"line-number"},"18"),n("br"),n("span",{class:"line-number"},"19"),n("br"),n("span",{class:"line-number"},"20"),n("br"),n("span",{class:"line-number"},"21"),n("br"),n("span",{class:"line-number"},"22"),n("br"),n("span",{class:"line-number"},"23"),n("br"),n("span",{class:"line-number"},"24"),n("br"),n("span",{class:"line-number"},"25"),n("br"),n("span",{class:"line-number"},"26"),n("br"),n("span",{class:"line-number"},"27"),n("br"),n("span",{class:"line-number"},"28"),n("br"),n("span",{class:"line-number"},"29"),n("br"),n("span",{class:"line-number"},"30"),n("br"),n("span",{class:"line-number"},"31"),n("br")])],-1),P=n("p",null,[s("Alternatively, the "),n("a",{href:"#resources"},"scfs engine gadget"),s(" can produce a full vector of deactivated features for a cluster. The following demonstrates using that engine to get a list of all deactivated features for devnet.")],-1),x=n("div",{class:"language-rust ext-rs line-numbers-mode"},[n("pre",{class:"language-rust"},[n("code",null,[n("span",{class:"token attribute attr-name"},"#[test]"),s(`
`),n("span",{class:"token keyword"},"fn"),s(),n("span",{class:"token function-definition function"},"test_devnet_parity_pass"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
    `),n("span",{class:"token comment"},"// Use gadget-scfs to get all deactivated features from devnet"),s(`
    `),n("span",{class:"token comment"},'// must have `gadgets-scfs = "0.2.0" in Cargo.toml to use'),s(`
    `),n("span",{class:"token comment"},"// Here we setup for a run that samples features only"),s(`
    `),n("span",{class:"token comment"},"// from devnet"),s(`
    `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token keyword"},"mut"),s(" my_matrix "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token class-name"},"ScfsMatrix"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Some"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"ScfsCriteria"),s(),n("span",{class:"token punctuation"},"{"),s(`
        clusters`),n("span",{class:"token punctuation"},":"),s(),n("span",{class:"token class-name"},"Some"),n("span",{class:"token punctuation"},"("),n("span",{class:"token macro property"},"vec!"),n("span",{class:"token punctuation"},"["),n("span",{class:"token constant"},"SCFS_DEVNET"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"to_string"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token punctuation"},".."),n("span",{class:"token class-name"},"Default"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"default"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"}"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unwrap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// Run the sampler matrix"),s(`
    `),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),s("my_matrix"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"run"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"is_ok"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// Get all deactivated features"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" deactivated "),n("span",{class:"token operator"},"="),s(` my_matrix
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get_features"),n("span",{class:"token punctuation"},"("),n("span",{class:"token class-name"},"Some"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),n("span",{class:"token class-name"},"ScfsMatrix"),n("span",{class:"token punctuation"},"::"),s("any_inactive"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unwrap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// Confirm we have them"),s(`
    `),n("span",{class:"token macro property"},"assert_ne!"),n("span",{class:"token punctuation"},"("),s("deactivated"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"len"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token comment"},"// Setup test validator and logging while deactivating all"),s(`
    `),n("span",{class:"token comment"},"// features that are deactivated in devnet"),s(`
    `),n("span",{class:"token keyword"},"let"),s(),n("span",{class:"token punctuation"},"("),s("test_validator"),n("span",{class:"token punctuation"},","),s(" main_payer"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"clean_ledger_setup_validator"),n("span",{class:"token punctuation"},"("),s("deactivated"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"unwrap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" connection "),n("span",{class:"token operator"},"="),s(" test_validator"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"get_rpc_client"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token namespace"},[s("solana_logger"),n("span",{class:"token punctuation"},"::")]),n("span",{class:"token function"},"setup_with_default"),n("span",{class:"token punctuation"},"("),n("span",{class:"token string"},'"solana_runtime::message=debug"'),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

    `),n("span",{class:"token keyword"},"let"),s(" accounts "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token punctuation"},"["),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token keyword"},"let"),s(" txn "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token function"},"submit_transaction"),n("span",{class:"token punctuation"},"("),s(`
        `),n("span",{class:"token operator"},"&"),s("connection"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token operator"},"&"),s("main_payer"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token punctuation"},"["),s(`
            `),n("span",{class:"token comment"},"// Add two (2) instructions to transaction"),s(`
            `),n("span",{class:"token comment"},"// Replace with instructions that make sense for your program"),s(`
            `),n("span",{class:"token class-name"},"Instruction"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new_with_borsh"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"PROG_KEY"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token number"},"0u8"),n("span",{class:"token punctuation"},","),s(" accounts"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"to_vec"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
            `),n("span",{class:"token class-name"},"Instruction"),n("span",{class:"token punctuation"},"::"),n("span",{class:"token function"},"new_with_borsh"),n("span",{class:"token punctuation"},"("),n("span",{class:"token constant"},"PROG_KEY"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"&"),n("span",{class:"token number"},"1u8"),n("span",{class:"token punctuation"},","),s(" accounts"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"to_vec"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
        `),n("span",{class:"token punctuation"},"]"),s(`
        `),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"to_vec"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},","),s(`
    `),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
    `),n("span",{class:"token macro property"},"assert!"),n("span",{class:"token punctuation"},"("),s("txn"),n("span",{class:"token punctuation"},"."),n("span",{class:"token function"},"is_ok"),n("span",{class:"token punctuation"},"("),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("span",{class:"line-number"},"1"),n("br"),n("span",{class:"line-number"},"2"),n("br"),n("span",{class:"line-number"},"3"),n("br"),n("span",{class:"line-number"},"4"),n("br"),n("span",{class:"line-number"},"5"),n("br"),n("span",{class:"line-number"},"6"),n("br"),n("span",{class:"line-number"},"7"),n("br"),n("span",{class:"line-number"},"8"),n("br"),n("span",{class:"line-number"},"9"),n("br"),n("span",{class:"line-number"},"10"),n("br"),n("span",{class:"line-number"},"11"),n("br"),n("span",{class:"line-number"},"12"),n("br"),n("span",{class:"line-number"},"13"),n("br"),n("span",{class:"line-number"},"14"),n("br"),n("span",{class:"line-number"},"15"),n("br"),n("span",{class:"line-number"},"16"),n("br"),n("span",{class:"line-number"},"17"),n("br"),n("span",{class:"line-number"},"18"),n("br"),n("span",{class:"line-number"},"19"),n("br"),n("span",{class:"line-number"},"20"),n("br"),n("span",{class:"line-number"},"21"),n("br"),n("span",{class:"line-number"},"22"),n("br"),n("span",{class:"line-number"},"23"),n("br"),n("span",{class:"line-number"},"24"),n("br"),n("span",{class:"line-number"},"25"),n("br"),n("span",{class:"line-number"},"26"),n("br"),n("span",{class:"line-number"},"27"),n("br"),n("span",{class:"line-number"},"28"),n("br"),n("span",{class:"line-number"},"29"),n("br"),n("span",{class:"line-number"},"30"),n("br"),n("span",{class:"line-number"},"31"),n("br"),n("span",{class:"line-number"},"32"),n("br"),n("span",{class:"line-number"},"33"),n("br"),n("span",{class:"line-number"},"34"),n("br"),n("span",{class:"line-number"},"35"),n("br"),n("span",{class:"line-number"},"36"),n("br"),n("span",{class:"line-number"},"37"),n("br"),n("span",{class:"line-number"},"38"),n("br"),n("span",{class:"line-number"},"39"),n("br")])],-1),B=n("p",null,"Happy Testing!",-1),G=n("h2",{id:"resources",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#resources","aria-hidden":"true"},"#"),s(" Resources")],-1),R={href:"https://github.com/FrankC01/solana-gadgets/tree/main/rust/scfsd",target:"_blank",rel:"noopener noreferrer"},E=s("scfsd"),S={href:"https://github.com/FrankC01/solana-gadgets/tree/main/rust/gadgets-scfs",target:"_blank",rel:"noopener noreferrer"},T=s("gadget-scfs");function A(L,D){const l=e("SolanaCodeGroupItem"),u=e("SolanaCodeGroup"),o=e("CodeGroupItem"),c=e("CodeGroup"),p=e("ExternalLinkIcon");return i(),k(m,null,[g,a(u,null,{default:t(()=>[a(l,{title:"Test Boiler Plate",active:""},{default:t(()=>[h]),preview:t(()=>[_]),_:1})]),_:1}),v,a(c,null,{default:t(()=>[a(o,{title:"All Features Test"},{default:t(()=>[y]),_:1}),a(o,{title:"Disable Tx CU Test",active:""},{default:t(()=>[w]),_:1})]),_:1}),P,a(c,null,{default:t(()=>[a(o,{title:"Devnet Parity"},{default:t(()=>[x]),_:1})]),_:1}),B,G,n("p",null,[n("a",R,[E,a(p)])]),n("p",null,[n("a",S,[T,a(p)])])],64)}var U=r(f,[["render",A]]);export{U as default};
