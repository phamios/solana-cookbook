import{_ as t,r as o,o as r,c as l,a as e,b as a,F as i,e as p,d as n}from"./app.07ce7a66.js";const c={},u=p(`<h1 id="debogage-des-programmes-solana" tabindex="-1"><a class="header-anchor" href="#debogage-des-programmes-solana" aria-hidden="true">#</a> D\xE9bogage des Programmes Solana</h1><p>Il existe un certain nombre d&#39;options et d&#39;outils de support pour tester et d\xE9boguer un programme Solana.</p><h2 id="faits" tabindex="-1"><a class="header-anchor" href="#faits" aria-hidden="true">#</a> Faits</h2><div class="custom-container tip"><p class="custom-container-title">Fiche d&#39;Informations</p><ul><li>La crate <code>solana-program-test</code> permet l&#39;utilisation d&#39;\xE9l\xE9ments de base de <strong><em>local runtime</em></strong> o\xF9 vous pouvez tester et d\xE9boguer votre programme de mani\xE8re interactive (par exemple dans vscode).</li><li>La crate <code>solana-validator</code> permet d&#39;utiliser l&#39;impl\xE9mentation <code>solana-test-validator</code> pour des tests plus robustes qui se font sur un <strong><em>noeud validateur local</em></strong>. Vous pouvez ex\xE9cuter depuis l&#39;\xE9diteur <strong><em>mais les points d&#39;arr\xEAt dans le programme sont ignor\xE9s</em></strong>.</li><li>L&#39;outil CLI <code>solana-test-validator</code> ex\xE9cute et charge votre programme et traite l&#39;ex\xE9cution des transactions \xE0 partir d&#39;applications Rust en ligne de commande ou d&#39;applications Javascript/Typescript utilisant web3.</li><li>Pour tout ce qui pr\xE9c\xE8de, il est recommand\xE9 d&#39;utiliser la macro <code>msg!</code> dans votre programme au d\xE9but, puis de la supprimer au fur et \xE0 mesure que vous testez et vous assurez d&#39;un comportement s\xFBr. Rappelez-vous que <code>msg!</code> consomme des Unit\xE9s de Calcul qui peuvent \xE9ventuellement faire \xE9chouer votre programme en atteignant les plafonds du budget des Unit\xE9s de Calcul.</li></ul></div><p>Les \xE9tapes des sections suivantes utilisent <a href="#ressources">solana-program-bpf-template</a>. Clonez-le sur votre machine :</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:mvines/solana-bpf-program-template.git
<span class="token builtin class-name">cd</span> solana-bpf-program-template
code <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="tests-d-execution-et-debogage-dans-l-editeur" tabindex="-1"><a class="header-anchor" href="#tests-d-execution-et-debogage-dans-l-editeur" aria-hidden="true">#</a> Tests d&#39;Ex\xE9cution et D\xE9bogage dans l&#39;\xE9diteur</h2><p>Ouvrez le fichier <code>src/lib.rs</code></p><p>Vous constaterez que le programme est assez simple et se contente d&#39;enregistrer le contenu re\xE7u par la fonction d&#39;entr\xE9e du programme : <code>process_instruction</code></p><p>1.Allez dans la section <code>#[cfg(test)]</code> et cliquez sur <code>Run Tests</code>. Cela va compiler le programme et ensuite ex\xE9cuter le test <code>async fn test_transaction()</code>. Vous verrez les messages de log (simplifi\xE9s) dans le terminal vscode sous la source.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>running <span class="token number">1</span> <span class="token builtin class-name">test</span>
<span class="token string">&quot;bpf_program_template&quot;</span> program loaded as native code
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM invoke <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
Program log: process_instruction: 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM: <span class="token number">1</span> accounts, <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM success
<span class="token builtin class-name">test</span> test::test_transaction <span class="token punctuation">..</span>. ok
<span class="token builtin class-name">test</span> result: ok. <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">33</span>.41s
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="2"><li>Fixer un point d&#39;arr\xEAt sur la ligne <code>msg!</code> du programme (11)</li><li>De retour dans le module de test, cliquez sur <code>Debug</code> et en quelques secondes, le d\xE9bogueur s&#39;arr\xEAtera sur le point d&#39;arr\xEAt et vous pourrez maintenant examiner les donn\xE9es, parcourir les fonctions, etc.</li></ol><p>Ces tests peuvent \xE9galement \xEAtre ex\xE9cut\xE9s en ligne de commande avec : <code>cargo test</code> ou <code>cargo test-bpf</code>. Bien s\xFBr, les points d&#39;arr\xEAt seront ignor\xE9s.</p><p>On ne peut pas faire plus groovy !</p><div class="custom-container tip"><p class="custom-container-title">Remarque</p><p>Gardez \xE0 l&#39;esprit que vous n&#39;utilisez pas un n\u0153ud de validation et que les programmes par d\xE9faut, les hashs de blocs, etc. ne sont pas repr\xE9sent\xE9s ou ne se comporteront pas comme ils le feraient s&#39;ils \xE9taient ex\xE9cut\xE9s dans un n\u0153ud de validation. C&#39;est pourquoi il est possible d&#39;utiliser un N\u0153ud de Validation Local pour faire des tests.</p></div><h2 id="test-avec-un-n\u0153ud-de-validation-local-dans-l-editeur" tabindex="-1"><a class="header-anchor" href="#test-avec-un-n\u0153ud-de-validation-local-dans-l-editeur" aria-hidden="true">#</a> Test avec un N\u0153ud de Validation Local dans l&#39;\xE9diteur</h2><p>Les tests d&#39;int\xE9gration utilisant le chargement programm\xE9 d&#39;un n\u0153ud de validateur local sont d\xE9finis dans le fichier <code>tests/integration.rs</code>.</p><p>Par d\xE9faut, le template des tests d&#39;int\xE9gration du r\xE9pertoire ne seront ex\xE9cutables qu&#39;en ligne de commande en utilisant <code>cargo test-bpf</code>. Les \xE9tapes suivantes vous permettront d&#39;ex\xE9cuter dans l&#39;\xE9diteur, d&#39;afficher les logs du validateur de programme et les sorties <code>msg!</code> de votre programme :</p><ol><li>Dans le r\xE9pertoire du repo, ex\xE9cutez <code>cargo build-bpf</code> pour compiler le programme d&#39;exemple</li><li>Dans l&#39;\xE9diteur, ouvrez <code>tests/integration.rs</code></li><li>Commentez la ligne 1 -&gt; <code>// #![cfg(feature = &quot;test-bpf&quot;)]</code></li><li>A la ligne 19, modifiez comme suit : <code>.add_program(&quot;target/deploy/bpf_program_template&quot;, program_id)</code></li><li>Ins\xE9rez ce qui suit \xE0 la ligne 22 <code>solana_logger::setup_with_default(&quot;solana_runtime::message=debug&quot;);</code></li><li>Cliquez sur <code>Run Test</code> au-dessus de la fonction <code>test_validator_transaction()</code></li></ol><p>Ceci chargera le noeud de validation et vous permettra de construire une transaction (\xE0 la mani\xE8re de Rust) et de la soumettre au noeud en utilisant le <code>RcpClient</code>.</p><p>La sortie du programme appara\xEEtra \xE9galement dans le terminal de l&#39;\xE9diteur. Par exemple (simplifi\xE9) :</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>running <span class="token number">1</span> <span class="token builtin class-name">test</span>
Waiting <span class="token keyword">for</span> fees to stabilize <span class="token number">1</span><span class="token punctuation">..</span>.
Waiting <span class="token keyword">for</span> fees to stabilize <span class="token number">2</span><span class="token punctuation">..</span>.
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM invoke <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
Program log: process_instruction: 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM: <span class="token number">1</span> accounts, <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM consumed <span class="token number">13027</span> of <span class="token number">200000</span> compute <span class="token function">units</span>
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM success

<span class="token builtin class-name">test</span> test_validator_transaction <span class="token punctuation">..</span>. ok
<span class="token builtin class-name">test</span> result: ok. <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">6</span>.40s
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Le d\xE9bogage ici vous permettra de d\xE9boguer les fonctions et m\xE9thodes utilis\xE9es dans le <strong><em>test body</em></strong> mais ne fera pas de point d&#39;arr\xEAt dans votre programme.</p><h2 id="test-avec-un-n\u0153ud-de-validation-local-a-partir-des-applications-clients" tabindex="-1"><a class="header-anchor" href="#test-avec-un-n\u0153ud-de-validation-local-a-partir-des-applications-clients" aria-hidden="true">#</a> Test avec un N\u0153ud de Validation Local \xE0 partir des Applications Clients</h2><p>Enfin, vous pouvez d\xE9marrer un n\u0153ud de validation local et charger votre programme et tous les comptes en utilisant le <code>solana-test-validator</code> depuis la ligne de commande.</p><p>Dans cette approche, vous aurez besoin d&#39;une application client, soit en utilisant Rust <a href="#ressources">RcpClient</a> ou en utilisant les <a href="#ressources">clients JavaScript ou Typescript</a></p><p>Voir <code>solana-test-validator --help</code> pour plus de d\xE9tails et d&#39;options. Pour le programme d&#39;exemple, voici la configuration :</p><ol><li>Ouvrez un terminal dans le dossier repo</li><li>Ex\xE9cutez <code>solana config set -ul</code> pour d\xE9finir la configuration pour pointer vers le local</li><li>Ex\xE9cutez <code>solana-test-validator --bpf-program target/deploy/bpf_program_template-keypair.json target/deploy/bpf_program_template.so</code></li><li>Ouvrez un autre terminal et lancez <code>solana logs</code> pour d\xE9marrer le flux des logs</li><li>Vous pouvez alors ex\xE9cuter votre programme client et observer la sortie du programme dans le terminal o\xF9 vous avez d\xE9marr\xE9 le flux de logs</li></ol><h2 id="ressources" tabindex="-1"><a class="header-anchor" href="#ressources" aria-hidden="true">#</a> Ressources</h2>`,29),d={href:"https://github.com/mvines/solana-bpf-program-template",target:"_blank",rel:"noopener noreferrer"},m=n("solana-program-bpf-template"),g={href:"https://docs.rs/solana-client/latest/solana_client/rpc_client/struct.RpcClient.html",target:"_blank",rel:"noopener noreferrer"},b=n("RcpClient"),v={href:"https://solana-labs.github.io/solana-web3.js/",target:"_blank",rel:"noopener noreferrer"},h=n("Biblioth\xE8que JavaScript/Typescript");function f(k,_){const s=o("ExternalLinkIcon");return r(),l(i,null,[u,e("p",null,[e("a",d,[m,a(s)])]),e("p",null,[e("a",g,[b,a(s)])]),e("p",null,[e("a",v,[h,a(s)])])],64)}var z=t(c,[["render",f]]);export{z as default};
