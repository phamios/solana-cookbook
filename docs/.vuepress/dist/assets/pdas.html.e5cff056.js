import{_ as i,r as o,o as l,c as d,a as e,b as n,w as a,F as u,d as s,e as c}from"./app.07ce7a66.js";var p="/assets/account-matrix.c3a79f80.png",m="/assets/pda-curve.7c0b9307.png";const h={},_=e("h1",{id:"adresses-derivees-de-programmes-pdas",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#adresses-derivees-de-programmes-pdas","aria-hidden":"true"},"#"),s(" Adresses d\xE9riv\xE9es de programmes (PDAs)")],-1),g=s("Les adresses d\xE9riv\xE9es de programmes (PDA) sont des comptes qui sont con\xE7us pour \xEAtre contr\xF4l\xE9s par un programme sp\xE9cifique. Avec les PDAs, les programmes peuvent signer, de mani\xE8re programm\xE9e, pour certaines adresses sans avoir besoin d'une cl\xE9 priv\xE9e. Les PDAs servent de base \xE0 "),f={href:"https://docs.solana.com/developing/programming-model/calling-between-programs#cross-program-invocations",target:"_blank",rel:"noopener noreferrer"},b=s("l'invocation inter-programmes"),v=s(", qui permet aux applications de Solana d'\xEAtre composables les unes avec les autres."),q=e("h2",{id:"faits",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#faits","aria-hidden":"true"},"#"),s(" Faits")],-1),A={class:"custom-container tip"},P=e("p",{class:"custom-container-title"},"Fiche d'Information",-1),D=e("li",null,"Les PDAs sont des cha\xEEnes de caract\xE8res de 32 bytes qui ressemblent \xE0 des cl\xE9s publiques, mais qui n'ont pas de cl\xE9s priv\xE9es correspondantes",-1),x=e("li",null,[e("code",null,"findProgramAddress"),s(" d\xE9rivera de mani\xE8re d\xE9terministe un PDA \xE0 partir d'un programId et de seeds (collection de bytes)")],-1),k=e("li",null,"Un bump (un byte) est utilis\xE9 pour d\xE9placer un PDA potentiel hors de la courbe elliptique ed25519",-1),L=s("Les programmes peuvent signer pour leurs PDAs en fournissant les seeds et le bump \xE0 l'"),y={href:"https://docs.solana.com/developing/programming-model/calling-between-programs#program-signed-accounts",target:"_blank",rel:"noopener noreferrer"},w=s("invoke_signed"),E=e("li",null,"Un PDA ne peut \xEAtre sign\xE9 que par le programme dont il est d\xE9riv\xE9",-1),C=s("En plus de permettre aux programmes de signer pour diff\xE9rentes instructions, les PDAs fournissent aussi une interface de type hashmap pour les "),I=s("indexing accounts"),F=c('<h2 id="examen-plus-approfondi" tabindex="-1"><a class="header-anchor" href="#examen-plus-approfondi" aria-hidden="true">#</a> Examen plus approfondi</h2><p>Les PDAs sont un \xE9l\xE9ment essentiel pour le d\xE9veloppement de programmes sur Solana. Avec les PDAs, les programmes peuvent signer pour des comptes tout en garantissant qu&#39;aucun utilisateur externe ne pourrait \xE9galement g\xE9n\xE9rer une signature valide pour le m\xEAme compte. En plus de la signature des comptes, certains programmes peuvent \xE9galement modifier les comptes d\xE9tenus par leurs PDAs.</p><p><img src="'+p+'" alt="Accounts matrix"></p><p><small style="text-align:center;display:block;">Image courtesy of <a href="https://twitter.com/pencilflip">Pencilflip</a></small></p><h3 id="generation-des-pdas" tabindex="-1"><a class="header-anchor" href="#generation-des-pdas" aria-hidden="true">#</a> G\xE9n\xE9ration des PDAs</h3><p>Pour comprendre le concept des PDAs, il peut \xEAtre utile de consid\xE9rer que les PDAs ne sont pas techniquement cr\xE9\xE9s, mais plut\xF4t trouv\xE9s. Les PDAs sont g\xE9n\xE9r\xE9s \xE0 partir d&#39;une combinaison de seeds (telles que la cha\xEEne <code>\u201Cvote_account\u201D</code>) et d&#39;un identifiant de programme. Cette combinaison de seeds et d&#39;identifiant de programme est ensuite ex\xE9cut\xE9e par une fonction de hachage sha256 pour voir si elle g\xE9n\xE8re ou non une cl\xE9 publique qui se trouve sur la courbe elliptique ed25519.</p><p>En faisant passer notre identifiant de programme et nos seeds \xE0 travers une fonction de hachage, il y a environ 50 % de chances que nous obtenions une cl\xE9 publique valide qui se trouve sur la courbe elliptique. Dans ce cas, nous ajoutons simplement quelque chose pour modifier un peu notre entr\xE9e et nous r\xE9essayons. Le terme technique pour le quelque chose que nous rajoutons est un &quot;bump&quot;. Dans Solana, nous commen\xE7ons par bump = 255 et it\xE9rons simplement en soustrayant 1 \xE0 chaque fois, nous utilisons ainsi bump = 254, bump = 253, etc. jusqu&#39;\xE0 ce que nous obtenions une adresse qui n&#39;est pas sur la courbe elliptique. Cela peut sembler rudimentaire, mais une fois trouv\xE9, cela nous donne un moyen d\xE9terministe de d\xE9river le m\xEAme PDA encore et encore.</p><p><img src="'+m+'" alt="Le PDA sur la courbe elliptique"></p><h3 id="interaction-avec-les-pdas" tabindex="-1"><a class="header-anchor" href="#interaction-avec-les-pdas" aria-hidden="true">#</a> Interaction avec les PDAs</h3>',9),N=s("Quand un PDA est g\xE9n\xE9r\xE9, "),S=e("code",null,"findProgramAddress",-1),V=s(" retournera \xE0 la fois l'adresse et le bump utilis\xE9 pour d\xE9placer celle-ci hors de la courbe elliptique. Avec ce bump, un programme peut alors "),j=s("signer"),B=s(" pour toute instruction qui requiert son PDA. Afin de signer, les programmes doivent passer l'instruction, la liste des comptes, ainsi que les seeds et le bump utilis\xE9s pour d\xE9river le PDA \xE0 "),R=e("code",null,"invoke_signed",-1),U=s(". En plus de signer pour les instructions, les PDAs doivent \xE9galement signer leur propre cr\xE9ation avec "),z=e("code",null,"invoke_signed",-1),G=s("."),Q=s("Lors de la cr\xE9ation de PDAs, il est courant de "),T={href:"https://github.com/solana-labs/solana-program-library/blob/78e29e9238e555967b9125799d7d420d7d12b959/token-swap/program/src/state.rs#L100",target:"_blank",rel:"noopener noreferrer"},H=s("stocker le bump et les seeds"),J=s(" dans les donn\xE9es du compte lui-m\xEAme. Cela permet ainsi aux d\xE9veloppeurs de valider facilement un PDA sans avoir \xE0 transmettre en argument de l'instruction le bump."),K=e("h2",{id:"autres-ressources",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#autres-ressources","aria-hidden":"true"},"#"),s(" Autres Ressources")],-1),M={href:"https://docs.solana.com/developing/programming-model/calling-between-programs#program-derived-addresses",target:"_blank",rel:"noopener noreferrer"},O=s("Documentation officielle"),W={href:"https://www.brianfriel.xyz/understanding-program-derived-addresses/",target:"_blank",rel:"noopener noreferrer"},X=s("Comprendre les Adresses D\xE9riv\xE9es de Programmes");function Y(Z,$){const r=o("ExternalLinkIcon"),t=o("RouterLink");return l(),d(u,null,[_,e("p",null,[g,e("a",f,[b,n(r)]),v]),q,e("div",A,[P,e("ul",null,[D,x,k,e("li",null,[L,e("a",y,[w,n(r)])]),E,e("li",null,[C,n(t,{to:"/fr/guides/account-maps.html"},{default:a(()=>[I]),_:1})])])]),F,e("p",null,[N,S,V,n(t,{to:"/fr/references/accounts.html#sign-with-a-pda"},{default:a(()=>[j]),_:1}),B,R,U,z,G]),e("p",null,[Q,e("a",T,[H,n(r)]),J]),K,e("ul",null,[e("li",null,[e("a",M,[O,n(r)])]),e("li",null,[e("a",W,[X,n(r)])])])],64)}var se=i(h,[["render",Y]]);export{se as default};
