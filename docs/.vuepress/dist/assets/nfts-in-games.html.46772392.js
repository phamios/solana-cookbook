import{_ as p,r as o,o as c,c as l,a as n,b as t,F as r,d as s,e}from"./app.07ce7a66.js";const i={},u=n("h1",{id:"nfts-in-games",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#nfts-in-games","aria-hidden":"true"},"#"),s(" NFTs In Games")],-1),k=n("p",null,"Non-fungible tokens (NFTs) are rapidly gaining popularity as a means of integrating Solana into games. These unique digital assets are stored on the Solana blockchain and come with a JSON metadata attached to them. The metadata allows developers to store important attributes and information about the NFT, such as its rarity or specific in-game capabilities. NFTs can be used in games to represent anything from weapons and armor to digital real estate and collectibles, providing a new level of ownership and scarcity for players.",-1),d=n("h2",{id:"token-gating-with-nfts",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#token-gating-with-nfts","aria-hidden":"true"},"#"),s(" Token gating with NFTs")],-1),m=s("Using NFTs, you can gate access to a particular part of a game based on owning the NFT. This can form a more tight-knit community within your game. In "),h={href:"https://docs.solana.com/de/developing/clients/javascript-api",target:"_blank",rel:"noopener noreferrer"},b=s("js"),f=s(" using the "),g={href:"https://github.com/metaplex-foundation/js#readme",target:"_blank",rel:"noopener noreferrer"},y=s("Metaplex sdk"),w=s(" this would look like this:"),_=e(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>
  <span class="token comment">// For example &#39;.config/solana/devnet.json&#39;</span>
  fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&quot;yourKeyPair.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> keyPair <span class="token operator">=</span> Keypair<span class="token punctuation">.</span><span class="token function">fromSecretKey</span><span class="token punctuation">(</span>decodedKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> metaplex <span class="token operator">=</span> Metaplex<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">keypairIdentity</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> nfts <span class="token operator">=</span> <span class="token keyword">await</span> metaplex
  <span class="token punctuation">.</span><span class="token function">nfts</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">findAllByOwner</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">owner</span><span class="token operator">:</span> wallet<span class="token punctuation">.</span>publicKey <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">let</span> collectionNfts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nfts<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>nfts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>collection<span class="token operator">?.</span>address<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> collectionAddress<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    collectionNfts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nfts<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="bonus-effects-with-nfts" tabindex="-1"><a class="header-anchor" href="#bonus-effects-with-nfts" aria-hidden="true">#</a> Bonus Effects with NFTs</h2><p>In addition to providing new revenue streams, NFTs can also be used to provide in-game benefits and bonuses to players. For instance, a player who owns a &quot;coin doubler&quot; NFT may receive double the amount of coins for as long as they hold the NFT in their wallet. Additionally, NFTs can be used as consumables, allowing players to use them to gain temporary effects such as potions or spells. Once consumed, the NFT is burned, and the effect is applied to the player&#39;s character. These innovative features of NFTs provide game developers with new opportunities to create unique gameplay experiences and reward players for their ownership of valuable assets on the Solana blockchain.</p><p><a href="../references/token#how-to-burn-tokens">How to interact with tokens</a></p><p><a href="../references/nfts">NFTs</a></p><h2 id="using-nft-metadata-for-player-stats" tabindex="-1"><a class="header-anchor" href="#using-nft-metadata-for-player-stats" aria-hidden="true">#</a> Using NFT Metadata for Player Stats</h2><p>NFTs also have Metadata, which can be used for all kind of traits for game objects. For example an NFT could represent a game character and his traits Strength/Intelligence/Agility could directly influence how strong the character is in the game. You can load NFT metadata and their attributes using the Metaplex SDK:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Metaplex<span class="token punctuation">,</span> keypairIdentity <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@metaplex-foundation/js&quot;</span><span class="token punctuation">;</span>

<span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>
  <span class="token comment">// For example &#39;.config/solana/devnet.json&#39;</span>
  fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&quot;yourKeyPair.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> keyPair <span class="token operator">=</span> Keypair<span class="token punctuation">.</span><span class="token function">fromSecretKey</span><span class="token punctuation">(</span>decodedKey<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> metaplex <span class="token operator">=</span> Metaplex<span class="token punctuation">.</span><span class="token function">make</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">keypairIdentity</span><span class="token punctuation">(</span>keyPair<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> nfts <span class="token operator">=</span> <span class="token keyword">await</span> metaplex<span class="token punctuation">.</span><span class="token function">nfts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findAllByOwner</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">owner</span><span class="token operator">:</span> keyPair<span class="token punctuation">.</span>publicKey<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> physicalDamage <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> magicalDamage <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

nfts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">nft</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> metaData <span class="token operator">=</span> <span class="token keyword">await</span> metaplex<span class="token punctuation">.</span><span class="token function">nfts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">metadata</span><span class="token operator">:</span> nft<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    metaData<span class="token punctuation">.</span>json<span class="token punctuation">.</span>attributes<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token parameter">attribute</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>attribute<span class="token punctuation">.</span>trait_type <span class="token operator">==</span> <span class="token string">&quot;Strength&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        physicalDamage <span class="token operator">+=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>attribute<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>attribute<span class="token punctuation">.</span>trait_type <span class="token operator">==</span> <span class="token string">&quot;Int&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        magicalDamage <span class="token operator">+=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>attribute<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Player Physical Damage: &quot;</span> <span class="token operator">+</span> physicalDamage<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Player Magical Damage: &quot;</span> <span class="token operator">+</span> magicalDamage<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="fusing-nfts-together" tabindex="-1"><a class="header-anchor" href="#fusing-nfts-together" aria-hidden="true">#</a> Fusing NFTs Together</h2>`,9),v=s("The "),T={href:"https://docs.metaplex.com/programs/fusion/overview",target:"_blank",rel:"noopener noreferrer"},F=s("Metaplex Fusion Trifle program"),x=s(" allows you to have NFTs own other NFTs. For example you could create a plant plot NFT and then use to combine it with a water NFT and a seed NFT to create a Tomato NFT."),N=n("h2",{id:"use-3d-nfts-in-a-game",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#use-3d-nfts-in-a-game","aria-hidden":"true"},"#"),s(" Use 3D Nfts in a game")],-1),S=s("Every NFT metadata can also have a animation url. This url can contain a video, gif or a 3d file. These 3d files usually use the format .glb or .gltf and can dynamically be loaded into a game. For unity you can use the "),j={href:"https://github.com/atteneder/glTFast",target:"_blank",rel:"noopener noreferrer"},q=s("GLTFast"),D=s(" package and in js the "),K={href:"https://discoverthreejs.com/book/first-steps/load-models/",target:"_blank",rel:"noopener noreferrer"},I=s("GLTFast JS"),M=s(". For reference a "),B={href:"https://solscan.io/token/DzHPvbGzrHK4UcyeDurw2nuBFKNvt4Kb7K8Bx9dtsfn#metadata",target:"_blank",rel:"noopener noreferrer"},P=s("NFT metadata with glb model"),A=e(`<div class="language-c ext-c line-numbers-mode"><pre class="language-c"><code>  var gltf <span class="token operator">=</span> gameObject<span class="token punctuation">.</span>AddComponent<span class="token operator">&lt;</span>GLTFast<span class="token punctuation">.</span>GltfAsset<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  gltf<span class="token punctuation">.</span>url <span class="token operator">=</span> nft<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>animationUrl<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev gltf<span class="token operator">-</span>loader<span class="token operator">-</span>ts

<span class="token keyword">import</span> <span class="token punctuation">{</span> GltfLoader <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;gltf-loader-ts&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> loader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GltfLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> uri <span class="token operator">=</span> <span class="token string">&#39;https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/BoxTextured/glTF/BoxTextured.gltf&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">asset</span><span class="token operator">:</span> Asset <span class="token operator">=</span> <span class="token keyword">await</span> loader<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token literal-property property">gltf</span><span class="token operator">:</span> GlTf <span class="token operator">=</span> asset<span class="token punctuation">.</span>gltf<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>gltf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// -&gt; {asset: {\u2026}, scene: 0, scenes: Array(1), nodes: Array(2), meshes: Array(1), \u2026}</span>

<span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">await</span> asset<span class="token punctuation">.</span><span class="token function">accessorData</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// fetches BoxTextured0.bin</span>
<span class="token keyword">let</span> <span class="token literal-property property">image</span><span class="token operator">:</span> Image <span class="token operator">=</span> <span class="token keyword">await</span> asset<span class="token punctuation">.</span>imageData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// fetches CesiumLogoFlat.png</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="customize-nfts-with-items-and-traits-raindrops-boots" tabindex="-1"><a class="header-anchor" href="#customize-nfts-with-items-and-traits-raindrops-boots" aria-hidden="true">#</a> Customize NFTs with items and traits (Raindrops boots)</h2>`,3),G=s("With the "),L={href:"https://docs.raindrops.xyz/services/boots",target:"_blank",rel:"noopener noreferrer"},z=s("Raindrops Boots program"),E=s(" you can have an adventure character which owns a sword and a helmet. When the Character NFT would be sold on a market place the other NFTs it owns would be sold as well."),O=n("h2",{id:"how-to-create-an-nft-collection",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#how-to-create-an-nft-collection","aria-hidden":"true"},"#"),s(" How to create an NFT collection")],-1),U=n("p",null,"NFTs on Solana mostly follow the Metaplex standard. Metaplex is a company which takes care of the NFT most used standard on Solana. The most common way to create an NFT collection is to create a metaplex candy machine which lets the user mint predefined pairs of metadata and images.",-1),C={href:"https://docs.metaplex.com/programs/candy-machine/how-to-guides/my-first-candy-machine-part1",target:"_blank",rel:"noopener noreferrer"},H=s("Metaplex Docs"),V={href:"https://youtu.be/0KHv1dMV8zU",target:"_blank",rel:"noopener noreferrer"},J=s("Setup a candy machine step by step"),R=n("p",null,[n("a",{href:"../references/nfts"},"NFTs")],-1);function W(Y,Q){const a=o("ExternalLinkIcon");return c(),l(r,null,[u,k,d,n("p",null,[m,n("a",h,[b,t(a)]),f,n("a",g,[y,t(a)]),w]),_,n("p",null,[v,n("a",T,[F,t(a)]),x]),N,n("p",null,[S,n("a",j,[q,t(a)]),D,n("a",K,[I,t(a)]),M,n("a",B,[P,t(a)])]),A,n("p",null,[G,n("a",L,[z,t(a)]),E]),O,U,n("p",null,[n("a",C,[H,t(a)])]),n("p",null,[n("a",V,[J,t(a)])]),R],64)}var Z=p(i,[["render",W]]);export{Z as default};
