import{_ as n,r as t,o as r,c as p,a,b as s,F as i,e as c,d as o}from"./app.07ce7a66.js";const l={},d=c(`<h1 id="depurando-programas-da-solana" tabindex="-1"><a class="header-anchor" href="#depurando-programas-da-solana" aria-hidden="true">#</a> Depurando Programas da Solana</h1><p>H\xE1 v\xE1rias op\xE7\xF5es e ferramentas de suporte para testar e depurar um programa da Solana.</p><h2 id="fatos" tabindex="-1"><a class="header-anchor" href="#fatos" aria-hidden="true">#</a> Fatos</h2><div class="custom-container tip"><p class="custom-container-title">Ficha Informativa</p><ul><li>O crate <code>solana-program-test</code> permite o uso de um <em><strong>ambiente de execu\xE7\xE3o local</strong></em> b\xE1sico onde \xE9 poss\xEDvel testar e depurar seu programa de forma interativa (por exemplo, no vscode).</li><li>O crate <code>solana-validator</code> permite o uso da implementa\xE7\xE3o <code>solana-test-validator</code> para testes mais robustos que ocorrem em um <em><strong>n\xF3 validador local</strong></em>. Voc\xEA pode executar a partir do editor, mas <em><strong>os pontos de interrup\xE7\xE3o no programa s\xE3o ignorados</strong></em>.</li><li>A ferramenta de CLI <code>solana-test-validator</code> executa e carrega seu programa e processa a execu\xE7\xE3o de transa\xE7\xF5es a partir de aplicativos de linha de comando em Rust ou aplicativos Javascript/Typescript usando web3.</li><li>Para todos os casos acima, \xE9 recomendado o uso liberal da macro <code>msg!</code> em seu programa no in\xEDcio e, em seguida, remov\xEA-las \xE0 medida que voc\xEA testa e garante um comportamento s\xF3lido. Lembre-se de que <code>msg!</code> consome Unidades de Computa\xE7\xE3o que podem eventualmente fazer com que seu programa falhe atingindo os limites do or\xE7amento de Unidades de Computa\xE7\xE3o.</li></ul></div><p>Os passos nas se\xE7\xF5es seguintes usam o <a href="#resources">solana-program-bpf-template</a>. Clone-o em sua m\xE1quina:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:mvines/solana-bpf-program-template.git
<span class="token builtin class-name">cd</span> solana-bpf-program-template
code <span class="token builtin class-name">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="testes-de-tempo-de-execucao-e-depuracao-no-editor" tabindex="-1"><a class="header-anchor" href="#testes-de-tempo-de-execucao-e-depuracao-no-editor" aria-hidden="true">#</a> Testes de Tempo de Execu\xE7\xE3o e Depura\xE7\xE3o no Editor</h2><p>Abra o arquivo <code>src/lib.rs</code>.</p><p>Voc\xEA ver\xE1 que o programa \xE9 bem simples e basicamente apenas registra o conte\xFAdo recebido pela fun\xE7\xE3o de ponto de entrada do programa: <code>process_instruction</code>.</p><ol><li>V\xE1 para a se\xE7\xE3o <code>#[cfg(test)]</code> e clique em <code>Run Tests</code>. Isso ir\xE1 compilar o programa e, em seguida, executar o teste <code>async fn test_transaction()</code>. Voc\xEA ver\xE1 as mensagens de log (simplificadas) no terminal do vscode abaixo da fonte.</li></ol><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>running <span class="token number">1</span> <span class="token builtin class-name">test</span>
<span class="token string">&quot;bpf_program_template&quot;</span> program loaded as native code
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM invoke <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
Program log: process_instruction: 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM: <span class="token number">1</span> accounts, <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM success
<span class="token builtin class-name">test</span> test::test_transaction <span class="token punctuation">..</span>. ok
<span class="token builtin class-name">test</span> result: ok. <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">33</span>.41s
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ol start="2"><li>Defina um ponto de interrup\xE7\xE3o na linha <code>msg!</code> do programa (linha 11)</li><li>De volta ao m\xF3dulo de teste, clique em <code>Debug</code> e em alguns segundos o depurador parar\xE1 no ponto de interrup\xE7\xE3o e agora voc\xEA pode examinar dados, percorrer fun\xE7\xF5es, etc.</li></ol><p>Esses testes tamb\xE9m podem ser executados a partir da linha de comando com: <code>cargo test</code> ou <code>cargo test-bpf</code>. \xC9 claro que todos os pontos de interrup\xE7\xE3o ser\xE3o ignorados.</p><p>Como \xE9 legal isso!</p><div class="custom-container tip"><p class="custom-container-title">Observa\xE7\xE3o</p><p>Lembre-se de que voc\xEA n\xE3o est\xE1 usando um n\xF3 validador, portanto, programas padr\xE3o, hashes de bloco, etc. n\xE3o s\xE3o representados ou n\xE3o se comportar\xE3o como seriam ao serem executados em um n\xF3 validador. \xC9 por isso que o time da Solana nos deu o teste de N\xF3 Validador Local (Local Validator Node)!</p></div><h2 id="teste-de-no-validador-local-no-editor" tabindex="-1"><a class="header-anchor" href="#teste-de-no-validador-local-no-editor" aria-hidden="true">#</a> Teste de N\xF3 Validador Local no Editor</h2><p>Os testes de integra\xE7\xE3o usando o carregamento program\xE1tico de um n\xF3 validador local s\xE3o definidos no arquivo <code>tests/integration.rs</code>.</p><p>Por padr\xE3o, os testes de integra\xE7\xE3o do modelo de reposit\xF3rio s\xF3 poder\xE3o ser executados a partir da linha de comando usando <code>cargo test-bpf</code>. As seguintes etapas permitir\xE3o que voc\xEA execute dentro do editor, bem como exibir logs do validador do programa e sa\xEDdas <code>msg!</code> do seu programa:</p><ol><li>No diret\xF3rio do reposit\xF3rio, execute <code>cargo build-bpf</code> para construir o programa de amostra</li><li>No editor, abra <code>tests/integration.rs</code></li><li>Comente a linha 1 -&gt; <code>// #![cfg(feature = &quot;test-bpf&quot;)]</code></li><li>Na linha 19, altere para ler: <code>.add_program(&quot;target/deploy/bpf_program_template&quot;, program_id)</code></li><li>Insira o seguinte na linha 22: <code>solana_logger::setup_with_default(&quot;solana_runtime::message=debug&quot;);</code></li><li>Clique em <code>Run Test</code> acima da fun\xE7\xE3o <code>test_validator_transaction()</code></li></ol><p>Isso carregar\xE1 o n\xF3 validador, permitindo que voc\xEA construa uma transa\xE7\xE3o (da maneira Rust) e envie ao n\xF3 usando o <code>RcpClient</code>.</p><p>A sa\xEDda do programa tamb\xE9m ser\xE1 impressa no terminal do editor. Por exemplo (simplificado):</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>running <span class="token number">1</span> <span class="token builtin class-name">test</span>
Waiting <span class="token keyword">for</span> fees to stabilize <span class="token number">1</span><span class="token punctuation">..</span>.
Waiting <span class="token keyword">for</span> fees to stabilize <span class="token number">2</span><span class="token punctuation">..</span>.
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM invoke <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
Program log: process_instruction: 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM: <span class="token number">1</span> accounts, <span class="token assign-left variable">data</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span>, <span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">]</span>
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM consumed <span class="token number">13027</span> of <span class="token number">200000</span> compute <span class="token function">units</span>
Program 4uQeVj5tqViQh7yWWGStvkEG1Zmhx6uasJtWCJziofM success

<span class="token builtin class-name">test</span> test_validator_transaction <span class="token punctuation">..</span>. ok
<span class="token builtin class-name">test</span> result: ok. <span class="token number">1</span> passed<span class="token punctuation">;</span> <span class="token number">0</span> failed<span class="token punctuation">;</span> <span class="token number">0</span> ignored<span class="token punctuation">;</span> <span class="token number">0</span> measured<span class="token punctuation">;</span> <span class="token number">0</span> filtered out<span class="token punctuation">;</span> finished <span class="token keyword">in</span> <span class="token number">6</span>.40s
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>A depura\xE7\xE3o aqui permitir\xE1 que voc\xEA depure as fun\xE7\xF5es e m\xE9todos usados no <em><strong>corpo do teste</strong></em>, mas n\xE3o permitir\xE1 que voc\xEA insira pontos de interrup\xE7\xE3o em seu programa.</p><p>Muito legal, n\xE9?</p><h2 id="teste-de-no-validador-local-a-partir-de-aplicativos-cliente" tabindex="-1"><a class="header-anchor" href="#teste-de-no-validador-local-a-partir-de-aplicativos-cliente" aria-hidden="true">#</a> Teste de N\xF3 Validador Local a partir de Aplicativos Cliente</h2><p>Por fim, voc\xEA pode iniciar um n\xF3 validador local e carregar seu programa e todas as contas usando o <code>solana-test-validator</code> a partir da linha de comando.</p><p>Nessa abordagem, voc\xEA precisar\xE1 de um aplicativo cliente usando o <a href="#resources">RcpClient</a> do Rust ou em clientes <a href="#resources">JavaScript ou Typescript</a>.</p><p>Consulte <code>solana-test-validator --help</code> para obter mais detalhes e op\xE7\xF5es. Para o programa exemplo, aqui est\xE1 a configura\xE7\xE3o padr\xE3o:</p><ol><li>Abra um terminal na pasta do reposit\xF3rio</li><li>Execute <code>solana config set -ul</code> para definir a configura\xE7\xE3o para apontar para &#39;local&#39;</li><li>Execute <code>solana-test-validator --bpf-program target/deploy/bpf_program_template-keypair.json target/deploy/bpf_program_template.so</code></li><li>Abra outro terminal e execute <code>solana logs</code> para iniciar o registro de logs</li><li>Voc\xEA pode ent\xE3o executar seu programa cliente e observar a sa\xEDda do programa no terminal onde voc\xEA iniciou o registro de logs</li></ol><p>UAU! Isso \xE9 demais!</p><h2 id="recursos" tabindex="-1"><a class="header-anchor" href="#recursos" aria-hidden="true">#</a> Recursos</h2>`,31),u={href:"https://github.com/mvines/solana-bpf-program-template",target:"_blank",rel:"noopener noreferrer"},m=o("solana-program-bpf-template"),b={href:"https://docs.rs/solana-client/latest/solana_client/rpc_client/struct.RpcClient.html",target:"_blank",rel:"noopener noreferrer"},g=o("RcpClient"),h={href:"https://solana-labs.github.io/solana-web3.js/",target:"_blank",rel:"noopener noreferrer"},k=o("Biblioteca JavaScript/Typescript");function v(f,_){const e=t("ExternalLinkIcon");return r(),p(i,null,[d,a("p",null,[a("a",u,[m,s(e)])]),a("p",null,[a("a",b,[g,s(e)])]),a("p",null,[a("a",h,[k,s(e)])])],64)}var q=n(l,[["render",v]]);export{q as default};
