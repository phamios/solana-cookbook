import{_ as t,r as p,o as c,c as r,a,b as e,F as l,e as o,d as n}from"./app.07ce7a66.js";const i={},u=o('<h1 id="invocacoes-de-programas-cruzados-cpis" tabindex="-1"><a class="header-anchor" href="#invocacoes-de-programas-cruzados-cpis" aria-hidden="true">#</a> Invoca\xE7\xF5es de Programas Cruzados (CPIs)</h1><p>A Invoca\xE7\xE3o de Programas Cruzados (Cross-Program Invocation, ou CPI) \xE9 uma chamada direta de um programa em outro, permitindo a componibilidade de programas Solana. Assim como qualquer cliente pode chamar qualquer programa usando o protocolo JSON-RPC, qualquer programa pode chamar outro programa via uma CPI. As CPIs essencialmente transformam todo o ecossistema Solana em uma \xFAnica API gigante que est\xE1 \xE0 disposi\xE7\xE3o do desenvolvedor.</p><p>O objetivo desta se\xE7\xE3o \xE9 fornecer uma vis\xE3o geral de alto n\xEDvel das CPIs. Por favor, consulte os recursos vinculados abaixo para explica\xE7\xF5es mais detalhadas, exemplos e tutoriais passo a passo.</p><h2 id="fatos" tabindex="-1"><a class="header-anchor" href="#fatos" aria-hidden="true">#</a> Fatos</h2><div class="custom-container tip"><p class="custom-container-title">Ficha Informativa</p><ul><li>Uma Invoca\xE7\xE3o de Programas Cruzados (CPI) \xE9 uma chamada de um programa para outro, visando uma instru\xE7\xE3o espec\xEDfica no programa que est\xE1 sendo chamado</li><li>As CPIs permitem que o programa chamador estenda seus privil\xE9gios de assinatura para o programa chamado</li><li>Os programas podem executar CPIs usando <code>invoke</code> ou <code>invoke_signed</code> dentro de suas instru\xE7\xF5es</li><li><code>invoke</code> \xE9 usado quando todas as assinaturas necess\xE1rias est\xE3o acess\xEDveis antes da invoca\xE7\xE3o, sem a necessidade de PDAs atuarem como signat\xE1rios.</li><li><code>invoke_signed</code> \xE9 usado quando PDAs do programa chamador s\xE3o necess\xE1rios como signat\xE1rios na CPI</li><li>Depois que uma CPI \xE9 feita para outro programa, o programa chamado pode fazer novas CPIs para outros programas, at\xE9 uma profundidade m\xE1xima de 4</li></ul></div><h2 id="mergulho-profundo" tabindex="-1"><a class="header-anchor" href="#mergulho-profundo" aria-hidden="true">#</a> Mergulho Profundo</h2><p>As Invoca\xE7\xF5es de Programas Cruzados (CPIs) permitem a componibilidade de programas Solana, o que permite que os desenvolvedores utilizem e construam sobre as instru\xE7\xF5es de programas existentes.</p>',7),d=n("Para executar CPIs, use a fun\xE7\xE3o "),m={href:"https://docs.rs/solana-program/latest/solana_program/program/fn.invoke.html",target:"_blank",rel:"noopener noreferrer"},k=n("invoke"),b=n(" or "),g={href:"https://docs.rs/solana-program/latest/solana_program/program/fn.invoke_signed.html",target:"_blank",rel:"noopener noreferrer"},h=n("invoke_signed"),_=n(" encontrada no crate "),f=a("code",null,"solana_program",-1),v=n("."),P=o(`<div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// Usado quando n\xE3o s\xE3o necess\xE1rias assinaturas para PDAs</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">invoke</span><span class="token punctuation">(</span>
    instruction<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Instruction</span><span class="token punctuation">,</span>
    account_infos<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">AccountInfo</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">ProgramResult</span>

<span class="token comment">// Usado quando um programa precisa fornecer uma &#39;assinatura&#39; para um PDA, da\xED o par\xE2metro signer_seeds</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">invoke_signed</span><span class="token punctuation">(</span>
    instruction<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Instruction</span><span class="token punctuation">,</span>
    account_infos<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">AccountInfo</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;_</span><span class="token operator">&gt;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    signers_seeds<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">ProgramResult</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>Para fazer uma CPI, voc\xEA deve especificar e construir uma instru\xE7\xE3o no programa que est\xE1 sendo invocado e fornecer uma lista de contas necess\xE1rias para essa instru\xE7\xE3o. Se um PDA for necess\xE1rio como signat\xE1rio, <code>signers_seeds</code> tamb\xE9m deve ser preenchido ao usar a fun\xE7\xE3o <code>invoke_signed</code>.</p><h3 id="cpi-com-invoke" tabindex="-1"><a class="header-anchor" href="#cpi-com-invoke" aria-hidden="true">#</a> CPI com <code>invoke</code></h3><p>A fun\xE7\xE3o <code>invoke</code> \xE9 usada ao fazer uma CPI que n\xE3o requer que nenhum PDA atue como signat\xE1rio. Ao fazer CPIs, o tempo de execu\xE7\xE3o da Solana estende a assinatura original passada para um programa ao programa chamado.</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token function">invoke</span><span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>some_instruction<span class="token punctuation">,</span>                           <span class="token comment">// instru\xE7\xE3o para invocar</span>
    <span class="token operator">&amp;</span><span class="token punctuation">[</span>account_one<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> account_two<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// contas exigidas por instru\xE7\xE3o</span>
<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="cpi-com-invoke-signed" tabindex="-1"><a class="header-anchor" href="#cpi-com-invoke-signed" aria-hidden="true">#</a> CPI com <code>invoke_signed</code></h3><p>Para fazer uma CPI que requer um PDA como signat\xE1rio, use a fun\xE7\xE3o <code>invoke_signed</code> e forne\xE7a as sementes necess\xE1rias para derivar o PDA exigido pelo programa chamador.</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token function">invoke_signed</span><span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>some_instruction<span class="token punctuation">,</span>                   <span class="token comment">// instru\xE7\xE3o para invocar</span>
    <span class="token operator">&amp;</span><span class="token punctuation">[</span>account_one<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pda<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// contas exigidas por instru\xE7\xE3o, em que a primeira conta \xE9 um PDA necess\xE1rio como signat\xE1rio</span>
    <span class="token operator">&amp;</span><span class="token punctuation">[</span>signers_seeds<span class="token punctuation">]</span><span class="token punctuation">,</span>                    <span class="token comment">// sementes para derivar o PDA</span>
<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Embora os PDAs n\xE3o tenham chaves privadas pr\xF3prias, eles ainda podem atuar como signat\xE1rios em uma instru\xE7\xE3o por meio de uma CPI. Para verificar se um PDA pertence ao programa chamador, as sementes usadas para gerar o PDA necess\xE1rio como signat\xE1rio devem ser inclu\xEDdas como <code>signers_seeds</code>.</p><p>O tempo de execu\xE7\xE3o da Solana chamar\xE1 internamente <code>create_program_address</code> usando as sementes fornecidas e o <code>program_id</code> do programa chamador. O PDA resultante \xE9 ent\xE3o comparado com os endere\xE7os fornecidos na instru\xE7\xE3o. Se houver uma correspond\xEAncia, o PDA \xE9 considerado um signat\xE1rio v\xE1lido.</p><h3 id="struct-da-cpi-instruction" tabindex="-1"><a class="header-anchor" href="#struct-da-cpi-instruction" aria-hidden="true">#</a> Struct da CPI - <code>Instruction</code></h3><p>Dependendo do programa para o qual voc\xEA est\xE1 fazendo a chamada, pode haver uma crate dispon\xEDvel com fun\xE7\xF5es auxiliares para criar a instru\xE7\xE3o, ou seja, <code>Instruction</code>. Muitas pessoas e organiza\xE7\xF5es criam crates publicamente dispon\xEDveis ao lado de seus programas que exp\xF5em esses tipos de fun\xE7\xF5es para simplificar a chamada de seus programas.</p><p>A defini\xE7\xE3o do tipo <code>Instruction</code> exigido para uma CPI inclui:</p><ul><li><code>program_id</code>\xA0- a chave p\xFAblica do programa que executa a instru\xE7\xE3o</li><li><code>accounts</code>\xA0- uma lista de todas as contas que podem ser lidas ou escritas durante a execu\xE7\xE3o da instru\xE7\xE3o</li><li><code>data</code>\xA0- os dados de instru\xE7\xE3o exigidos pela instru\xE7\xE3o</li></ul><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">Instruction</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> program_id<span class="token punctuation">:</span> <span class="token class-name">Pubkey</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> accounts<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">AccountMeta</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> data<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token keyword">u8</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>A struct <code>AccountMeta</code>\xA0tem a seguinte defini\xE7\xE3o:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">AccountMeta</span> <span class="token punctuation">{</span>
    <span class="token keyword">pub</span> pubkey<span class="token punctuation">:</span> <span class="token class-name">Pubkey</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> is_signer<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
    <span class="token keyword">pub</span> is_writable<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Ao criar uma CPI, use a seguinte sintaxe para especificar o <code>AccountMeta</code> para cada conta:</p><ul><li><code>AccountMeta::new</code>\xA0- indica que \xE9 grav\xE1vel (writable)</li><li><code>AccountMeta::new_readonly</code>\xA0- indica que <em>n\xE3o</em> \xE9 grav\xE1vel (not writable)</li><li><code>(pubkey, true)</code>\xA0- indica que a conta \xE9 signat\xE1ria</li><li><code>(pubkey, false)</code>\xA0- indica que a conta <em>n\xE3o</em> \xE9 signat\xE1ria</li></ul><p>Aqui est\xE1 um exemplo:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">solana_program<span class="token punctuation">::</span>instruction<span class="token punctuation">::</span></span><span class="token class-name">AccountMeta</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> account_metas <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span>
    <span class="token class-name">AccountMeta</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>account1_pubkey<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">AccountMeta</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span>account2_pubkey<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">AccountMeta</span><span class="token punctuation">::</span><span class="token function">new_readonly</span><span class="token punctuation">(</span>account3_pubkey<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token class-name">AccountMeta</span><span class="token punctuation">::</span><span class="token function">new_readonly</span><span class="token punctuation">(</span>account4_pubkey<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="struct-da-cpi-accountinfo" tabindex="-1"><a class="header-anchor" href="#struct-da-cpi-accountinfo" aria-hidden="true">#</a> Struct da CPI - <code>AccountInfo</code></h3><p>Para usar <code>invoke</code> e <code>invoke_signed</code>, tamb\xE9m \xE9 necess\xE1rio fornecer uma lista de <code>account_infos</code>. Assim como na lista de <code>AccountMeta</code> na instru\xE7\xE3o, \xE9 necess\xE1rio incluir todas as ocorr\xEAncias de <code>AccountInfo</code> de cada conta que o programa chamado ler\xE1 ou escrever\xE1.</p><p>Para refer\xEAncia, a struct <code>AccountInfo</code> tem a seguinte defini\xE7\xE3o:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">/// Informa\xE7\xE3o da conta</span>
<span class="token attribute attr-name">#[derive(Clone)]</span>
<span class="token keyword">pub</span> <span class="token keyword">struct</span> <span class="token type-definition class-name">AccountInfo</span><span class="token operator">&lt;</span><span class="token lifetime-annotation symbol">&#39;a</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">/// Chave p\xFAblica da conta</span>
    <span class="token keyword">pub</span> key<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token class-name">Pubkey</span><span class="token punctuation">,</span>
    <span class="token comment">/// A transa\xE7\xE3o foi assinada pela chave p\xFAblica desta conta?</span>
    <span class="token keyword">pub</span> is_signer<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
    <span class="token comment">/// A conta \xE9 grav\xE1vel?</span>
    <span class="token keyword">pub</span> is_writable<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
    <span class="token comment">/// Os lamports na conta. Modific\xE1vel por programas.</span>
    <span class="token keyword">pub</span> lamports<span class="token punctuation">:</span> <span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">mut</span> <span class="token keyword">u64</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
    <span class="token comment">/// Os dados mantidos nesta conta. Modific\xE1vel por programas.</span>
    <span class="token keyword">pub</span> data<span class="token punctuation">:</span> <span class="token class-name">Rc</span><span class="token operator">&lt;</span><span class="token class-name">RefCell</span><span class="token operator">&lt;</span><span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token keyword">mut</span> <span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
    <span class="token comment">/// Programa que possui esta conta</span>
    <span class="token keyword">pub</span> owner<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token lifetime-annotation symbol">&#39;a</span> <span class="token class-name">Pubkey</span><span class="token punctuation">,</span>
    <span class="token comment">/// Os dados desta conta cont\xEAm um programa carregado (e agora s\xE3o somente leitura)</span>
    <span class="token keyword">pub</span> executable<span class="token punctuation">:</span> <span class="token keyword">bool</span><span class="token punctuation">,</span>
    <span class="token comment">/// A \xE9poca em que esta conta dever\xE1 o pr\xF3ximo aluguel</span>
    <span class="token keyword">pub</span> rent_epoch<span class="token punctuation">:</span> <span class="token class-name">Epoch</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div>`,25),y=n("Voc\xEA pode criar uma c\xF3pia do "),w=a("code",null,"AccountInfo",-1),A=n(" para cada conta necess\xE1ria usando o trait "),I={href:"https://docs.rs/solana-program/latest/solana_program/account_info/struct.AccountInfo.html#impl-Clone-for-AccountInfo%3C'a%3E",target:"_blank",rel:"noopener noreferrer"},x=n("Clone"),C=n(", que \xE9 implementado para a struct "),q={href:"https://docs.rs/solana-program/latest/solana_program/account_info/struct.AccountInfo.html",target:"_blank",rel:"noopener noreferrer"},D=n("AccountInfo"),M=n(" no crate "),S=a("code",null,"solana_program",-1),z=n("."),O=o(`<div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> accounts_infos <span class="token operator">=</span> <span class="token punctuation">[</span>
    account_one<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    account_two<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    account_three<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>Embora esta se\xE7\xE3o tenha fornecido uma vis\xE3o geral de alto n\xEDvel das CPIs, explica\xE7\xF5es mais detalhadas, exemplos e tutoriais podem ser encontrados nos recursos vinculados abaixo.</p><h2 id="outros-recursos" tabindex="-1"><a class="header-anchor" href="#outros-recursos" aria-hidden="true">#</a> Outros Recursos</h2>`,3),R={href:"https://docs.solana.com/developing/programming-model/calling-between-programs#cross-program-invocations",target:"_blank",rel:"noopener noreferrer"},E=n("Documenta\xE7\xE3o Oficial"),V={href:"https://solanacookbook.com/references/programs.html#how-to-do-cross-program-invocation",target:"_blank",rel:"noopener noreferrer"},L=n("Refer\xEAncia do Livro de Receitas da Solana"),N={href:"https://www.soldev.app/course/cpi",target:"_blank",rel:"noopener noreferrer"},F=n("Curso Solana - Li\xE7\xE3o sobre a CPI nativa"),B={href:"https://www.soldev.app/course/anchor-cpi",target:"_blank",rel:"noopener noreferrer"},U=n("Curso Solana - Li\xE7\xE3o sobre a CPI do Anchor"),j={href:"https://github.com/solana-developers/program-examples/tree/main/basics/cross-program-invocation",target:"_blank",rel:"noopener noreferrer"},J=n("Exemplos do Programa de Desenvolvedores da Solana");function T(G,H){const s=p("ExternalLinkIcon");return c(),r(l,null,[u,a("p",null,[d,a("a",m,[k,e(s)]),b,a("a",g,[h,e(s)]),_,f,v]),P,a("p",null,[y,w,A,a("a",I,[x,e(s)]),C,a("a",q,[D,e(s)]),M,S,z]),O,a("ul",null,[a("li",null,[a("a",R,[E,e(s)])]),a("li",null,[a("a",V,[L,e(s)])]),a("li",null,[a("a",N,[F,e(s)])]),a("li",null,[a("a",B,[U,e(s)])]),a("li",null,[a("a",j,[J,e(s)])])])],64)}var Q=t(i,[["render",T]]);export{Q as default};
