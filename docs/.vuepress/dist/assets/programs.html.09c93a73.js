import{_ as i,r as a,o as d,c,a as e,b as o,w as l,F as h,d as t,e as n}from"./app.07ce7a66.js";const _={},p=e("h1",{id:"programs",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#programs","aria-hidden":"true"},"#"),t(" Programs")],-1),g=e("p",null,"Any developer can write and deploy programs to the Solana blockchain. Programs (known as smart contracts on other protocols) serve as the foundation for on-chain activity, powering anything from DeFi and NFTs to Social Media and Gaming.",-1),m=e("h2",{id:"facts",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#facts","aria-hidden":"true"},"#"),t(" Facts")],-1),u={class:"custom-container tip"},b=e("p",{class:"custom-container-title"},"Fact Sheet",-1),f=e("li",null,[t("Programs process "),e("a",{href:"./transactions"},"instructions"),t(" from both end users and other programs")],-1),k=t("All programs are "),v=e("em",null,"stateless",-1),y=t(": any data they interact with is stored in separate "),P=t("accounts"),w=t(" that are passed in via instructions"),L=e("li",null,[t("Programs themselves are stored in accounts marked as "),e("code",null,"executable")],-1),S=t("All programs are owned by the "),x={href:"https://docs.solana.com/developing/runtime-facilities/programs#bpf-loader",target:"_blank",rel:"noopener noreferrer"},F=t("BPF Loader"),R=t(" and executed by the "),A={href:"https://docs.solana.com/developing/programming-model/runtime",target:"_blank",rel:"noopener noreferrer"},B=t("Solana Runtime"),D=t("Developers most commonly write programs in Rust or C++, but can choose any language that targets the "),T={href:"https://llvm.org/",target:"_blank",rel:"noopener noreferrer"},C=t("LLVM"),N=t("'s "),E={href:"https://en.wikipedia.org/wiki/Berkeley_Packet_Filter",target:"_blank",rel:"noopener noreferrer"},I=t("BPF"),M=t(" backend"),V=n("<li>All programs have a single entry point where instruction processing takes place (i.e. <code>process_instruction</code>); parameters always include: <ul><li><code>program_id</code>: <code>pubkey</code></li><li><code>accounts</code>: <code>array</code>,</li><li><code>instruction_data</code>: <code>byte array</code></li></ul></li>",1),O=e("h2",{id:"deep-dive",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#deep-dive","aria-hidden":"true"},"#"),t(" Deep Dive")],-1),z=e("p",null,"Unlike most other blockchains, Solana completely separates code from data. All data that programs interact with are stored in separate accounts and passed in as references via instructions. This model allows for a single generic program to operate across various accounts without requiring additional deployments. Common examples of this pattern are seen across the Native and SPL Programs.",-1),j=e("h3",{id:"native-programs-the-solana-program-library-spl",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#native-programs-the-solana-program-library-spl","aria-hidden":"true"},"#"),t(" Native Programs & The Solana Program Library (SPL)")],-1),U=t("Solana comes equipped with a number of programs that serve as core building blocks for on-chain interactions. These programs are divided into "),q={href:"https://docs.solana.com/developing/runtime-facilities/programs#bpf-loader",target:"_blank",rel:"noopener noreferrer"},G=t("Native Programs"),H=t(" and "),W={href:"https://spl.solana.com/",target:"_blank",rel:"noopener noreferrer"},J=t("Solana Program Library (SPL) Programs"),K=t("."),Q=t("Native Programs provide the base functionality that is required to operate validators. Among these programs, the most well known is the "),X={href:"https://docs.solana.com/developing/runtime-facilities/programs#system-program",target:"_blank",rel:"noopener noreferrer"},Y=t("System Program"),Z=t(" which is responsible for administering new accounts and transferring SOL between two parties."),$=t("SPL Programs support a number of on-chain activities, including creating, swapping, and lending tokens, as well as generating stake pools and maintaining an on-chain name service. The "),ee={href:"https://spl.solana.com/token",target:"_blank",rel:"noopener noreferrer"},te=t("SPL Token Program"),oe=t(" can be invoked directly via the CLI, while others like the "),re={href:"https://spl.solana.com/associated-token-account",target:"_blank",rel:"noopener noreferrer"},ne=t("Associated Token Account Program"),ae=t(" are usually composed with custom programs."),se=e("h3",{id:"writing-programs",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#writing-programs","aria-hidden":"true"},"#"),t(" Writing Programs")],-1),ie=t("Programs are most commonly developed with Rust or C++, but can be developed with any language that targets the LLVM\u2019s BPF backend. Recent initiatives by "),de={href:"https://neon-labs.org/",target:"_blank",rel:"noopener noreferrer"},ce=t("Neon Labs"),le=t(" and "),he={href:"https://solang.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},_e=t("Solang"),pe=t(" enable "),ge={href:"https://ethereum.org/en/developers/docs/evm/",target:"_blank",rel:"noopener noreferrer"},me=t("EVM"),ue=t(" compatibility and allow developers to write programs in Solidity."),be=n("<p>Most Rust-based programs adhere to the following architecture:</p><table><thead><tr><th>File</th><th>Description</th></tr></thead><tbody><tr><td>lib.rs</td><td>Registering modules</td></tr><tr><td>entrypoint.rs</td><td>Entrypoint to the program</td></tr><tr><td>instruction.rs</td><td>Program API, (de)serializing instruction data</td></tr><tr><td>processor.rs</td><td>Program logic</td></tr><tr><td>state.rs</td><td>Program objects, (de)serializing state</td></tr><tr><td>error.rs</td><td>Program-specific errors</td></tr></tbody></table>",2),fe=t("Recently, "),ke={href:"https://github.com/coral-xyz/anchor",target:"_blank",rel:"noopener noreferrer"},ve=t("Anchor"),ye=t(" has emerged as a popular framework for developing programs. Anchor is an opinionated framework, akin to Ruby on Rails, that reduces boilerplate and streamlines the (de)serialization process for Rust-based development."),Pe=n("<p>Programs are usually developed and tested against Localhost and Devnet environments before being deployed to Testnet or Mainnet. Solana supports the following environments:</p><table><thead><tr><th>Cluster Environment</th><th>RPC Connection URL</th></tr></thead><tbody><tr><td>Mainnet-beta</td><td>https://api.mainnet-beta.solana.com</td></tr><tr><td>Testnet</td><td>https://api.testnet.solana.com</td></tr><tr><td>Devnet</td><td>https://api.devnet.solana.com</td></tr><tr><td>Localhost</td><td>Default port: 8899 (e.g. http://localhost:8899, http://192.168.1.88:8899)</td></tr></tbody></table>",2),we=t("Once deployed to an environment, clients can interact with on-chain programs via "),Le={href:"https://docs.solana.com/developing/clients/jsonrpc-api",target:"_blank",rel:"noopener noreferrer"},Se=t("RPC connections"),xe=t(" to the respective cluster."),Fe=e("h3",{id:"deploying-programs",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#deploying-programs","aria-hidden":"true"},"#"),t(" Deploying Programs")],-1),Re=t("Developers can deploy their programs via the "),Ae={href:"https://docs.solana.com/cli/deploy-a-program",target:"_blank",rel:"noopener noreferrer"},Be=t("CLI"),De=t(":"),Te=n(`<div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>solana program deploy <span class="token operator">&lt;</span>PROGRAM_FILEPATH<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,1),Ce=t("When a program is deployed, it is compiled to an "),Ne={href:"https://en.wikipedia.org/wiki/Executable_and_Linkable_Format",target:"_blank",rel:"noopener noreferrer"},Ee=t("ELF shared object"),Ie=t(" (containing BPF bytecode) and uploaded to the Solana cluster. Programs live in accounts (much like everything else on Solana), except these accounts are marked as "),Me=e("code",null,"executable",-1),Ve=t(" and assigned to the BPF Loader. The address of this account is referred to as the "),Oe=e("code",null,"program_id",-1),ze=t(" and is used to reference the program in all future transactions."),je=t("Solana supports multiple BPF Loaders, with the latest being the "),Ue={href:"https://explorer.solana.com/address/BPFLoaderUpgradeab1e11111111111111111111111",target:"_blank",rel:"noopener noreferrer"},qe=t("Upgradable BPF Loader"),Ge=t(". The BPF Loader is responsible for administering the program\u2019s account and making it available to clients via the "),He=e("code",null,"program_id",-1),We=t(". All programs have a single entry point where instruction processing takes place (i.e. "),Je=e("code",null,"process_instruction",-1),Ke=t(") and parameters always include:"),Qe=n('<ul><li><code>program_id</code>: <code>pubkey</code></li><li><code>accounts</code>: <code>array</code>,</li><li><code>instruction_data</code>: <code>byte array</code></li></ul><p>Once invoked, programs are executed by the Solana Runtime.</p><h2 id="other-resources" tabindex="-1"><a class="header-anchor" href="#other-resources" aria-hidden="true">#</a> Other Resources</h2>',3),Xe={href:"https://docs.solana.com/developing/on-chain-programs/overview",target:"_blank",rel:"noopener noreferrer"},Ye=t("Official Documentation"),Ze={href:"https://spl.solana.com/",target:"_blank",rel:"noopener noreferrer"},$e=t("SPL Documentation"),et={href:"https://jstarry.notion.site/Program-deploys-29780c48794c47308d5f138074dd9838",target:"_blank",rel:"noopener noreferrer"},tt=t("Program Deploys by Justin Starry"),ot={href:"https://book.solmeet.dev/notes/solana-starter-kit",target:"_blank",rel:"noopener noreferrer"},rt=t("Solana Starter Kit by Iron Addicted Dog"),nt={href:"https://paulx.dev/blog/2021/01/14/programming-on-solana-an-introduction/",target:"_blank",rel:"noopener noreferrer"},at=t("Programming on Solana by Paulx"),st={href:"https://2501babe.github.io/posts/solana101.html",target:"_blank",rel:"noopener noreferrer"},it=t("An Introduction to the Solana Blockchain by Hana"),dt={href:"https://github.com/coral-xyz/anchor",target:"_blank",rel:"noopener noreferrer"},ct=t("Anchor");function lt(ht,_t){const s=a("RouterLink"),r=a("ExternalLinkIcon");return d(),c(h,null,[p,g,m,e("div",u,[b,e("ul",null,[f,e("li",null,[k,v,y,o(s,{to:"/core-concepts/accounts.html"},{default:l(()=>[P]),_:1}),w]),L,e("li",null,[S,e("a",x,[F,o(r)]),R,e("a",A,[B,o(r)])]),e("li",null,[D,e("a",T,[C,o(r)]),N,e("a",E,[I,o(r)]),M]),V])]),O,z,j,e("p",null,[U,e("a",q,[G,o(r)]),H,e("a",W,[J,o(r)]),K]),e("p",null,[Q,e("a",X,[Y,o(r)]),Z]),e("p",null,[$,e("a",ee,[te,o(r)]),oe,e("a",re,[ne,o(r)]),ae]),se,e("p",null,[ie,e("a",de,[ce,o(r)]),le,e("a",he,[_e,o(r)]),pe,e("a",ge,[me,o(r)]),ue]),be,e("p",null,[fe,e("a",ke,[ve,o(r)]),ye]),Pe,e("p",null,[we,e("a",Le,[Se,o(r)]),xe]),Fe,e("p",null,[Re,e("a",Ae,[Be,o(r)]),De]),Te,e("p",null,[Ce,e("a",Ne,[Ee,o(r)]),Ie,Me,Ve,Oe,ze]),e("p",null,[je,e("a",Ue,[qe,o(r)]),Ge,He,We,Je,Ke]),Qe,e("ul",null,[e("li",null,[e("a",Xe,[Ye,o(r)])]),e("li",null,[e("a",Ze,[$e,o(r)])]),e("li",null,[e("a",et,[tt,o(r)])]),e("li",null,[e("a",ot,[rt,o(r)])]),e("li",null,[e("a",nt,[at,o(r)])]),e("li",null,[e("a",st,[it,o(r)])]),e("li",null,[e("a",dt,[ct,o(r)])])])],64)}var gt=i(_,[["render",lt]]);export{gt as default};
