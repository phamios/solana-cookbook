import{_ as e,r as p,o,c,a as n,b as s,F as l,e as i,d as t}from"./app.07ce7a66.js";var r="/assets/scfsd.cc67ec33.png";const u={},k=i(`<h1 id="feature-parity-testing-ozellik-parite-testi" tabindex="-1"><a class="header-anchor" href="#feature-parity-testing-ozellik-parite-testi" aria-hidden="true">#</a> Feature Parity Testing (\xD6zellik Parite Testi)</h1><p>Program\u0131n\u0131z\u0131 test ederken, \xE7e\u015Fitli k\xFCmelerde ayn\u0131 \u015Fekilde \xE7al\u0131\u015Faca\u011F\u0131n\u0131n g\xFCvencesi, hem kalite hem de beklenen sonu\xE7lar\u0131n \xFCretilmesi i\xE7in esast\u0131r.</p><h2 id="facts-ozet-bilgiler" tabindex="-1"><a class="header-anchor" href="#facts-ozet-bilgiler" aria-hidden="true">#</a> Facts (\xD6zet Bilgiler)</h2><p>:::Bilgi Tablosu</p><p>Features, Solana do\u011Frulay\u0131c\u0131lar\u0131na sunulan ve kullan\u0131lmas\u0131 i\xE7in etkinle\u015Ftirme gerektiren yeteneklerdir. Features bir k\xFCmede (\xF6r. testnet) etkinle\u015Ftirilebilir, ancak ba\u015Fka bir k\xFCmede (\xF6r. ana a\u011F-beta) etkinle\u015Ftirilemez. Yine de; varsay\u0131lan solana-test-validator&#39;\u0131 yerel olarak \xE7al\u0131\u015Ft\u0131r\u0131rken, Solana s\xFCr\xFCm\xFCn\xFCzdeki mevcut t\xFCm \xF6zellikler otomatik olarak etkinle\u015Ftirilir. Sonu\xE7 olarak, yerel olarak test ederken, farkl\u0131 bir k\xFCmede da\u011F\u0131t\u0131rken ve \xE7al\u0131\u015Ft\u0131r\u0131rken testinizin yetenekleri ve sonu\xE7lar\u0131 ayn\u0131 olmayabilir! :::</p><h2 id="scenario-senaryo" tabindex="-1"><a class="header-anchor" href="#scenario-senaryo" aria-hidden="true">#</a> Scenario (Senaryo)</h2><p>\xDC\xE7 (3) talimat i\xE7eren bir i\u015Fleminiz oldu\u011Funu ve her talimat\u0131n yakla\u015F\u0131k 100_000 \u0130\u015Flem Birimi (Compute Unit - CU) t\xFCketti\u011Fini varsayal\u0131m. Bir Solana 1.8.x s\xFCr\xFCm\xFCnde \xE7al\u0131\u015F\u0131rken, talimat CU t\xFCketiminizi a\u015Fa\u011F\u0131dakine benzer \u015Fekilde g\xF6zlemlersiniz:</p><table><thead><tr><th>Instruction</th><th>Starting CU</th><th>Execution</th><th>Remaining CU</th></tr></thead><tbody><tr><td>1</td><td>200_000</td><td>-100_000</td><td>100_000</td></tr><tr><td>2</td><td>200_000</td><td>-100_000</td><td>100_000</td></tr><tr><td>3</td><td>200_000</td><td>-100_000</td><td>100_000</td></tr></tbody></table><p>Solana 1.9.2&#39;de, bir i\u015Flemin varsay\u0131lan olarak 200_000 CU b\xFCt\xE7esine sahip oldu\u011Fu ve kaps\xFCllenmi\u015F talimatlar\u0131n bu i\u015Flem b\xFCt\xE7esinden \xE7ekildi\u011Fi &#39;transaction i\u015Flem s\u0131n\u0131r\u0131&#39; ad\u0131 verilen bir \xF6zellik vard\u0131r. Yukar\u0131da belirtildi\u011Fi gibi ayn\u0131 i\u015Flemi \xE7al\u0131\u015Ft\u0131rmak \xE7ok farkl\u0131 davran\u0131\u015Flara sahip olacakt\u0131r:</p><table><thead><tr><th>Instruction</th><th>Starting CU</th><th>Execution</th><th>Remaining CU</th></tr></thead><tbody><tr><td>1</td><td>200_000</td><td>-100_000</td><td>100_000</td></tr><tr><td>2</td><td>100_000</td><td>-100_000</td><td>0</td></tr><tr><td>3</td><td>0</td><td>HATA!!!</td><td>HATA!!!</td></tr></tbody></table><p>Evet! Bundan habersiz olsayd\u0131n\u0131z, talimat davran\u0131\u015F\u0131n\u0131zda buna neden olacak bir de\u011Fi\u015Fiklik olmad\u0131\u011F\u0131 i\xE7in muhtemelen hayal k\u0131r\u0131kl\u0131\u011F\u0131na u\u011Frars\u0131n\u0131z. Devnet&#39;te iyi \xE7al\u0131\u015Ft\u0131, ancak yerel olarak ba\u015Far\u0131s\u0131z m\u0131 oldu?!?</p><p>\xD6rne\u011Fin 300_000 CU gibi genel \u0130\u015Flem b\xFCt\xE7esini art\u0131rma ve ak\u0131l sa\u011Fl\u0131\u011F\u0131n\u0131z\u0131 koruma olana\u011F\u0131 vard\u0131r, ancak bu, Feature Parity (\xD6zellik E\u015Fli\u011Fi) ile testin neden herhangi bir kar\u0131\u015F\u0131kl\u0131\u011F\u0131 \xF6nlemek i\xE7in proaktif bir yol sa\u011Flad\u0131\u011F\u0131n\u0131 g\xF6sterir.</p><h2 id="feature-status-ozellik-durumu" tabindex="-1"><a class="header-anchor" href="#feature-status-ozellik-durumu" aria-hidden="true">#</a> Feature Status (\xD6zellik Durumu)</h2><p>Solana feature status komutuyla belirli bir k\xFCme i\xE7in hangi \xF6zelliklerin etkinle\u015Ftirildi\u011Fini kontrol etmek olduk\xE7a kolayd\u0131r.</p><div class="language-console ext-console line-numbers-mode"><pre class="language-console"><code>solana feature status -ud   // Displays by feature status for devnet
solana feature status -ut   // Displays for testnet
solana feature status -um   // Displays for mainnet-beta
solana feature status -ul   // Displays for local, requires running solana-test-validator
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Alternatif olarak, k\xFCmeler genelinde t\xFCm \xF6zellik durumunu g\xF6zlemlemek i\xE7in <code>solana-test-validator</code>&#39;\u0131n \xE7al\u0131\u015Fmas\u0131n\u0131 gerektirmeyen ve a\u015Fa\u011F\u0131daki ekranda g\xF6sterilen <a href="#resources">scfsd</a> gibi bir ara\xE7 kullanabilirsiniz:</p><img src="`+r+`" alt="Feature Status Heatmap"><h2 id="parity-testing-parite-testi" tabindex="-1"><a class="header-anchor" href="#parity-testing-parite-testi" aria-hidden="true">#</a> Parity Testing (Parite Testi)</h2><p>Yukar\u0131da belirtildi\u011Fi gibi, <code>solana-test-validator</code>, <strong>t\xFCm</strong> \xF6zellikleri otomatik olarak etkinle\u015Ftirir. &quot;Devnet, testnet ve hatta mainnet-beta ile paritesi olan bir ortamda yerel olarak nas\u0131l test edebilirim?&quot; sorusuna cevap verecek olursak:</p><p>\xC7\xF6z\xFCm: \xD6zelliklerin devre d\u0131\u015F\u0131 b\u0131rak\u0131lmas\u0131na izin vermek i\xE7in Solana 1.9.6&#39;ya PR&#39;ler eklendi:</p><div class="language-console ext-console line-numbers-mode"><pre class="language-console"><code>solana-test-validator --deactivate-feature &lt;FEATURE_PUBKEY&gt; ...
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="simple-demonstration-basit-gosterim" tabindex="-1"><a class="header-anchor" href="#simple-demonstration-basit-gosterim" aria-hidden="true">#</a> Simple Demonstration (Basit G\xF6sterim)</h2><p>Ald\u0131\u011F\u0131 verileri giri\u015F noktas\u0131nda kaydeden basit bir program\u0131n\u0131z oldu\u011Funu varsayal\u0131m. Ve program\u0131n\u0131z i\xE7in iki (2) talimat ekleyen bir i\u015Flemi test ediyorsunuz.</p><h3 id="all-features-activated-tum-ozellikler-aktiflestirildi" tabindex="-1"><a class="header-anchor" href="#all-features-activated-tum-ozellikler-aktiflestirildi" aria-hidden="true">#</a> All features activated (T\xFCm \xF6zellikler aktifle\u015Ftirildi)</h3><ol><li>Test do\u011Frulay\u0131c\u0131y\u0131 bir terminalde ba\u015Flat\u0131rs\u0131n\u0131z:</li></ol><div class="language-console ext-console line-numbers-mode"><pre class="language-console"><code>solana config set -ul
solana-test-validator -l ./ledger --bpf-program ADDRESS target/deploy/PROGNAME.so --reset\`
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="2"><li>Ba\u015Fka bir terminalde g\xFCnl\xFCk aktar\u0131c\u0131y\u0131 ba\u015Flat\u0131rs\u0131n\u0131z:</li></ol><div class="language-console ext-console line-numbers-mode"><pre class="language-console"><code>solana logs
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>Daha sonra i\u015Fleminizi y\xFCr\xFCt\xFCrs\xFCn\xFCz. G\xFCnl\xFCk terminalinde benzer bir \u015Fey g\xF6r\xFCrs\xFCn\xFCz (netlik i\xE7in d\xFCzenlenmi\u015Ftir):</li></ol><div class="language-console ext-console line-numbers-mode"><pre class="language-console"><code>Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc invoke [1]
Program log: process_instruction: PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc: 0 accounts, data=[0]
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc consumed 12843 of 200000 compute units
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc success
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc invoke [1]
Program log: process_instruction: PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc: 0 accounts, data=[1]
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc consumed 12843 of 187157 compute units
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc success[
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>&#39;transaction i\u015Flem s\u0131n\u0131r\u0131&#39; \xF6zelli\u011Fimiz varsay\u0131lan olarak otomatik olarak etkinle\u015Ftirildi\u011Finden, her talimat\u0131n CU&#39;yu ba\u015Flang\u0131\xE7 \u0130\u015Flem b\xFCt\xE7esi olan 200_000 CU&#39;dan a\u015Fa\u011F\u0131 \xE7ekti\u011Fini g\xF6zlemleriz.</p><h3 id="selective-features-deactivated-secici-ozellikler-devre-d\u0131s\u0131-b\u0131rak\u0131ld\u0131" tabindex="-1"><a class="header-anchor" href="#selective-features-deactivated-secici-ozellikler-devre-d\u0131s\u0131-b\u0131rak\u0131ld\u0131" aria-hidden="true">#</a> Selective features deactivated (Se\xE7ici \xF6zellikler devre d\u0131\u015F\u0131 b\u0131rak\u0131ld\u0131)</h3><p>Bu \xE7al\u0131\u015Ft\u0131rma i\xE7in, CU b\xFCt\xE7e davran\u0131\u015F\u0131n\u0131n devnet&#39;te y\xFCr\xFCt\xFClenle ayn\u0131 olmas\u0131 i\xE7in \xE7al\u0131\u015Ft\u0131rmak istiyoruz. Feature Status\u2019ta a\xE7\u0131klanan ara\xE7(lar)\u0131 kullanarak, i\u015Flem genelinde i\u015Flem \xFCst s\u0131n\u0131r\u0131 public key\u2019i izole eder ve test do\u011Frulay\u0131c\u0131 ba\u015Flang\u0131c\u0131nda <code>--deactivate-feature</code> kullan\u0131r\u0131z.</p><div class="language-console ext-console line-numbers-mode"><pre class="language-console"><code>solana-test-validator -l ./ledger --deactivate-feature 5ekBxc8itEnPv4NzGJtr8BVVQLNMQuLMNQQj7pHoLNZ9 --bpf-program target/deploy/PROGNAME.so --reset\`
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Art\u0131k g\xFCnl\xFCklerimizde, talimatlar\u0131m\u0131z\u0131n \u015Fu anda t\xFCm yukar\u0131 ak\u0131\u015F k\xFCmelerinde durum olan kendi 200_000 CU b\xFCt\xE7esine (a\xE7\u0131kl\u0131k i\xE7in d\xFCzenlenmi\u015F) sahip oldu\u011Funu g\xF6r\xFCyoruz:</p><div class="language-console ext-console line-numbers-mode"><pre class="language-console"><code>Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc invoke [1]
Program log: process_instruction: PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc: 0 accounts, data=[0]
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc consumed 12843 of 200000 compute units
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc success
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc invoke [1]
Program log: process_instruction: PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc: 0 accounts, data=[0]
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc consumed 12843 of 200000 compute units
Program PWDnx8LkjJUn9bAVzG6Fp6BuvB41x7DkBZdo9YLMGcc success
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>Full Parity Testing (Tam Parite Testi) Hen\xFCz etkinle\u015Ftirilmemi\u015F her bir \xF6zelli\u011Fi tan\u0131mlayarak ve <code>solana-test-validator</code>&#39;\u0131 \xE7a\u011F\u0131r\u0131rken her biri i\xE7in bir <code>--deactivate-feature &lt;FEATURE_PUBKEY&gt;</code> ekleyerek belirli bir k\xFCme ile tam e\u015Flilik i\xE7inde olabilirsiniz:</p><div class="language-console ext-console line-numbers-mode"><pre class="language-console"><code>solana-test-validator --deactivate-feature PUBKEY_1 --deactivate-feature PUBKEY_2 ...
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Alternatif olarak, scfsd, bir k\xFCmenin do\u011Frudan <code>solana-test-validator</code> ba\u015Flang\u0131c\u0131na beslenmesi i\xE7in t\xFCm devre d\u0131\u015F\u0131 b\u0131rak\u0131lm\u0131\u015F \xF6zellik setinin \xE7\u0131kt\u0131s\u0131n\u0131 almak i\xE7in bir komut anahtar\u0131 sa\u011Flar:</p><div class="language-console ext-console line-numbers-mode"><pre class="language-console"><code>solana-test-validator -l ./.ledger $(scfsd -c devnet -k -t)
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Do\u011Frulay\u0131c\u0131 \xE7al\u0131\u015F\u0131rken ba\u015Fka bir terminal a\xE7arsan\u0131z ve <code>solana feature status</code>\u2019\u0131n devnet&#39;te devre d\u0131\u015F\u0131 bulunan \xF6zelliklerin devre d\u0131\u015F\u0131 oldu\u011Funu g\xF6receksiniz.</p><h2 id="full-parity-testing-programmatically-programl\u0131-olarak-tam-parite-testi" tabindex="-1"><a class="header-anchor" href="#full-parity-testing-programmatically-programl\u0131-olarak-tam-parite-testi" aria-hidden="true">#</a> Full Parity Testing Programmatically (Programl\u0131 Olarak Tam Parite Testi)</h2><p>Test do\u011Frulay\u0131c\u0131n\u0131n kendi test kodu i\xE7inde \xE7al\u0131\u015Ft\u0131r\u0131lmas\u0131n\u0131 kontrol edenler i\xE7in, TestValidatorGenesis kullan\u0131larak test do\u011Frulay\u0131c\u0131 etkinle\u015Ftirilen/devre d\u0131\u015F\u0131 b\u0131rak\u0131lan \xF6zelliklerin de\u011Fi\u015Ftirilmesi m\xFCmk\xFCnd\xFCr. Solana 1.9.6 ile bunu desteklemek i\xE7in do\u011Frulay\u0131c\u0131 olu\u015Fturucuya bir i\u015Flev eklendi.</p><p>Program klas\xF6r\xFCn\xFCz\xFCn k\xF6k\xFCnde, <code>tests</code> adl\u0131 yeni bir klas\xF6r olu\u015Fturun ve bir <code>parity_test.rs</code> dosyas\u0131 ekleyin. \u0130\u015Fte her test taraf\u0131ndan kullan\u0131lan baz\u0131 genel fonksiyonlar:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">/// Setup the test validator passing features</span>
<span class="token comment">/// you want to deactivate before running transactions</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">setup_validator</span><span class="token punctuation">(</span>
    invalidate_features<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Pubkey</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token class-name">TestValidator</span><span class="token punctuation">,</span> <span class="token class-name">Keypair</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token namespace">error<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Extend environment variable to include our program location</span>
    <span class="token namespace">std<span class="token punctuation">::</span>env<span class="token punctuation">::</span></span><span class="token function">set_var</span><span class="token punctuation">(</span><span class="token string">&quot;BPF_OUT_DIR&quot;</span><span class="token punctuation">,</span> <span class="token constant">PROG_PATH</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Instantiate the test validator</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> test_validator <span class="token operator">=</span> <span class="token class-name">TestValidatorGenesis</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Once instantiated, TestValidatorGenesis configuration functions follow</span>
    <span class="token comment">// a builder pattern enabling chaining of settings function calls</span>
    <span class="token keyword">let</span> <span class="token punctuation">(</span>test_validator<span class="token punctuation">,</span> kp<span class="token punctuation">)</span> <span class="token operator">=</span> test_validator
        <span class="token comment">// Set the ledger path and name</span>
        <span class="token comment">// maps to \`solana-test-validator --ledger &lt;DIR&gt;\`</span>
        <span class="token punctuation">.</span><span class="token function">ledger_path</span><span class="token punctuation">(</span><span class="token constant">LEDGER_PATH</span><span class="token punctuation">)</span>
        <span class="token comment">// Load our program. Ignored if reusing ledger</span>
        <span class="token comment">// maps to \`solana-test-validator --bpf-program &lt;ADDRESS_OR_PATH BPF_PROGRAM.SO&gt;\`</span>
        <span class="token punctuation">.</span><span class="token function">add_program</span><span class="token punctuation">(</span><span class="token constant">PROG_NAME</span><span class="token punctuation">,</span> <span class="token constant">PROG_KEY</span><span class="token punctuation">)</span>
        <span class="token comment">// Identify features to deactivate. Ignored if reusing ledger</span>
        <span class="token comment">// maps to \`solana-test-validator --deactivate-feature &lt;FEATURE_PUBKEY&gt;\`</span>
        <span class="token punctuation">.</span><span class="token function">deactivate_features</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>invalidate_features<span class="token punctuation">)</span>
        <span class="token comment">// Start the test validator</span>
        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span>test_validator<span class="token punctuation">,</span> kp<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/// Convenience function to remove existing ledger before TestValidatorGenesis setup</span>
<span class="token comment">/// maps to \`solana-test-validator ... --reset\`</span>
<span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">clean_ledger_setup_validator</span><span class="token punctuation">(</span>
    invalidate_features<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Pubkey</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token class-name">TestValidator</span><span class="token punctuation">,</span> <span class="token class-name">Keypair</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token namespace">error<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token class-name">PathBuf</span><span class="token punctuation">::</span><span class="token function">from_str</span><span class="token punctuation">(</span><span class="token constant">LEDGER_PATH</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token namespace">std<span class="token punctuation">::</span>fs<span class="token punctuation">::</span></span><span class="token function">remove_dir_all</span><span class="token punctuation">(</span><span class="token constant">LEDGER_PATH</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">setup_validator</span><span class="token punctuation">(</span>invalidate_features<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/// Submits a transaction with programs instruction</span>
<span class="token comment">/// Boiler plate</span>
<span class="token keyword">fn</span> <span class="token function-definition function">submit_transaction</span><span class="token punctuation">(</span>
    rpc_client<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">RpcClient</span><span class="token punctuation">,</span>
    wallet_signer<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token keyword">dyn</span> <span class="token class-name">Signer</span><span class="token punctuation">,</span>
    instructions<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token operator">&lt;</span><span class="token class-name">Instruction</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token class-name">Signature</span><span class="token punctuation">,</span> <span class="token class-name">Box</span><span class="token operator">&lt;</span><span class="token keyword">dyn</span> <span class="token namespace">std<span class="token punctuation">::</span>error<span class="token punctuation">::</span></span><span class="token class-name">Error</span><span class="token operator">&gt;&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> transaction <span class="token operator">=</span>
        <span class="token class-name">Transaction</span><span class="token punctuation">::</span><span class="token function">new_unsigned</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>instructions<span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wallet_signer<span class="token punctuation">.</span><span class="token function">pubkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> recent_blockhash <span class="token operator">=</span> rpc_client
        <span class="token punctuation">.</span><span class="token function">get_latest_blockhash</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>err<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;error: unable to get recent blockhash: {}&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    transaction
        <span class="token punctuation">.</span><span class="token function">try_sign</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token macro property">vec!</span><span class="token punctuation">[</span>wallet_signer<span class="token punctuation">]</span><span class="token punctuation">,</span> recent_blockhash<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>err<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;error: failed to sign transaction: {}&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> signature <span class="token operator">=</span> rpc_client
        <span class="token punctuation">.</span><span class="token function">send_and_confirm_transaction</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>transaction<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>err<span class="token closure-punctuation punctuation">|</span></span> <span class="token macro property">format!</span><span class="token punctuation">(</span><span class="token string">&quot;error: send transaction: {}&quot;</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span>signature<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br></div></div><p>\u015Eimdi, <code>mod test {...}</code> g\xF6vdesine test i\u015Flevleri ekleyebiliriz. Bu sayede, varsay\u0131lan do\u011Frulay\u0131c\u0131 kurulumunu (t\xFCm \xF6zellikler etkin) g\xF6sterebilir ve ard\u0131ndan <code>transaction wide compute cap</code>\u2019i devre d\u0131\u015F\u0131 b\u0131rakibiliriz (<code>solana-test-validator</code> \xE7al\u0131\u015Ft\u0131ran \xF6nceki \xF6rneklerde oldu\u011Fu gibi).</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[test]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">test_deactivate_tx_cu_pass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Run with all features activated except &#39;transaction wide compute cap&#39;</span>
    <span class="token keyword">let</span> inv_feat <span class="token operator">=</span> <span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token constant">TXWIDE_LIMITS</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// Start validator with clean (new) ledger</span>
    <span class="token keyword">let</span> <span class="token punctuation">(</span>test_validator<span class="token punctuation">,</span> main_payer<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">clean_ledger_setup_validator</span><span class="token punctuation">(</span>inv_feat<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Get the RpcClient</span>
    <span class="token keyword">let</span> connection <span class="token operator">=</span> test_validator<span class="token punctuation">.</span><span class="token function">get_rpc_client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Capture our programs log statements</span>
    <span class="token namespace">solana_logger<span class="token punctuation">::</span></span><span class="token function">setup_with_default</span><span class="token punctuation">(</span><span class="token string">&quot;solana_runtime::message=debug&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// This example doesn&#39;t require sending any accounts to program</span>
    <span class="token keyword">let</span> accounts <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// Build instruction array and submit transaction</span>
    <span class="token keyword">let</span> txn <span class="token operator">=</span> <span class="token function">submit_transaction</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span>connection<span class="token punctuation">,</span>
        <span class="token operator">&amp;</span>main_payer<span class="token punctuation">,</span>
        <span class="token punctuation">[</span>
            <span class="token comment">// This instruction adds CU to transaction budget (1.9.2) but does nothing</span>
            <span class="token comment">// when we deactivate the &#39;transaction wide compute cap&#39; feature</span>
            <span class="token class-name">ComputeBudgetInstruction</span><span class="token punctuation">::</span><span class="token function">request_units</span><span class="token punctuation">(</span><span class="token number">400_000u32</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token comment">// Add two (2) instructions to transaction</span>
            <span class="token comment">// Replace with instructions that make sense for your program</span>
            <span class="token comment">// You will see that each instruction has the 1.8.x 200_000 CU per budget</span>
            <span class="token class-name">Instruction</span><span class="token punctuation">::</span><span class="token function">new_with_borsh</span><span class="token punctuation">(</span><span class="token constant">PROG_KEY</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token number">0u8</span><span class="token punctuation">,</span> accounts<span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Instruction</span><span class="token punctuation">::</span><span class="token function">new_with_borsh</span><span class="token punctuation">(</span><span class="token constant">PROG_KEY</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token number">1u8</span><span class="token punctuation">,</span> accounts<span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span>
        <span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert!</span><span class="token punctuation">(</span>txn<span class="token punctuation">.</span><span class="token function">is_ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><p>Alternatif olarak, <a href="#resources">scfs engine gadget</a>&#39;\u0131, bir k\xFCme i\xE7in tam bir devre d\u0131\u015F\u0131 b\u0131rak\u0131lm\u0131\u015F \xF6zellikler vekt\xF6r\xFC \xFCretebilir. A\u015Fa\u011F\u0131daki, devnet i\xE7in t\xFCm devre d\u0131\u015F\u0131 b\u0131rak\u0131lm\u0131\u015F \xF6zelliklerin bir listesini almak i\xE7in bu motorun kullan\u0131ld\u0131\u011F\u0131n\u0131 g\xF6sterir.</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token attribute attr-name">#[test]</span>
<span class="token keyword">fn</span> <span class="token function-definition function">test_devnet_parity_pass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Use gadget-scfs to get all deactivated features from devnet</span>
    <span class="token comment">// must have \`gadgets-scfs = &quot;0.2.0&quot; in Cargo.toml to use</span>
    <span class="token comment">// Here we setup for a run that samples features only</span>
    <span class="token comment">// from devnet</span>
    <span class="token keyword">let</span> <span class="token keyword">mut</span> my_matrix <span class="token operator">=</span> <span class="token class-name">ScfsMatrix</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">ScfsCriteria</span> <span class="token punctuation">{</span>
        clusters<span class="token punctuation">:</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token macro property">vec!</span><span class="token punctuation">[</span><span class="token constant">SCFS_DEVNET</span><span class="token punctuation">.</span><span class="token function">to_string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">..</span><span class="token class-name">Default</span><span class="token punctuation">::</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Run the sampler matrix</span>
    <span class="token macro property">assert!</span><span class="token punctuation">(</span>my_matrix<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">is_ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Get all deactivated features</span>
    <span class="token keyword">let</span> deactivated <span class="token operator">=</span> my_matrix
        <span class="token punctuation">.</span><span class="token function">get_features</span><span class="token punctuation">(</span><span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token class-name">ScfsMatrix</span><span class="token punctuation">::</span>any_inactive<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Confirm we have them</span>
    <span class="token macro property">assert_ne!</span><span class="token punctuation">(</span>deactivated<span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Setup test validator and logging while deactivating all</span>
    <span class="token comment">// features that are deactivated in devnet</span>
    <span class="token keyword">let</span> <span class="token punctuation">(</span>test_validator<span class="token punctuation">,</span> main_payer<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">clean_ledger_setup_validator</span><span class="token punctuation">(</span>deactivated<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> connection <span class="token operator">=</span> test_validator<span class="token punctuation">.</span><span class="token function">get_rpc_client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token namespace">solana_logger<span class="token punctuation">::</span></span><span class="token function">setup_with_default</span><span class="token punctuation">(</span><span class="token string">&quot;solana_runtime::message=debug&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> accounts <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> txn <span class="token operator">=</span> <span class="token function">submit_transaction</span><span class="token punctuation">(</span>
        <span class="token operator">&amp;</span>connection<span class="token punctuation">,</span>
        <span class="token operator">&amp;</span>main_payer<span class="token punctuation">,</span>
        <span class="token punctuation">[</span>
            <span class="token comment">// Add two (2) instructions to transaction</span>
            <span class="token comment">// Replace with instructions that make sense for your program</span>
            <span class="token class-name">Instruction</span><span class="token punctuation">::</span><span class="token function">new_with_borsh</span><span class="token punctuation">(</span><span class="token constant">PROG_KEY</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token number">0u8</span><span class="token punctuation">,</span> accounts<span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">Instruction</span><span class="token punctuation">::</span><span class="token function">new_with_borsh</span><span class="token punctuation">(</span><span class="token constant">PROG_KEY</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span><span class="token number">1u8</span><span class="token punctuation">,</span> accounts<span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">]</span>
        <span class="token punctuation">.</span><span class="token function">to_vec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token macro property">assert!</span><span class="token punctuation">(</span>txn<span class="token punctuation">.</span><span class="token function">is_ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p>Mutlu Testler!</p><h2 id="resources" tabindex="-1"><a class="header-anchor" href="#resources" aria-hidden="true">#</a> Resources</h2>`,51),m={href:"https://github.com/FrankC01/solana-gadgets/tree/main/rust/scfsd",target:"_blank",rel:"noopener noreferrer"},d=t("scfsd"),b={href:"https://github.com/FrankC01/solana-gadgets/tree/main/rust/gadgets-scfs",target:"_blank",rel:"noopener noreferrer"},g=t("gadget-scfs");function v(f,h){const a=p("ExternalLinkIcon");return o(),c(l,null,[k,n("p",null,[n("a",m,[d,s(a)])]),n("p",null,[n("a",b,[g,s(a)])])],64)}var y=e(u,[["render",v]]);export{y as default};
