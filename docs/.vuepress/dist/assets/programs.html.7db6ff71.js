import{_ as n,e as s}from"./app.07ce7a66.js";const a={},p=s(`<h1 id="writing-programs-programlar\u0131-yazma" tabindex="-1"><a class="header-anchor" href="#writing-programs-programlar\u0131-yazma" aria-hidden="true">#</a> Writing Programs (Programlar\u0131 Yazma)</h1><h2 id="how-to-transfer-sol-in-a-program-programda-sol-aktarma" tabindex="-1"><a class="header-anchor" href="#how-to-transfer-sol-in-a-program-programda-sol-aktarma" aria-hidden="true">#</a> How to transfer SOL in a program (Programda SOL aktarma)</h2><p>Solana Program\u0131n\u0131z, Sistem program\u0131n\u0131 &#39;\xE7a\u011F\u0131rmadan&#39;, lamp\u2019lar\u0131 bir account&#39;tan di\u011Ferine aktarabilir. Temel kural, program\u0131n\u0131z\u0131n, program\u0131n\u0131z\u0131n sahip oldu\u011Fu herhangi bir account&#39;tan herhangi bir account&#39;a lamp aktarabilmesidir.</p><p>Al\u0131c\u0131 account&#39;\u0131n\u0131n, program\u0131n\u0131za ait bir account olmas\u0131 gerekmez.</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">/// Transfers lamports from one account (must be program owned)</span>
<span class="token comment">/// to another account. The recipient can by any account</span>
<span class="token keyword">fn</span> <span class="token function-definition function">transfer_service_fee_lamports</span><span class="token punctuation">(</span>
    from_account<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">AccountInfo</span><span class="token punctuation">,</span>
    to_account<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">AccountInfo</span><span class="token punctuation">,</span>
    amount_of_lamports<span class="token punctuation">:</span> <span class="token keyword">u64</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">ProgramResult</span> <span class="token punctuation">{</span>
    <span class="token comment">// Does the from account have enough lamports to transfer?</span>
    <span class="token keyword">if</span> <span class="token operator">*</span><span class="token operator">*</span>from_account<span class="token punctuation">.</span><span class="token function">try_borrow_lamports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">&lt;</span> amount_of_lamports <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">CustomError</span><span class="token punctuation">::</span><span class="token class-name">InsufficientFundsForTransaction</span><span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Debit from_account and credit to_account</span>
    <span class="token operator">*</span><span class="token operator">*</span>from_account<span class="token punctuation">.</span><span class="token function">try_borrow_mut_lamports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">-=</span> amount_of_lamports<span class="token punctuation">;</span>
    <span class="token operator">*</span><span class="token operator">*</span>to_account<span class="token punctuation">.</span><span class="token function">try_borrow_mut_lamports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span> <span class="token operator">+=</span> amount_of_lamports<span class="token punctuation">;</span>
    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/// Primary function handler associated with instruction sent</span>
<span class="token comment">/// to your program</span>
<span class="token keyword">fn</span> <span class="token function-definition function">instruction_handler</span><span class="token punctuation">(</span>accounts<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">AccountInfo</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">ProgramResult</span> <span class="token punctuation">{</span>
    <span class="token comment">// Get the &#39;from&#39; and &#39;to&#39; accounts</span>
    <span class="token keyword">let</span> account_info_iter <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> accounts<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> from_account <span class="token operator">=</span> <span class="token function">next_account_info</span><span class="token punctuation">(</span>account_info_iter<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> to_service_account <span class="token operator">=</span> <span class="token function">next_account_info</span><span class="token punctuation">(</span>account_info_iter<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token comment">// Extract a service &#39;fee&#39; of 5 lamports for performing this instruction</span>
    <span class="token function">transfer_service_fee_lamports</span><span class="token punctuation">(</span>from_account<span class="token punctuation">,</span> to_service_account<span class="token punctuation">,</span> <span class="token number">5u64</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token comment">// Perform the primary instruction</span>
    <span class="token comment">// ... etc.</span>

    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h2 id="how-to-get-clock-in-a-program-programlarda-saat" tabindex="-1"><a class="header-anchor" href="#how-to-get-clock-in-a-program-programlarda-saat" aria-hidden="true">#</a> How to get clock in a program (Programlarda saat)</h2><p>Saat\u2019e eri\u015Fmek iki \u015Fekilde yap\u0131labilir:</p><ol><li><code>SYSVAR_CLOCK_PUBKEY</code>&#39;i bir talimat i\xE7inde bir hesap olarak ge\xE7irme</li><li>Saate do\u011Frudan bir talimat\u0131n i\xE7inden eri\u015Fme.</li></ol><p>Her iki y\xF6ntemi de bilmek g\xFCzel, \xE7\xFCnk\xFC baz\u0131 eski programlar hala <code>SYSVAR_CLOCK_PUBKEY</code>&#39;i bir account olarak bekliyor.</p><h3 id="passing-clock-as-an-account-inside-an-instruction-saati-bir-intstruction-icinde-bir-hesap-olarak-gecirme" tabindex="-1"><a class="header-anchor" href="#passing-clock-as-an-account-inside-an-instruction-saati-bir-intstruction-icinde-bir-hesap-olarak-gecirme" aria-hidden="true">#</a> Passing Clock as an account inside an instruction (Saati bir intstruction i\xE7inde bir hesap olarak ge\xE7irme)</h3><p>Ba\u015Flatma ve sysvar pubkey i\xE7in bir account alan bir talimat olu\u015Ftural\u0131m.</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> clock <span class="token operator">=</span> <span class="token class-name">Clock</span><span class="token punctuation">::</span><span class="token function">from_account_info</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sysvar_clock_pubkey<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> current_timestamp <span class="token operator">=</span> clock<span class="token punctuation">.</span>unix_timestamp<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>\u015Eimdi saatin sysvar genel adresini client arac\u0131l\u0131\u011F\u0131yla iletiyoruz.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> programId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PublicKey</span><span class="token punctuation">(</span>
    <span class="token string">&quot;77ezihTV6mTh2Uf3ggwbYF2NyGJJ5HHah1GrdowWJVD3&quot;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Passing Clock Sys Var</span>
  <span class="token keyword">const</span> passClockIx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionInstruction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    programId<span class="token operator">:</span> programId<span class="token punctuation">,</span>
    keys<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        isSigner<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        isWritable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        pubkey<span class="token operator">:</span> helloAccount<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        is_signer<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        is_writable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        pubkey<span class="token operator">:</span> <span class="token constant">SYSVAR_CLOCK_PUBKEY</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> transaction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  transaction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>passClockIx<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> txHash <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">sendTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> <span class="token punctuation">[</span>
    feePayer<span class="token punctuation">,</span>
    helloAccount<span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Transaction succeeded. TxHash: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>txHash<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h3 id="accessing-clock-directly-inside-an-instruction-saate-dogrudan-bir-instruction-icinden-erisme" tabindex="-1"><a class="header-anchor" href="#accessing-clock-directly-inside-an-instruction-saate-dogrudan-bir-instruction-icinden-erisme" aria-hidden="true">#</a> Accessing Clock directly inside an instruction (Saate do\u011Frudan bir instruction i\xE7inden eri\u015Fme)</h3><p>Ayn\u0131 komutu client taraf\u0131nda <code>SYSVAR_CLOCK_PUBKEY</code> beklemeden olu\u015Ftural\u0131m.</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> clock <span class="token operator">=</span> <span class="token class-name">Clock</span><span class="token punctuation">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> current_timestamp <span class="token operator">=</span> clock<span class="token punctuation">.</span>unix_timestamp<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>Client taraf\u0131 talimat\u0131, \u015Fimdi yaln\u0131zca devlet ve \xF6deyen account&#39;lar\u0131 iletmesi gerekiyor.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> programId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PublicKey</span><span class="token punctuation">(</span>
    <span class="token string">&quot;4ZEdbCtb5UyCSiAMHV5eSHfyjq3QwbG3yXb6oHD7RYjk&quot;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// No more requirement to pass clock sys var key</span>
  <span class="token keyword">const</span> initAccountIx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionInstruction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    programId<span class="token operator">:</span> programId<span class="token punctuation">,</span>
    keys<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        isSigner<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        isWritable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        pubkey<span class="token operator">:</span> helloAccount<span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> transaction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  transaction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>initAccountIx<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> txHash <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">sendTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> <span class="token punctuation">[</span>
    feePayer<span class="token punctuation">,</span>
    helloAccount<span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Transaction succeeded. TxHash: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>txHash<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><h2 id="how-to-change-account-size-account-boyutu-degistirme" tabindex="-1"><a class="header-anchor" href="#how-to-change-account-size-account-boyutu-degistirme" aria-hidden="true">#</a> How to change account size (Account boyutu de\u011Fi\u015Ftirme)</h2><p><code>Realloc</code>&#39;u kullanarak bir programa ait account&#39;\u0131n boyutunu de\u011Fi\u015Ftirebilirsiniz. <code>realloc</code>, bir account&#39;\u0131 10 KB&#39;a kadar yeniden boyutland\u0131rabilir. Bir account&#39;\u0131n boyutunu art\u0131rmak i\xE7in <code>realloc</code>&#39;u kulland\u0131\u011F\u0131n\u0131zda, o account&#39;\u0131 rent\u2019den muaf tutmak i\xE7in lamp transferleri yapman\u0131z gerekir.</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token comment">// adding a publickey to the account</span>
<span class="token keyword">let</span> new_size <span class="token operator">=</span> pda_account<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">len</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> rent <span class="token operator">=</span> <span class="token class-name">Rent</span><span class="token punctuation">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> new_minimum_balance <span class="token operator">=</span> rent<span class="token punctuation">.</span><span class="token function">minimum_balance</span><span class="token punctuation">(</span>new_size<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> lamports_diff <span class="token operator">=</span> new_minimum_balance<span class="token punctuation">.</span><span class="token function">saturating_sub</span><span class="token punctuation">(</span>pda_account<span class="token punctuation">.</span><span class="token function">lamports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">invoke</span><span class="token punctuation">(</span>
    <span class="token operator">&amp;</span><span class="token namespace">system_instruction<span class="token punctuation">::</span></span><span class="token function">transfer</span><span class="token punctuation">(</span>funding_account<span class="token punctuation">.</span>key<span class="token punctuation">,</span> pda_account<span class="token punctuation">.</span>key<span class="token punctuation">,</span> lamports_diff<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">&amp;</span><span class="token punctuation">[</span>
        funding_account<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        pda_account<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        system_program<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

pda_account<span class="token punctuation">.</span><span class="token function">realloc</span><span class="token punctuation">(</span>new_size<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="how-to-do-cross-program-invocation-capraz-program-cag\u0131rma" tabindex="-1"><a class="header-anchor" href="#how-to-do-cross-program-invocation-capraz-program-cag\u0131rma" aria-hidden="true">#</a> How to do Cross Program Invocation (\xC7apraz Program \xC7a\u011F\u0131rma)</h2><p>Bir Cross Program Invocation(\xE7apraz program \xE7a\u011F\u0131rma), program\u0131m\u0131z\u0131n i\xE7ine ba\u015Fka bir program\u0131n talimat\u0131n\u0131 \xE7a\u011F\u0131rmak i\xE7in basit\xE7e yerle\u015Ftirilir. A\xE7\u0131klanacak en iyi \xF6rnek, Uniswap&#39;\u0131n <code>swap</code>(takas) i\u015Flevidir. <code>UniswapV2Router</code> s\xF6zle\u015Fmesi, takas i\xE7in gerekli mant\u0131\u011F\u0131 \xE7a\u011F\u0131r\u0131r ve bir ki\u015Fiden di\u011Ferine takas yapmak i\xE7in <code>ERC20</code> s\xF6zle\u015Fmesinin transfer fonksiyonunu \xE7a\u011F\u0131r\u0131r. Ayn\u0131 \u015Fekilde, bir program\u0131n talimat\u0131n\u0131 \xE7ok say\u0131da amaca sahip olarak adland\u0131rabiliriz.</p><p><code>SPL Token Program&#39;s transfer</code> talimat\u0131 olan ilk \xF6rne\u011Fimize bir g\xF6z atal\u0131m. Bir transferin ger\xE7ekle\u015Fmesi i\xE7in ihtiya\xE7 duyaca\u011F\u0131m\u0131z gerekli account&#39;lar:</p><ol><li>Kaynak Simge Hesab\u0131 (Tokenlar\u0131m\u0131z\u0131 tuttu\u011Fumuz account)</li><li>Hedef Token Hesab\u0131 (Tokenlar\u0131m\u0131z\u0131 aktaraca\u011F\u0131m\u0131z account)</li><li>Kaynak Token Hesab\u0131 Sahibi (\u0130mzalayaca\u011F\u0131m\u0131z c\xFCzdan adresimiz)</li></ol><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> token_transfer_amount <span class="token operator">=</span> instruction_data
    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token number">8</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>slice<span class="token closure-punctuation punctuation">|</span></span> slice<span class="token punctuation">.</span><span class="token function">try_into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">u64</span><span class="token punctuation">::</span>from_le_bytes<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token class-name">ProgramError</span><span class="token punctuation">::</span><span class="token class-name">InvalidAccountData</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> transfer_tokens_instruction <span class="token operator">=</span> <span class="token function">transfer</span><span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>token_program<span class="token punctuation">.</span>key<span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>source_token_account<span class="token punctuation">.</span>key<span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>destination_token_account<span class="token punctuation">.</span>key<span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>source_token_account_holder<span class="token punctuation">.</span>key<span class="token punctuation">,</span>
    <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token operator">&amp;</span>source_token_account_holder<span class="token punctuation">.</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span>
    token_transfer_amount<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> required_accounts_for_transfer <span class="token operator">=</span> <span class="token punctuation">[</span>
    source_token_account<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    destination_token_account<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    source_token_account_holder<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">invoke</span><span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>transfer_tokens_instruction<span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>required_accounts_for_transfer<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>


</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div><p>\u0130lgili m\xFC\u015Fteri talimat\u0131 a\u015Fa\u011F\u0131daki gibi olacakt\u0131r. Mint ve token olu\u015Fturma talimatlar\u0131n\u0131 \xF6\u011Frenmek i\xE7in l\xFCtfen yak\u0131ndaki kodun tamam\u0131na bak\u0131n.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connection</span><span class="token punctuation">(</span><span class="token function">clusterApiUrl</span><span class="token punctuation">(</span><span class="token string">&quot;devnet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;confirmed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> programId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PublicKey</span><span class="token punctuation">(</span>
    <span class="token string">&quot;EfYK91eN3AqTwY1C34W6a33qGAtQ8HJYVhNv7cV4uMZj&quot;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> transferTokensIx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionInstruction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    programId<span class="token operator">:</span> programId<span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token constant">TOKEN_TRANSFER_AMOUNT_BUFFER</span><span class="token punctuation">,</span>
    keys<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        isSigner<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        isWritable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        pubkey<span class="token operator">:</span> <span class="token constant">SOURCE_TOKEN_ACCOUNT</span><span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        isSigner<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        isWritable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        pubkey<span class="token operator">:</span> <span class="token constant">DESTINATION_TOKEN_ACCOUNT</span><span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        isSigner<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        isWritable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        pubkey<span class="token operator">:</span> <span class="token constant">PAYER_KEYPAIR</span><span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        isSigner<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        isWritable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        pubkey<span class="token operator">:</span> <span class="token constant">TOKEN_PROGRAM_ID</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> transaction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  transaction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>transferTokensIx<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> txHash <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">sendTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token constant">PAYER_KEYPAIR</span><span class="token punctuation">,</span>
    <span class="token constant">TOKEN_MINT_ACCOUNT</span><span class="token punctuation">,</span>
    <span class="token constant">SOURCE_TOKEN_ACCOUNT</span><span class="token punctuation">,</span>
    <span class="token constant">DESTINATION_TOKEN_ACCOUNT</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Token transfer CPI success: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>txHash<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><p>\u015Eimdi <code>Sistem Program\u0131n\u0131n create_account</code> komutu olan ba\u015Fka bir \xF6rne\u011Fe bakal\u0131m. Yukar\u0131da belirtilen talimat ile bu aras\u0131nda k\xFC\xE7\xFCk bir fark vard\u0131r. Orada, <code>token_program</code>&#39;\u0131 \xE7a\u011F\u0131rma i\u015Flevi i\xE7indeki account&#39;lardan biri olarak ge\xE7mek zorunda kalmad\u0131k. Ancak, \xE7a\u011F\u0131ran talimat\u0131n <code>program_id</code>&#39;sini iletmeniz gereken istisnalar vard\u0131r. Bizim durumumuzda bu, <code>Sistem Program\u0131n\u0131n</code> program_id&#39;si olacakt\u0131r. (&quot;111111111111111111111111111111111&quot;). Yani \u015Fimdi gerekli account&#39;lar:</p><ol><li>Rent\u2019i \xF6deyen account</li><li>Olu\u015Fturulacak account</li><li>Sistem Program\u0131 account&#39;\u0131</li></ol><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> account_span <span class="token operator">=</span> instruction_data
    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token number">8</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">and_then</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>slice<span class="token closure-punctuation punctuation">|</span></span> slice<span class="token punctuation">.</span><span class="token function">try_into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">u64</span><span class="token punctuation">::</span>from_le_bytes<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">ok_or</span><span class="token punctuation">(</span><span class="token class-name">ProgramError</span><span class="token punctuation">::</span><span class="token class-name">InvalidAccountData</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> lamports_required <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Rent</span><span class="token punctuation">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">minimum_balance</span><span class="token punctuation">(</span>account_span <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> create_account_instruction <span class="token operator">=</span> <span class="token function">create_account</span><span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>payer_account<span class="token punctuation">.</span>key<span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>general_state_account<span class="token punctuation">.</span>key<span class="token punctuation">,</span>
    lamports_required<span class="token punctuation">,</span>
    account_span<span class="token punctuation">,</span>
    program_id<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> required_accounts_for_create <span class="token operator">=</span> <span class="token punctuation">[</span>
    payer_account<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    general_state_account<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    system_program<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token function">invoke</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>create_account_instruction<span class="token punctuation">,</span> <span class="token operator">&amp;</span>required_accounts_for_create<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><p>\u0130lgili client taraf\u0131 kodu a\u015Fa\u011F\u0131daki gibi g\xF6r\xFCnecektir.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connection</span><span class="token punctuation">(</span><span class="token function">clusterApiUrl</span><span class="token punctuation">(</span><span class="token string">&quot;devnet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;confirmed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> programId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PublicKey</span><span class="token punctuation">(</span>
    <span class="token string">&quot;DkuQ5wsndkzXfgqDB6Lgf4sDjBi4gkLSak1dM5Mn2RuQ&quot;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Airdropping some SOL</span>
  <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">confirmTransaction</span><span class="token punctuation">(</span>
    <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">requestAirdrop</span><span class="token punctuation">(</span><span class="token constant">PAYER_KEYPAIR</span><span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span> <span class="token constant">LAMPORTS_PER_SOL</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Our program&#39;s CPI instruction (create_account)</span>
  <span class="token keyword">const</span> creataAccountIx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionInstruction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    programId<span class="token operator">:</span> programId<span class="token punctuation">,</span>
    data<span class="token operator">:</span> <span class="token constant">ACCOUNT_SPACE_BUFFER</span><span class="token punctuation">,</span>
    keys<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        isSigner<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        isWritable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        pubkey<span class="token operator">:</span> <span class="token constant">PAYER_KEYPAIR</span><span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        isSigner<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        isWritable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        pubkey<span class="token operator">:</span> <span class="token constant">GENERAL_STATE_KEYPAIR</span><span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        isSigner<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        isWritable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        pubkey<span class="token operator">:</span> SystemProgram<span class="token punctuation">.</span>programId<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> transaction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Adding up all the above instructions</span>
  transaction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>creataAccountIx<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> txHash <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">sendTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> <span class="token punctuation">[</span>
    <span class="token constant">PAYER_KEYPAIR</span><span class="token punctuation">,</span>
    <span class="token constant">GENERAL_STATE_KEYPAIR</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Create Account CPI Success: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>txHash<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><h2 id="how-to-create-a-pda-pda-olusturma" tabindex="-1"><a class="header-anchor" href="#how-to-create-a-pda-pda-olusturma" aria-hidden="true">#</a> How to create a PDA (PDA olu\u015Fturma)</h2><p>Program Derived Address (Programdan T\xFCretilmi\u015F Adres), yaln\u0131zca programa ait bir account&#39;t\u0131r, ancak private key\u2019i yoktur. Bunun yerine imzas\u0131 bir dizi seed ve bir art\u0131\u015F (e\u011Frinin d\u0131\u015F\u0131nda oldu\u011Fundan emin olan bir nonce) ile elde edilir. Bir Program Adresini &quot;<strong>\xDCretmek</strong>&quot;, onu &quot;olu\u015Fturmaktan&quot; farkl\u0131d\u0131r. Bir PDA&#39;y\u0131 <code>Pubkey::find_program_address</code> kullanarak \xFCretebilirsiniz. Bir PDA olu\u015Fturmak, esasen, adresi bo\u015Flukla ba\u015Flatmak ve durumu ona ayarlamak anlam\u0131na gelir. Program\u0131m\u0131z\u0131n d\u0131\u015F\u0131nda normal bir Keypair account&#39;\u0131 olu\u015Fturulabilir ve ard\u0131ndan durumunu ba\u015Flatmak i\xE7in verilebilir. Ne yaz\u0131k ki PDA&#39;lar i\xE7in kendi ad\u0131na imza alamama \xF6zelli\u011Finden dolay\u0131 zincir \xFCzerinde olu\u015Fturulmas\u0131 gerekir. Bu nedenle, PDA&#39;n\u0131n seed\u2019lerini iletmek i\xE7in <code>invoke_signed</code>&#39;\u0131 kullan\u0131r\u0131z ve PDA&#39;n\u0131n account olu\u015Fturulmas\u0131yla sonu\xE7lanan fon account&#39;\u0131n\u0131n imzas\u0131n\u0131 kullan\u0131r\u0131z.</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> create_pda_account_ix <span class="token operator">=</span> <span class="token namespace">system_instruction<span class="token punctuation">::</span></span><span class="token function">create_account</span><span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>funding_account<span class="token punctuation">.</span>key<span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>pda_account<span class="token punctuation">.</span>key<span class="token punctuation">,</span>
    lamports_required<span class="token punctuation">,</span>
    <span class="token constant">ACCOUNT_DATA_LEN</span><span class="token punctuation">.</span><span class="token function">try_into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token operator">&amp;</span>program_id<span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">invoke_signed</span><span class="token punctuation">(</span>
    <span class="token operator">&amp;</span>create_pda_account_ix<span class="token punctuation">,</span>
    <span class="token operator">&amp;</span><span class="token punctuation">[</span>funding_account<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pda_account<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token operator">&amp;</span><span class="token punctuation">[</span>signers_seeds<span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>A\u015Fa\u011F\u0131daki gibi client \xFCzerinden gerekli account&#39;lar g\xF6nderilebilir.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token constant">PAYER_KEYPAIR</span> <span class="token operator">=</span> Keypair<span class="token punctuation">.</span><span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Connection</span><span class="token punctuation">(</span><span class="token function">clusterApiUrl</span><span class="token punctuation">(</span><span class="token string">&quot;devnet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;confirmed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> programId <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PublicKey</span><span class="token punctuation">(</span>
    <span class="token string">&quot;6eW5nnSosr2LpkUGCdznsjRGDhVb26tLmiM1P8RV1QQp&quot;</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token punctuation">[</span>pda<span class="token punctuation">,</span> bump<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">await</span> PublicKey<span class="token punctuation">.</span><span class="token function">findProgramAddress</span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span>Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;customaddress&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token constant">PAYER_KEYPAIR</span><span class="token punctuation">.</span>publicKey<span class="token punctuation">.</span><span class="token function">toBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    programId
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> createPDAIx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransactionInstruction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    programId<span class="token operator">:</span> programId<span class="token punctuation">,</span>
    data<span class="token operator">:</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>Uint8Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>bump<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    keys<span class="token operator">:</span> <span class="token punctuation">[</span>
      <span class="token punctuation">{</span>
        isSigner<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        isWritable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        pubkey<span class="token operator">:</span> <span class="token constant">PAYER_KEYPAIR</span><span class="token punctuation">.</span>publicKey<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        isSigner<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        isWritable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
        pubkey<span class="token operator">:</span> pda<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">{</span>
        isSigner<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        isWritable<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
        pubkey<span class="token operator">:</span> SystemProgram<span class="token punctuation">.</span>programId<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> transaction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  transaction<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>createPDAIx<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> txHash <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">sendTransaction</span><span class="token punctuation">(</span>transaction<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token constant">PAYER_KEYPAIR</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><h2 id="how-to-read-accounts-account-lar\u0131-okuma" tabindex="-1"><a class="header-anchor" href="#how-to-read-accounts-account-lar\u0131-okuma" aria-hidden="true">#</a> How to read accounts (Account\u2019lar\u0131 okuma)</h2><p>Solana&#39;daki hemen hemen t\xFCm instruction\u2019lar, en az 2 - 3 account gerektirecektir ve instruction i\u015Fleyicileri \xFCzerinde, bu account k\xFCmesinin hangi s\u0131rayla beklendi\u011Fi bilgisini i\xE7erecektir. Hesaplar\u0131 manuel olarak indekslemek yerine Rust&#39;ta <code>iter()</code> y\xF6nteminden faydalanarak bu basit\xE7e yap\u0131labilir.<code>next_account_info</code> y\xF6ntemi, temel olarak ilk indeksini b\xF6ler ve account\u2019lar array\u2019i i\xE7inde bulunan account\u2019\u0131 d\xF6nd\xFCr\xFCr. Bir grup account bekleyen ve her birinin parse edilmesini gerektiren basit bir instrucion g\xF6relim:</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">process_instruction</span><span class="token punctuation">(</span>
    _program_id<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Pubkey</span><span class="token punctuation">,</span>
    accounts<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">AccountInfo</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    _instruction_data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">ProgramResult</span> <span class="token punctuation">{</span>
    <span class="token comment">// Fetching all the accounts as a iterator (facilitating for loops and iterations)</span>
    <span class="token keyword">let</span> accounts_iter <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> accounts<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// Payer account</span>
    <span class="token keyword">let</span> payer_account <span class="token operator">=</span> <span class="token function">next_account_info</span><span class="token punctuation">(</span>accounts_iter<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token comment">// Hello state account</span>
    <span class="token keyword">let</span> hello_state_account <span class="token operator">=</span> <span class="token function">next_account_info</span><span class="token punctuation">(</span>accounts_iter<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token comment">// Rent account</span>
    <span class="token keyword">let</span> rent_account <span class="token operator">=</span> <span class="token function">next_account_info</span><span class="token punctuation">(</span>accounts_iter<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token comment">// System Program</span>
    <span class="token keyword">let</span> system_program <span class="token operator">=</span> <span class="token function">next_account_info</span><span class="token punctuation">(</span>accounts_iter<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="how-to-verify-accounts-account-lar\u0131-dogrulama" tabindex="-1"><a class="header-anchor" href="#how-to-verify-accounts-account-lar\u0131-dogrulama" aria-hidden="true">#</a> How to verify accounts (Account\u2019lar\u0131 do\u011Frulama)</h2><p>Solana&#39;daki programlar stateless oldu\u011Fundan, bir program yarat\u0131c\u0131s\u0131 olarak, herhangi bir k\xF6t\xFC niyetli account giri\u015Fini \xF6nlemek i\xE7in aktar\u0131lan account\u2019lar\u0131n m\xFCmk\xFCn oldu\u011Funca do\u011Fruland\u0131\u011F\u0131ndan emin olmal\u0131y\u0131z. Bir ki\u015Finin yapabilece\u011Fi temel kontroller \u015Funlard\u0131r:</p><ol><li>Beklenen signer account\u2019\u0131n ger\xE7ekten imzalan\u0131p imzalanmad\u0131\u011F\u0131n\u0131 kontrol edin</li><li>Beklenen state account\u2019\u0131n yaz\u0131labilir olarak kontrol edilip edilmedi\u011Fini kontrol edin</li><li>Beklenen state account\u2019\u0131n sahibinin aranan program kimli\u011Fi olup olmad\u0131\u011F\u0131n\u0131 kontrol edin</li><li>State\u2019i ilk kez ba\u015Flat\u0131yorsan\u0131z, account\u2019\u0131n zaten ba\u015Flat\u0131l\u0131p ba\u015Flat\u0131lmad\u0131\u011F\u0131n\u0131 kontrol edin.</li><li>Ge\xE7ilen herhangi bir cross program kimli\u011Finin (gerekti\u011Finde) beklendi\u011Fi gibi olup olmad\u0131\u011F\u0131n\u0131 kontrol edin.</li></ol><p>Yukar\u0131da belirtilen kontrollerle birlikte bir state account\u2019\u0131 ba\u015Flatan temel bir talimat a\u015Fa\u011F\u0131da tan\u0131mlanm\u0131\u015Ft\u0131r.</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function-definition function">process_instruction</span><span class="token punctuation">(</span>
    program_id<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token class-name">Pubkey</span><span class="token punctuation">,</span>
    accounts<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token class-name">AccountInfo</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    _instruction_data<span class="token punctuation">:</span> <span class="token operator">&amp;</span><span class="token punctuation">[</span><span class="token keyword">u8</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token class-name">ProgramResult</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> accounts_iter <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> accounts<span class="token punctuation">.</span><span class="token function">iter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> payer_account <span class="token operator">=</span> <span class="token function">next_account_info</span><span class="token punctuation">(</span>accounts_iter<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> hello_state_account <span class="token operator">=</span> <span class="token function">next_account_info</span><span class="token punctuation">(</span>accounts_iter<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> system_program <span class="token operator">=</span> <span class="token function">next_account_info</span><span class="token punctuation">(</span>accounts_iter<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> rent <span class="token operator">=</span> <span class="token class-name">Rent</span><span class="token punctuation">::</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token comment">// Checking if payer account is the signer</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>payer_account<span class="token punctuation">.</span>is_signer <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ProgramError</span><span class="token punctuation">::</span><span class="token class-name">MissingRequiredSignature</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Checking if hello state account is rent exempt</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>rent<span class="token punctuation">.</span><span class="token function">is_exempt</span><span class="token punctuation">(</span>hello_state_account<span class="token punctuation">.</span><span class="token function">lamports</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ProgramError</span><span class="token punctuation">::</span><span class="token class-name">AccountNotRentExempt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Checking if hello state account is writable</span>
    <span class="token keyword">if</span> <span class="token operator">!</span>hello_state_account<span class="token punctuation">.</span>is_writable <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ProgramError</span><span class="token punctuation">::</span><span class="token class-name">InvalidAccountData</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Checking if hello state account&#39;s owner is the current program</span>
    <span class="token keyword">if</span> hello_state_account<span class="token punctuation">.</span>owner<span class="token punctuation">.</span><span class="token function">ne</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>program_id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ProgramError</span><span class="token punctuation">::</span><span class="token class-name">IllegalOwner</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Checking if the system program is valid</span>
    <span class="token keyword">if</span> system_program<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">ne</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token constant">SYSTEM_PROGRAM_ID</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ProgramError</span><span class="token punctuation">::</span><span class="token class-name">IncorrectProgramId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">let</span> <span class="token keyword">mut</span> hello_state <span class="token operator">=</span> <span class="token class-name">HelloState</span><span class="token punctuation">::</span><span class="token function">try_from_slice</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>hello_state_account<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">borrow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>

    <span class="token comment">// Checking if the state has already been initialized</span>
    <span class="token keyword">if</span> hello_state<span class="token punctuation">.</span>is_initialized <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Err</span><span class="token punctuation">(</span><span class="token class-name">ProgramError</span><span class="token punctuation">::</span><span class="token class-name">AccountAlreadyInitialized</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    hello_state<span class="token punctuation">.</span>is_initialized <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    hello_state<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> <span class="token operator">&amp;</span><span class="token keyword">mut</span> hello_state_account<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">borrow_mut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>
    <span class="token macro property">msg!</span><span class="token punctuation">(</span><span class="token string">&quot;Account initialized :)&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Ok</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div><h2 id="how-to-read-multiple-instructions-from-a-transaction-islemdeki-coklu-talimatlar\u0131-okuma" tabindex="-1"><a class="header-anchor" href="#how-to-read-multiple-instructions-from-a-transaction-islemdeki-coklu-talimatlar\u0131-okuma" aria-hidden="true">#</a> How to read multiple instructions from a transaction (\u0130\u015Flemdeki \xE7oklu talimatlar\u0131 okuma)</h2><p>Solana, mevcut i\u015Flemdeki t\xFCm talimatlara g\xF6z atmam\u0131za izin veriyor. Bunlar\u0131 bir de\u011Fi\u015Fkende saklayabilir ve \xFCzerlerinde yineleyebiliriz. Bununla, \u015F\xFCpheli i\u015Flemleri kontrol etmek gibi bir\xE7ok \u015Fey yapabiliriz.</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">let</span> <span class="token keyword">mut</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> num_instructions <span class="token operator">=</span> <span class="token function">read_u16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> idx<span class="token punctuation">,</span> <span class="token operator">&amp;</span>instruction_sysvar<span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">map_err</span><span class="token punctuation">(</span><span class="token closure-params"><span class="token closure-punctuation punctuation">|</span>_<span class="token closure-punctuation punctuation">|</span></span> <span class="token class-name">MyError</span><span class="token punctuation">::</span><span class="token class-name">NoInstructionFound</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">;</span>


<span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span>num_instructions <span class="token punctuation">{</span>
    
    <span class="token keyword">let</span> <span class="token keyword">mut</span> current <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>index <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> start <span class="token operator">=</span> <span class="token function">read_u16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> current<span class="token punctuation">,</span> <span class="token operator">&amp;</span>instruction_sysvar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    current <span class="token operator">=</span> start <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> num_accounts <span class="token operator">=</span> <span class="token function">read_u16</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token keyword">mut</span> current<span class="token punctuation">,</span> <span class="token operator">&amp;</span>instruction_sysvar<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    current <span class="token operator">+=</span> <span class="token punctuation">(</span>num_accounts <span class="token keyword">as</span> <span class="token keyword">usize</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>`,50);function t(o,e){return p}var l=n(a,[["render",t]]);export{l as default};
