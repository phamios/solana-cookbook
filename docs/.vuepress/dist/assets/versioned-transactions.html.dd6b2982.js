import{_ as o,r,o as i,c as l,a as e,b as a,F as c,e as t,d as s}from"./app.07ce7a66.js";var u="/assets/tx_format.1023848a.png",d="/assets/compact_array_format.6984243f.png",p="/assets/legacy_message.09ab30b7.png",m="/assets/message_header.8eb7d589.png",b="/assets/compat_array_of_account_addresses.7792e5c7.png",h="/assets/compact_array_of_ixs.6281d70b.png",g="/assets/issues_with_legacy_txs.5766db66.png",_="/assets/luts.96a8a310.png",v="/assets/lut_format.060d6be2.png",f="/assets/messagev0.c089b240.png",k="/assets/compact_array_of_luts.9175e491.png",q="/assets/new_compact_array_of_ixs.54090dc5.png";const x={},T=t('<h1 id="transactions-versionnees" tabindex="-1"><a class="header-anchor" href="#transactions-versionnees" aria-hidden="true">#</a> Transactions Versionn\xE9es</h1><p>Solana a r\xE9cemment sorti les Transactions Versionn\xE9es. Les changements propos\xE9s sont les suivants :</p><ol><li><p>Introduction d&#39;un nouveau programme qui g\xE8re les tables de consultation d&#39;adresses sur la cha\xEEne</p></li><li><p>Ajout d&#39;un nouveau format de transaction qui peut utiliser les tables de consultation d&#39;adresses sur la cha\xEEne</p></li></ol><h2 id="faits" tabindex="-1"><a class="header-anchor" href="#faits" aria-hidden="true">#</a> Faits</h2><div class="custom-container tip"><p class="custom-container-title">Fiche d&#39;Information</p><ul><li>Les transactions h\xE9rit\xE9es ont un probl\xE8me majeur : La taille maximale autoris\xE9e est de 1232 octets ce qui fait que le nombre de comptes qui peuvent tenir dans une transaction atomique est de maximum 35 adresses.</li><li>Tables de Consultation d&#39;Adresses (Address Lookup Tables, LUTs): Une fois que les comptes sont stock\xE9s dans cette table, l&#39;adresse de la table peut \xEAtre r\xE9f\xE9renc\xE9e dans un message de transaction utilisant des indices u8 de 1 octet.</li><li><code>createLookupTable()</code> de <code>solana/web3.js</code> peut \xEAtre utilis\xE9 pour construire une nouvelle table de consultation, ainsi que pour d\xE9terminer son adresse.</li><li>Une fois qu&#39;une Table de Consultation d&#39;Adresses est cr\xE9\xE9e, elle peut \xEAtre \xE9tendue, c&#39;est-\xE0-dire que des comptes peuvent \xEAtre ajout\xE9s \xE0 la table.</li><li>Transactions Versionn\xE9es : La structure des transactions h\xE9rit\xE9es doit \xEAtre modifi\xE9e pour int\xE9grer les Tables de Consultation d&#39;Adresses</li><li>Avant l&#39;introduction du versionnage, les transactions avaient un bit sup\xE9rieur inutilis\xE9 dans le premier octet de leur en-t\xEAte. Celui-ci peut \xEAtre utilis\xE9 pour d\xE9clarer explicitement la version des transactions.</li></ul></div><p>Nous parlerons plus en d\xE9tail des changements introduits ci-dessus et de ce qu&#39;ils signifient pour les d\xE9veloppeurs. Toutefois, pour mieux comprendre les changements, nous devons d&#39;abord comprendre l&#39;anatomie d&#39;une transaction classique (ou h\xE9rit\xE9e).</p><h2 id="transaction-heritee" tabindex="-1"><a class="header-anchor" href="#transaction-heritee" aria-hidden="true">#</a> Transaction H\xE9rit\xE9e</h2>',7),C=s("Le r\xE9seau Solana utilise une taille d'unit\xE9 transactionnelle maximale (MTU) de 1280 octets, conform\xE9ment aux contraintes de taille de l'"),L={href:"https://en.wikipedia.org/wiki/IPv6_packet",target:"_blank",rel:"noopener noreferrer"},y=s("IPv6 MTU"),V=s(" afin de garantir la vitesse et la fiabilit\xE9. Cela laisse "),w=e("strong",null,"1232 octets",-1),A=s(" pour les paquets de donn\xE9es comme les transactions s\xE9rialis\xE9es."),U=e("p",null,"Une transaction est compos\xE9e de :",-1),j=s("Un tableau compact de signatures, o\xF9 chaque signature est un "),S={href:"https://ed25519.cr.yp.to/",target:"_blank",rel:"noopener noreferrer"},I=s("ed25519"),N=s(" de 64 octets."),M=e("li",null,"Un message (h\xE9rit\xE9)",-1),P=e("p",null,[e("img",{src:u,alt:"Transaction Format"})],-1),B={class:"custom-container tip"},H=e("p",{class:"custom-container-title"},"Le format Tableau Compact",-1),E=e("p",null,"Un tableau compact est un tableau s\xE9rialis\xE9 de mani\xE8re \xE0 avoir les composants suivants :",-1),F=s("Une taille de tableau dans un encodage multi-octet appel\xE9 "),R={href:"https://beta.docs.solana.com/developing/programming-model/transactions#compact-u16-format",target:"_blank",rel:"noopener noreferrer"},z=s("Compact-u16"),W=e("li",null,"Suivi de chaque \xE9l\xE9ment du tableau",-1),D=e("p",null,[e("img",{src:d,alt:"Compact array format"})],-1),K=t('<h2 id="message-herite" tabindex="-1"><a class="header-anchor" href="#message-herite" aria-hidden="true">#</a> Message H\xE9rit\xE9</h2><p>Un message h\xE9rit\xE9 comporte les \xE9l\xE9ments suivants :</p><ol><li>Un en-t\xEAte</li><li>Un tableau compact d&#39;adresses de comptes, o\xF9 chaque adresse de compte occupe 32 octets</li><li>Un hash de bloc r\xE9cent</li></ol><ul><li>un hachage SHA-256 de 32 octets utilis\xE9 pour indiquer quand le registre a \xE9t\xE9 observ\xE9 pour la derni\xE8re fois. Si un hash de bloc est trop vieux, les validateurs le rejettent.</li></ul><ol start="4"><li>Un tableau compact d&#39;instructions</li></ol><p><img src="'+p+'" alt="Legacy Message"></p><h3 id="en-tete" tabindex="-1"><a class="header-anchor" href="#en-tete" aria-hidden="true">#</a> En-t\xEAte</h3><p>L&#39;en-t\xEAte du message a une taille de 3 octets et contient 3 entiers u8 :</p><ol><li>Le nombre de signatures requises : le runtime de Solana v\xE9rifie ce nombre avec la taille du tableau compact des signatures de la transaction.</li><li>Le nombre d&#39;adresses de comptes en lecture seule qui n\xE9cessitent une signature.</li><li>Le nombre d&#39;adresses de comptes en lecture seule qui ne n\xE9cessitent pas de signature.</li></ol><p><img src="'+m+'" alt="Message Header"></p><h3 id="tableau-compact-d-adresses-de-comptes" tabindex="-1"><a class="header-anchor" href="#tableau-compact-d-adresses-de-comptes" aria-hidden="true">#</a> Tableau compact d&#39;adresses de comptes</h3><p>Ce tableau compact commence par un encodage compact-u16 du nombre d&#39;adresses de comptes, suivi par :</p><ol><li><strong>Adresses de compte n\xE9cessitant une signature</strong>: Les adresses qui demandent un acc\xE8s en lecture et en \xE9criture sont list\xE9es en premier, suivies de celles qui demandent un acc\xE8s en lecture seule</li><li><strong>Adresses de comptes qui ne n\xE9cessitent pas de signature</strong>: Comme ci-dessus, les adresses qui demandent un acc\xE8s en lecture et en \xE9criture sont list\xE9es en premier, suivies de celles qui demandent un acc\xE8s en lecture seule</li></ol><p><img src="'+b+'" alt="Compact array of account addresses"></p><h3 id="tableau-compact-d-instructions" tabindex="-1"><a class="header-anchor" href="#tableau-compact-d-instructions" aria-hidden="true">#</a> Tableau compact d&#39;instructions</h3><p>Tout comme le tableau d&#39;adresses de comptes, ce tableau compact commence par un encodage compact-u16 du nombre d&#39;instructions, suivi d&#39;un tableau d&#39;instructions. Chaque instruction du tableau comporte les \xE9l\xE9ments suivants :</p><ol><li><strong>Identifiant du programme</strong>: identifie un programme on-chain qui traitera l&#39;instruction. Il est repr\xE9sent\xE9 par un index u8 vers une adresse dans le tableau compact d&#39;adresses de comptes dans le message.</li><li><strong>Tableau compact d&#39;index d&#39;adresses de compte</strong>: index u8 vers un sous-ensemble d&#39;adresses de comptes dans le tableau compact des adresses de comptes qui n\xE9cessitent une signature.</li><li><strong>Tableau compact de donn\xE9es opaques u8</strong>: un tableau d&#39;octets d&#39;usage g\xE9n\xE9ral qui est sp\xE9cifique \xE0 l&#39;identifiant du programme mentionn\xE9 pr\xE9c\xE9demment. Ce tableau de donn\xE9es sp\xE9cifie toutes les op\xE9rations que le programme doit effectuer et toute information suppl\xE9mentaire que les comptes pourraient ne pas contenir.</li></ol><p><img src="'+h+'" alt="Compact array of Instructions"></p><h2 id="problemes-lies-aux-transactions-heritees" tabindex="-1"><a class="header-anchor" href="#problemes-lies-aux-transactions-heritees" aria-hidden="true">#</a> Probl\xE8mes li\xE9s aux Transactions H\xE9rit\xE9es</h2><p>Quel est le probl\xE8me avec le mod\xE8le de transaction ci-dessus ?</p><p><strong>La taille maximale d&#39;une transaction, et donc le nombre de comptes qui peuvent tenir dans une seule transaction atomique.</strong></p><p>Comme nous l&#39;avons vu pr\xE9c\xE9demment, la taille maximale autoris\xE9e pour une transaction est de <strong>1232 octets</strong>. La taille d&#39;une adresse de compte est de 32 octets. Ainsi, une transaction peut au mieux stocker <strong>35 comptes</strong>, en tenant compte d&#39;un certain espace pour les en-t\xEAtes, les signatures et autres m\xE9tadonn\xE9es.</p><p><img src="'+g+'" alt="Issue with legacy transactions"></p><p>Cela pose probl\xE8me car il existe plusieurs cas o\xF9 les d\xE9veloppeurs doivent inclure des centaines de comptes sans signature dans une seule transaction. Cela n&#39;est actuellement pas possible avec le mod\xE8le de transaction h\xE9rit\xE9e. La solution actuellement utilis\xE9e consiste \xE0 stocker temporairement l&#39;\xE9tat sur la cha\xEEne et \xE0 le r\xE9utiliser ult\xE9rieurement dans des transactions. Cette solution de fortune ne fonctionne pas lorsque plusieurs programmes doivent \xEAtre compos\xE9s en une seule transaction. Chaque programme n\xE9cessite plusieurs comptes en entr\xE9e et nous tombons donc dans le m\xEAme probl\xE8me que pr\xE9c\xE9demment.</p><p>C&#39;est l\xE0 que les <strong>Tables de Consultation d&#39;Adresses (LUT)</strong> sont utilis\xE9es.</p><h2 id="tables-de-consultation-d-adresses-lut" tabindex="-1"><a class="header-anchor" href="#tables-de-consultation-d-adresses-lut" aria-hidden="true">#</a> Tables de Consultation d&#39;Adresses (LUT)</h2><p>L&#39;id\xE9e derri\xE8re les Tables de Consultation d&#39;Adresses est de stocker les adresses de comptes dans une structure de donn\xE9es de type table (tableau) sur la cha\xEEne. Une fois que les comptes sont stock\xE9s dans cette table, l&#39;adresse de la table peut \xEAtre r\xE9f\xE9renc\xE9e dans un message de transaction. Pour pointer vers un compte en particulier dans la table, un index u8 de 1 octet est n\xE9cessaire.</p><p><img src="'+_+'" alt="LUTs"></p><p>Cela permet de gagner de l&#39;espace car les adresses ne doivent plus \xEAtre stock\xE9es dans le message de transaction. Ils doivent seulement \xEAtre r\xE9f\xE9renc\xE9s sous la forme d&#39;un index dans le tableau. Cela conduit \xE0 la possibilit\xE9 de r\xE9f\xE9rencer 2^8=<strong>256</strong> comptes, car les comptes sont r\xE9f\xE9renc\xE9s en utilisant un index u8.</p><p>Les Tables de Consultation d&#39;Adresses doivent \xEAtre exemptes de rente lors de leur initialisation ou chaque fois qu&#39;une nouvelle adresse est ajout\xE9e \xE0 la table. Les adresses peuvent \xEAtre ajout\xE9es \xE0 cette table soit par un buffer on-chain, soit en les ajoutant directement \xE0 la table par l&#39;instruction <code>Extension</code>. De plus, les Tables de Consultation d&#39;Adresses peuvent stocker les m\xE9tadonn\xE9es associ\xE9es suivies d&#39;un tableau compact de comptes. Vous pouvez voir ci-dessous la structure d&#39;une Table de Consultation d&#39;Adresses standard.</p><p><img src="'+v+`" alt="LUT Format"></p><p>L&#39;un des principaux inconv\xE9nients des Tables de Consultation d&#39;Adresses est que, comme les recherches d&#39;adresses n\xE9cessitent une charge suppl\xE9mentaire pendant le traitement des transactions, elles entra\xEEnent g\xE9n\xE9ralement des co\xFBts plus \xE9lev\xE9s pour une transaction.</p><h2 id="transactions-versionnees-transactionv0" tabindex="-1"><a class="header-anchor" href="#transactions-versionnees-transactionv0" aria-hidden="true">#</a> Transactions Versionn\xE9es : TransactionV0</h2><p>La structure des transactions h\xE9rit\xE9es doit \xEAtre modifi\xE9e pour int\xE9grer les consultations de la table d&#39;adresses. Ces changements ne doivent pas perturber le traitement des transactions sur Solana, et ne doivent pas provoquer de changement de format des programmes invoqu\xE9s.</p><p>Pour garantir cela, il est important de mentionner explicitement le type de transaction : <code>legacy</code> or <code>versioned</code>. Comment inclure ces informations dans une transaction ?</p><p>Avant l&#39;introduction du versionnage, les transactions avaient un bit sup\xE9rieur inutilis\xE9 dans le premier octet de leur en-t\xEAte : <code>num_required_signatures</code>. Nous pouvons maintenant utiliser ce bit pour d\xE9clarer explicitement la version de nos transactions.</p><div class="language-rust ext-rs line-numbers-mode"><pre class="language-rust"><code><span class="token keyword">pub</span> <span class="token keyword">enum</span> <span class="token type-definition class-name">VersionedMessage</span> <span class="token punctuation">{</span>
    <span class="token class-name">Legacy</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token constant">V0</span><span class="token punctuation">(</span><span class="token namespace">v0<span class="token punctuation">::</span></span><span class="token class-name">Message</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>Si le premier bit est fix\xE9, les autres bits du premier octet codent un num\xE9ro de version. Solana commence avec la &quot;Version 0&quot;, qui est la version requise pour commencer \xE0 utiliser les Tables de Consultation d&#39;Adresses.</p><p>Si le premier bit n&#39;est pas fix\xE9, la transaction sera consid\xE9r\xE9e comme une &quot;transaction h\xE9rit\xE9e&quot; et le reste du premier octet sera trait\xE9 comme le premier octet d&#39;un message h\xE9rit\xE9 cod\xE9.</p><h2 id="messagev0" tabindex="-1"><a class="header-anchor" href="#messagev0" aria-hidden="true">#</a> MessageV0</h2><p>La structure du nouveau MessageV0 est plus ou moins la m\xEAme, \xE0 l&#39;exception de deux petits mais importants changements :</p><ol><li><strong>En-t\xEAte du Message</strong>: inchang\xE9 par rapport \xE0 celui du message h\xE9rit\xE9</li><li><strong>Tableau compact de cl\xE9s de compte</strong>: inchang\xE9 par rapport \xE0 celui du message h\xE9rit\xE9. Nous d\xE9signerons le tableau d&#39;indices pointant vers les \xE9l\xE9ments de ce tableau par <em>tableau d&#39;indices A</em> (vous verrez bient\xF4t pourquoi nous le d\xE9signons ainsi)</li><li><strong>Hash de bloc r\xE9cent</strong>: inchang\xE9 par rapport \xE0 celui du message h\xE9rit\xE9</li><li><strong>Tableau compact d&#39;instructions</strong>: diff\xE9rent de celui du message h\xE9rit\xE9</li><li><strong>Tableau compact de consultations de tables d&#39;adresses</strong>: introduit dans v0</li></ol><p><img src="`+f+'" alt="Message v0"></p><p>Nous allons d&#39;abord discuter de la structure du tableau compact de consultation de la table d&#39;adresses avant de voir ce qui a chang\xE9 dans le tableau d&#39;instructions.</p><h3 id="tableau-compact-de-consultations-de-tables-d-adresses" tabindex="-1"><a class="header-anchor" href="#tableau-compact-de-consultations-de-tables-d-adresses" aria-hidden="true">#</a> Tableau compact de consultations de tables d&#39;adresses</h3><p>Cette structure introduit les Tables de Consultation d&#39;Adresses (LUTs) dans les transactions versionn\xE9es, ce qui permet d&#39;utiliser les LUTs pour int\xE9grer plus de comptes en lecture seule et en \xE9criture dans une seule transaction.</p><p>Le tableau compact commence par un encodage compact-u16 du nombre de consultations de la table d&#39;adresses, suivi d&#39;un tableau de consultations de la table d&#39;adresses. Chaque consultation a la structure suivante :</p><ol><li><strong>Cl\xE9 de compte</strong>: cl\xE9 de compte de la table de consultation d&#39;adresses</li><li><strong>Index modifiables en \xE9criture</strong>: tableau compact d&#39;index utilis\xE9s pour int\xE9grer les adresses de comptes modifiables en \xE9criture. Nous d\xE9signerons ce tableau par <em>tableau d&#39;indices B</em>.</li><li><strong>Index en lecture seule</strong>: tableau compact d&#39;index utilis\xE9s pour int\xE9grer les adresses de comptes en lecture seule. Nous d\xE9signerons ce tableau par <em>tableau d&#39;indices C</em></li></ol><p><img src="'+k+'" alt="Compact array of LUTs"></p><p>Voyons maintenant quels changements ont \xE9t\xE9 apport\xE9s dans le tableau compact d&#39;instructions</p><h3 id="tableau-compact-d-instructions-1" tabindex="-1"><a class="header-anchor" href="#tableau-compact-d-instructions-1" aria-hidden="true">#</a> Tableau compact d&#39;instructions</h3><p>Comme indiqu\xE9 pr\xE9c\xE9demment, le tableau compact d&#39;instructions h\xE9rit\xE9es stocke des instructions h\xE9rit\xE9es individuelles qui, \xE0 leur tour, stockent les \xE9l\xE9ments suivants :</p><ol><li>Index de l&#39;identifiant du programme</li><li>Tableau compact d&#39;index d&#39;adresses de comptes</li><li>Tableau compact de donn\xE9es opaques de 8 bits</li></ol><p>Le changement dans la nouvelle instruction n&#39;est pas dans la structure de l&#39;instruction elle-m\xEAme, mais dans le tableau utilis\xE9 pour obtenir les indices de 1 et 2. Dans les transactions h\xE9rit\xE9es, un sous-ensemble du tableau d&#39;indices A est utilis\xE9, tandis que dans les transactions versionn\xE9es, un sous-ensemble du tableau combin\xE9 des \xE9l\xE9ments suivants est utilis\xE9 :</p><ol><li><strong>tableau d&#39;indices A</strong>: Tableau compact des comptes stock\xE9s dans le message</li><li><strong>tableau d&#39;indices B</strong>: Index modifiables en \xE9criture dans la consultation de la table d&#39;adresses</li><li><strong>tableau d&#39;indices C</strong>: Index en lecture seule dans la consultation de la table d&#39;adresses</li></ol><p><img src="'+q+`" alt="New Compact array of Instructions"></p><h2 id="modifications-du-rpc" tabindex="-1"><a class="header-anchor" href="#modifications-du-rpc" aria-hidden="true">#</a> Modifications du RPC</h2><p>Les r\xE9ponses des transactions n\xE9cessiteront un nouveau champ correspondant \xE0 la version : <code>maxSupportedTransactionVersion</code> pour indiquer aux clients quelle structure de transaction doit \xEAtre utilis\xE9e pour la d\xE9s\xE9rialisation.</p><p>Les m\xE9thodes suivantes doivent \xEAtre mises \xE0 jour pour \xE9viter les erreurs :</p><ul><li><code>getTransaction</code></li><li><code>getBlock</code></li></ul><p>Le param\xE8tre suivant doit \xEAtre ajout\xE9 aux requ\xEAtes :</p><p><code>maxSupportedTransactionVersion: 0</code></p><p>Si <code>maxSupportedTransactionVersion</code> n&#39;est pas explicitement ajout\xE9 \xE0 la requ\xEAte, la version de la transaction sera fix\xE9e \xE0 <code>legacy</code>. Tout bloc qui contient une transaction versionn\xE9e sera retourn\xE9 avec une erreur par le client dans le cas d&#39;une transaction h\xE9rit\xE9e.</p><p>Vous pouvez d\xE9finir ces param\xE8tres via des requ\xEAtes au format JSON adress\xE9es au point de terminaison RPC, comme ci-dessous :</p><div class="language-plaintext ext-plaintext line-numbers-mode"><pre class="language-plaintext"><code>curl http://localhost:8899 -X POST -H &quot;Content-Type: application/json&quot; -d \\
&#39;{&quot;jsonrpc&quot;: &quot;2.0&quot;, &quot;id&quot;:1, &quot;method&quot;: &quot;getBlock&quot;, &quot;params&quot;: [430, {
  &quot;encoding&quot;:&quot;json&quot;,
  &quot;maxSupportedTransactionVersion&quot;:0,
  &quot;transactionDetails&quot;:&quot;full&quot;,
  &quot;rewards&quot;:false
}]}&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>`,65),Q=s("Vous pouvez \xE9galement faire de m\xEAme en utilisant la biblioth\xE8que "),G={href:"https://solana-labs.github.io/solana-web3.js/",target:"_blank",rel:"noopener noreferrer"},J=e("code",null,"@solana/web3.js",-1),O=s("."),X=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// connect to the \`devnet\` cluster and get the current \`slot\`</span>
<span class="token keyword">const</span> connection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">web3<span class="token punctuation">.</span>Connection</span><span class="token punctuation">(</span>web3<span class="token punctuation">.</span><span class="token function">clusterApiUrl</span><span class="token punctuation">(</span><span class="token string">&quot;devnet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> slot <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">getSlot</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// get the latest block (allowing for v0 transactions)</span>
<span class="token keyword">const</span> block <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">getBlock</span><span class="token punctuation">(</span>slot<span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">maxSupportedTransactionVersion</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// get a specific transaction (allowing for v0 transactions)</span>
<span class="token keyword">const</span> getTx <span class="token operator">=</span> <span class="token keyword">await</span> connection<span class="token punctuation">.</span><span class="token function">getTransaction</span><span class="token punctuation">(</span>
  <span class="token string">&quot;3jpoANiFeVGisWRY5UP648xRXs3iQasCHABPWRWnoEjeA93nc79WrnGgpgazjq4K9m8g2NJoyKoWBV1Kx5VmtwHQ&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">maxSupportedTransactionVersion</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="autres-ressources" tabindex="-1"><a class="header-anchor" href="#autres-ressources" aria-hidden="true">#</a> Autres Ressources</h2>`,2),Y={href:"https://beta.docs.solana.com/developing/versioned-transactions#how-create-a-versioned-transaction",target:"_blank",rel:"noopener noreferrer"},Z=s("Comment construire une Transaction Versionn\xE9e"),$={href:"https://beta.docs.solana.com/developing/lookup-tables#how-to-create-an-address-lookup-table",target:"_blank",rel:"noopener noreferrer"},ee=s("Comment construire une Transaction Versionn\xE9e avec consultation d'adresse en utilisant les LUTs"),se={href:"https://beta.docs.solana.com/proposals/transactions-v2#limitations",target:"_blank",rel:"noopener noreferrer"},ne=s("Limites des Transactions Versionn\xE9es"),ae={href:"https://beta.docs.solana.com/proposals/transactions-v2#security-concerns",target:"_blank",rel:"noopener noreferrer"},te=s("Probl\xE8mes de s\xE9curit\xE9 des Transactions Versionn\xE9es"),oe={href:"https://beta.docs.solana.com/proposals/transactions-v2#other-proposals",target:"_blank",rel:"noopener noreferrer"},re=s("Autres solutions propos\xE9es pour les Transactions Versionn\xE9es"),ie=e("h2",{id:"references",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#references","aria-hidden":"true"},"#"),s(" R\xE9f\xE9rences")],-1),le={href:"https://beta.docs.solana.com/proposals/transactions-v2",target:"_blank",rel:"noopener noreferrer"},ce=s("Proposition de transactions-V2"),ue={href:"https://beta.docs.solana.com/developing/versioned-transactions",target:"_blank",rel:"noopener noreferrer"},de=s("D\xE9velopper avec les Transactions Versionn\xE9es");function pe(me,be){const n=r("ExternalLinkIcon");return i(),l(c,null,[T,e("p",null,[C,e("a",L,[y,a(n)]),V,w,A]),U,e("ol",null,[e("li",null,[j,e("a",S,[I,a(n)]),N]),M]),P,e("div",B,[H,E,e("ol",null,[e("li",null,[F,e("a",R,[z,a(n)])]),W]),D]),K,e("p",null,[Q,e("a",G,[J,a(n)]),O]),X,e("ul",null,[e("li",null,[e("a",Y,[Z,a(n)])]),e("li",null,[e("a",$,[ee,a(n)])]),e("li",null,[e("a",se,[ne,a(n)])]),e("li",null,[e("a",ae,[te,a(n)])]),e("li",null,[e("a",oe,[re,a(n)])])]),ie,e("ul",null,[e("li",null,[e("a",le,[ce,a(n)])]),e("li",null,[e("a",ue,[de,a(n)])])])],64)}var ge=o(x,[["render",pe]]);export{ge as default};
